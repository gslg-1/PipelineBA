ARM GAS  C:\WINDOWS\TEMP\ccbBnizN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"freertos.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.vApplicationIdleHook,"ax",%progbits
  22              		.align	2
  23              		.weak	vApplicationIdleHook
  24              		.thumb
  25              		.thumb_func
  27              	vApplicationIdleHook:
  28              	.LFB135:
  29              		.file 1 "Src/freertos.c"
   1:Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Src/freertos.c **** /**
   3:Src/freertos.c ****   ******************************************************************************
   4:Src/freertos.c ****   * File Name          : freertos.c
   5:Src/freertos.c ****   * Description        : Code for freertos applications
   6:Src/freertos.c ****   ******************************************************************************
   7:Src/freertos.c ****   * @attention
   8:Src/freertos.c ****   *
   9:Src/freertos.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/freertos.c ****   * All rights reserved.</center></h2>
  11:Src/freertos.c ****   *
  12:Src/freertos.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/freertos.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/freertos.c ****   * the License. You may obtain a copy of the License at:
  15:Src/freertos.c ****   *                             www.st.com/SLA0044
  16:Src/freertos.c ****   *
  17:Src/freertos.c ****   ******************************************************************************
  18:Src/freertos.c ****   */
  19:Src/freertos.c **** /* USER CODE END Header */
  20:Src/freertos.c **** 
  21:Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/freertos.c **** #include "FreeRTOS.h"
  23:Src/freertos.c **** #include "task.h"
  24:Src/freertos.c **** #include "main.h"
  25:Src/freertos.c **** 
  26:Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Src/freertos.c **** /* USER CODE BEGIN Includes */     
  28:Src/freertos.c **** 
  29:Src/freertos.c **** /* USER CODE END Includes */
ARM GAS  C:\WINDOWS\TEMP\ccbBnizN.s 			page 2


  30:Src/freertos.c **** 
  31:Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  32:Src/freertos.c **** /* USER CODE BEGIN PTD */
  33:Src/freertos.c **** 
  34:Src/freertos.c **** /* USER CODE END PTD */
  35:Src/freertos.c **** 
  36:Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  37:Src/freertos.c **** /* USER CODE BEGIN PD */
  38:Src/freertos.c **** 
  39:Src/freertos.c **** /* USER CODE END PD */
  40:Src/freertos.c **** 
  41:Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  42:Src/freertos.c **** /* USER CODE BEGIN PM */
  43:Src/freertos.c **** 
  44:Src/freertos.c **** /* USER CODE END PM */
  45:Src/freertos.c **** 
  46:Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  47:Src/freertos.c **** /* USER CODE BEGIN Variables */
  48:Src/freertos.c **** 
  49:Src/freertos.c **** /* USER CODE END Variables */
  50:Src/freertos.c **** 
  51:Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  52:Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  53:Src/freertos.c ****    
  54:Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  55:Src/freertos.c **** 
  56:Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  57:Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  58:Src/freertos.c **** 
  59:Src/freertos.c **** /* Hook prototypes */
  60:Src/freertos.c **** void vApplicationIdleHook(void);
  61:Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  62:Src/freertos.c **** void vApplicationMallocFailedHook(void);
  63:Src/freertos.c **** 
  64:Src/freertos.c **** /* USER CODE BEGIN 2 */
  65:Src/freertos.c **** __weak void vApplicationIdleHook( void )
  66:Src/freertos.c **** {
  30              		.loc 1 66 0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE135:
  39 0002 00BF     		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  40              		.align	2
  41              		.weak	vApplicationStackOverflowHook
  42              		.thumb
  43              		.thumb_func
  45              	vApplicationStackOverflowHook:
  46              	.LFB136:
  67:Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  68:Src/freertos.c ****    to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
  69:Src/freertos.c ****    task. It is essential that code added to this hook function never attempts
  70:Src/freertos.c ****    to block in any way (for example, call xQueueReceive() with a block time
  71:Src/freertos.c ****    specified, or call vTaskDelay()). If the application makes use of the
ARM GAS  C:\WINDOWS\TEMP\ccbBnizN.s 			page 3


  72:Src/freertos.c ****    vTaskDelete() API function (as this demo application does) then it is also
  73:Src/freertos.c ****    important that vApplicationIdleHook() is permitted to return to its calling
  74:Src/freertos.c ****    function, because it is the responsibility of the idle task to clean up
  75:Src/freertos.c ****    memory allocated by the kernel to any task that has since been deleted. */
  76:Src/freertos.c **** }
  77:Src/freertos.c **** /* USER CODE END 2 */
  78:Src/freertos.c **** 
  79:Src/freertos.c **** /* USER CODE BEGIN 4 */
  80:Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  81:Src/freertos.c **** {
  47              		.loc 1 81 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL0:
  53 0000 7047     		bx	lr
  54              		.cfi_endproc
  55              	.LFE136:
  57 0002 00BF     		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
  58              		.align	2
  59              		.weak	vApplicationMallocFailedHook
  60              		.thumb
  61              		.thumb_func
  63              	vApplicationMallocFailedHook:
  64              	.LFB137:
  82:Src/freertos.c ****    /* Run time stack overflow checking is performed if
  83:Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
  84:Src/freertos.c ****    called if a stack overflow is detected. */
  85:Src/freertos.c **** }
  86:Src/freertos.c **** /* USER CODE END 4 */
  87:Src/freertos.c **** 
  88:Src/freertos.c **** /* USER CODE BEGIN 5 */
  89:Src/freertos.c **** __weak void vApplicationMallocFailedHook(void)
  90:Src/freertos.c **** {
  65              		.loc 1 90 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70 0000 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE137:
  74 0002 00BF     		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  75              		.align	2
  76              		.global	vApplicationGetIdleTaskMemory
  77              		.thumb
  78              		.thumb_func
  80              	vApplicationGetIdleTaskMemory:
  81              	.LFB138:
  91:Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
  92:Src/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
  93:Src/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
  94:Src/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
  95:Src/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
  96:Src/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
  97:Src/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
ARM GAS  C:\WINDOWS\TEMP\ccbBnizN.s 			page 4


  98:Src/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
  99:Src/freertos.c ****    to query the size of free heap space that remains (although it does not
 100:Src/freertos.c ****    provide information on how the remaining heap might be fragmented). */
 101:Src/freertos.c **** }
 102:Src/freertos.c **** /* USER CODE END 5 */
 103:Src/freertos.c **** 
 104:Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
 105:Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
 106:Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
 107:Src/freertos.c ****   
 108:Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 109:Src/freertos.c **** {
  82              		.loc 1 109 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL1:
 110:Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  88              		.loc 1 110 0
  89 0000 034B     		ldr	r3, .L5
  90 0002 0360     		str	r3, [r0]
 111:Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  91              		.loc 1 111 0
  92 0004 034B     		ldr	r3, .L5+4
  93 0006 0B60     		str	r3, [r1]
 112:Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  94              		.loc 1 112 0
  95 0008 8023     		movs	r3, #128
  96 000a 1360     		str	r3, [r2]
  97 000c 7047     		bx	lr
  98              	.L6:
  99 000e 00BF     		.align	2
 100              	.L5:
 101 0010 00000000 		.word	.LANCHOR0
 102 0014 00000000 		.word	.LANCHOR1
 103              		.cfi_endproc
 104              	.LFE138:
 106              		.section	.bss.xIdleStack,"aw",%nobits
 107              		.align	2
 108              		.set	.LANCHOR1,. + 0
 111              	xIdleStack:
 112 0000 00000000 		.space	512
 112      00000000 
 112      00000000 
 112      00000000 
 112      00000000 
 113              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 114              		.align	2
 115              		.set	.LANCHOR0,. + 0
 118              	xIdleTaskTCBBuffer:
 119 0000 00000000 		.space	88
 119      00000000 
 119      00000000 
 119      00000000 
 119      00000000 
 120              		.text
ARM GAS  C:\WINDOWS\TEMP\ccbBnizN.s 			page 5


 121              	.Letext0:
 122              		.file 2 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_
 123              		.file 3 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 124              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 125              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 126              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 127              		.file 7 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  C:\WINDOWS\TEMP\ccbBnizN.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\WINDOWS\TEMP\ccbBnizN.s:22     .text.vApplicationIdleHook:00000000 $t
C:\WINDOWS\TEMP\ccbBnizN.s:27     .text.vApplicationIdleHook:00000000 vApplicationIdleHook
C:\WINDOWS\TEMP\ccbBnizN.s:40     .text.vApplicationStackOverflowHook:00000000 $t
C:\WINDOWS\TEMP\ccbBnizN.s:45     .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
C:\WINDOWS\TEMP\ccbBnizN.s:58     .text.vApplicationMallocFailedHook:00000000 $t
C:\WINDOWS\TEMP\ccbBnizN.s:63     .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
C:\WINDOWS\TEMP\ccbBnizN.s:75     .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\WINDOWS\TEMP\ccbBnizN.s:80     .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\WINDOWS\TEMP\ccbBnizN.s:101    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\WINDOWS\TEMP\ccbBnizN.s:107    .bss.xIdleStack:00000000 $d
C:\WINDOWS\TEMP\ccbBnizN.s:111    .bss.xIdleStack:00000000 xIdleStack
C:\WINDOWS\TEMP\ccbBnizN.s:114    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\WINDOWS\TEMP\ccbBnizN.s:118    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
