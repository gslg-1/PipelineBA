ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB145:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "cmsis_os.h"
  24:Src/main.c    **** #include "usb_host.h"
  25:Src/main.c    **** 
  26:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  27:Src/main.c    **** /* USER CODE BEGIN Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 2


  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** CRC_HandleTypeDef hcrc;
  47:Src/main.c    **** 
  48:Src/main.c    **** DMA2D_HandleTypeDef hdma2d;
  49:Src/main.c    **** 
  50:Src/main.c    **** I2C_HandleTypeDef hi2c3;
  51:Src/main.c    **** 
  52:Src/main.c    **** LTDC_HandleTypeDef hltdc;
  53:Src/main.c    **** 
  54:Src/main.c    **** SPI_HandleTypeDef hspi5;
  55:Src/main.c    **** 
  56:Src/main.c    **** TIM_HandleTypeDef htim1;
  57:Src/main.c    **** 
  58:Src/main.c    **** UART_HandleTypeDef huart1;
  59:Src/main.c    **** 
  60:Src/main.c    **** SDRAM_HandleTypeDef hsdram1;
  61:Src/main.c    **** 
  62:Src/main.c    **** osThreadId defaultTaskHandle;
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END PV */
  66:Src/main.c    **** 
  67:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  68:Src/main.c    **** void SystemClock_Config(void);
  69:Src/main.c    **** static void MX_GPIO_Init(void);
  70:Src/main.c    **** static void MX_CRC_Init(void);
  71:Src/main.c    **** static void MX_DMA2D_Init(void);
  72:Src/main.c    **** static void MX_FMC_Init(void);
  73:Src/main.c    **** static void MX_I2C3_Init(void);
  74:Src/main.c    **** static void MX_LTDC_Init(void);
  75:Src/main.c    **** static void MX_SPI5_Init(void);
  76:Src/main.c    **** static void MX_TIM1_Init(void);
  77:Src/main.c    **** static void MX_USART1_UART_Init(void);
  78:Src/main.c    **** void StartDefaultTask(void const * argument);
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE BEGIN PFP */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END PFP */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  85:Src/main.c    **** /* USER CODE BEGIN 0 */
  86:Src/main.c    **** 
  87:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /**
  90:Src/main.c    ****   * @brief  The application entry point.
  91:Src/main.c    ****   * @retval int
  92:Src/main.c    ****   */
  93:Src/main.c    **** int main(void)
  94:Src/main.c    **** {
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END 1 */
  98:Src/main.c    ****   
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 103:Src/main.c    ****   HAL_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN Init */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Configure the system clock */
 110:Src/main.c    ****   SystemClock_Config();
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE END SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Initialize all configured peripherals */
 117:Src/main.c    ****   MX_GPIO_Init();
 118:Src/main.c    ****   MX_CRC_Init();
 119:Src/main.c    ****   MX_DMA2D_Init();
 120:Src/main.c    ****   MX_FMC_Init();
 121:Src/main.c    ****   MX_I2C3_Init();
 122:Src/main.c    ****   MX_LTDC_Init();
 123:Src/main.c    ****   MX_SPI5_Init();
 124:Src/main.c    ****   MX_TIM1_Init();
 125:Src/main.c    ****   MX_USART1_UART_Init();
 126:Src/main.c    ****   /* USER CODE BEGIN 2 */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END 2 */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 131:Src/main.c    ****   /* add mutexes, ... */
 132:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 135:Src/main.c    ****   /* add semaphores, ... */
 136:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 139:Src/main.c    ****   /* start timers, add new ones, ... */
 140:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 143:Src/main.c    ****   /* add queues, ... */
 144:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 4


 145:Src/main.c    **** 
 146:Src/main.c    ****   /* Create the thread(s) */
 147:Src/main.c    ****   /* definition and creation of defaultTask */
 148:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 149:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 150:Src/main.c    **** 
 151:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 152:Src/main.c    ****   /* add threads, ... */
 153:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* Start scheduler */
 156:Src/main.c    ****   osKernelStart();
 157:Src/main.c    ****  
 158:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* Infinite loop */
 161:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 162:Src/main.c    ****   while (1)
 163:Src/main.c    ****   {
 164:Src/main.c    ****     /* USER CODE END WHILE */
 165:Src/main.c    **** 
 166:Src/main.c    ****     /* USER CODE BEGIN 3 */
 167:Src/main.c    ****   }
 168:Src/main.c    ****   /* USER CODE END 3 */
 169:Src/main.c    **** }
 170:Src/main.c    **** 
 171:Src/main.c    **** /**
 172:Src/main.c    ****   * @brief System Clock Configuration
 173:Src/main.c    ****   * @retval None
 174:Src/main.c    ****   */
 175:Src/main.c    **** void SystemClock_Config(void)
 176:Src/main.c    **** {
 177:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 178:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 179:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 180:Src/main.c    **** 
 181:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 182:Src/main.c    ****   */
 183:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 184:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 185:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 186:Src/main.c    ****   */
 187:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 188:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 195:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
 199:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 200:Src/main.c    ****   */
 201:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 5


 202:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 203:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 204:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 205:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 206:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 207:Src/main.c    **** 
 208:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 209:Src/main.c    ****   {
 210:Src/main.c    ****     Error_Handler();
 211:Src/main.c    ****   }
 212:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 213:Src/main.c    ****   PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 214:Src/main.c    ****   PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 215:Src/main.c    ****   PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 216:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 217:Src/main.c    ****   {
 218:Src/main.c    ****     Error_Handler();
 219:Src/main.c    ****   }
 220:Src/main.c    **** }
 221:Src/main.c    **** 
 222:Src/main.c    **** /**
 223:Src/main.c    ****   * @brief CRC Initialization Function
 224:Src/main.c    ****   * @param None
 225:Src/main.c    ****   * @retval None
 226:Src/main.c    ****   */
 227:Src/main.c    **** static void MX_CRC_Init(void)
 228:Src/main.c    **** {
 229:Src/main.c    **** 
 230:Src/main.c    ****   /* USER CODE BEGIN CRC_Init 0 */
 231:Src/main.c    **** 
 232:Src/main.c    ****   /* USER CODE END CRC_Init 0 */
 233:Src/main.c    **** 
 234:Src/main.c    ****   /* USER CODE BEGIN CRC_Init 1 */
 235:Src/main.c    **** 
 236:Src/main.c    ****   /* USER CODE END CRC_Init 1 */
 237:Src/main.c    ****   hcrc.Instance = CRC;
 238:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 239:Src/main.c    ****   {
 240:Src/main.c    ****     Error_Handler();
 241:Src/main.c    ****   }
 242:Src/main.c    ****   /* USER CODE BEGIN CRC_Init 2 */
 243:Src/main.c    **** 
 244:Src/main.c    ****   /* USER CODE END CRC_Init 2 */
 245:Src/main.c    **** 
 246:Src/main.c    **** }
 247:Src/main.c    **** 
 248:Src/main.c    **** /**
 249:Src/main.c    ****   * @brief DMA2D Initialization Function
 250:Src/main.c    ****   * @param None
 251:Src/main.c    ****   * @retval None
 252:Src/main.c    ****   */
 253:Src/main.c    **** static void MX_DMA2D_Init(void)
 254:Src/main.c    **** {
 255:Src/main.c    **** 
 256:Src/main.c    ****   /* USER CODE BEGIN DMA2D_Init 0 */
 257:Src/main.c    **** 
 258:Src/main.c    ****   /* USER CODE END DMA2D_Init 0 */
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 6


 259:Src/main.c    **** 
 260:Src/main.c    ****   /* USER CODE BEGIN DMA2D_Init 1 */
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* USER CODE END DMA2D_Init 1 */
 263:Src/main.c    ****   hdma2d.Instance = DMA2D;
 264:Src/main.c    ****   hdma2d.Init.Mode = DMA2D_M2M;
 265:Src/main.c    ****   hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 266:Src/main.c    ****   hdma2d.Init.OutputOffset = 0;
 267:Src/main.c    ****   hdma2d.LayerCfg[1].InputOffset = 0;
 268:Src/main.c    ****   hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 269:Src/main.c    ****   hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 270:Src/main.c    ****   hdma2d.LayerCfg[1].InputAlpha = 0;
 271:Src/main.c    ****   if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    ****   if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 276:Src/main.c    ****   {
 277:Src/main.c    ****     Error_Handler();
 278:Src/main.c    ****   }
 279:Src/main.c    ****   /* USER CODE BEGIN DMA2D_Init 2 */
 280:Src/main.c    **** 
 281:Src/main.c    ****   /* USER CODE END DMA2D_Init 2 */
 282:Src/main.c    **** 
 283:Src/main.c    **** }
 284:Src/main.c    **** 
 285:Src/main.c    **** /**
 286:Src/main.c    ****   * @brief I2C3 Initialization Function
 287:Src/main.c    ****   * @param None
 288:Src/main.c    ****   * @retval None
 289:Src/main.c    ****   */
 290:Src/main.c    **** static void MX_I2C3_Init(void)
 291:Src/main.c    **** {
 292:Src/main.c    **** 
 293:Src/main.c    ****   /* USER CODE BEGIN I2C3_Init 0 */
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE END I2C3_Init 0 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   /* USER CODE BEGIN I2C3_Init 1 */
 298:Src/main.c    **** 
 299:Src/main.c    ****   /* USER CODE END I2C3_Init 1 */
 300:Src/main.c    ****   hi2c3.Instance = I2C3;
 301:Src/main.c    ****   hi2c3.Init.ClockSpeed = 100000;
 302:Src/main.c    ****   hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 303:Src/main.c    ****   hi2c3.Init.OwnAddress1 = 0;
 304:Src/main.c    ****   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 305:Src/main.c    ****   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 306:Src/main.c    ****   hi2c3.Init.OwnAddress2 = 0;
 307:Src/main.c    ****   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 308:Src/main.c    ****   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 309:Src/main.c    ****   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 310:Src/main.c    ****   {
 311:Src/main.c    ****     Error_Handler();
 312:Src/main.c    ****   }
 313:Src/main.c    ****   /** Configure Analogue filter 
 314:Src/main.c    ****   */
 315:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 7


 316:Src/main.c    ****   {
 317:Src/main.c    ****     Error_Handler();
 318:Src/main.c    ****   }
 319:Src/main.c    ****   /** Configure Digital filter 
 320:Src/main.c    ****   */
 321:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 322:Src/main.c    ****   {
 323:Src/main.c    ****     Error_Handler();
 324:Src/main.c    ****   }
 325:Src/main.c    ****   /* USER CODE BEGIN I2C3_Init 2 */
 326:Src/main.c    **** 
 327:Src/main.c    ****   /* USER CODE END I2C3_Init 2 */
 328:Src/main.c    **** 
 329:Src/main.c    **** }
 330:Src/main.c    **** 
 331:Src/main.c    **** /**
 332:Src/main.c    ****   * @brief LTDC Initialization Function
 333:Src/main.c    ****   * @param None
 334:Src/main.c    ****   * @retval None
 335:Src/main.c    ****   */
 336:Src/main.c    **** static void MX_LTDC_Init(void)
 337:Src/main.c    **** {
 338:Src/main.c    **** 
 339:Src/main.c    ****   /* USER CODE BEGIN LTDC_Init 0 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   /* USER CODE END LTDC_Init 0 */
 342:Src/main.c    **** 
 343:Src/main.c    ****   LTDC_LayerCfgTypeDef pLayerCfg = {0};
 344:Src/main.c    **** 
 345:Src/main.c    ****   /* USER CODE BEGIN LTDC_Init 1 */
 346:Src/main.c    **** 
 347:Src/main.c    ****   /* USER CODE END LTDC_Init 1 */
 348:Src/main.c    ****   hltdc.Instance = LTDC;
 349:Src/main.c    ****   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 350:Src/main.c    ****   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 351:Src/main.c    ****   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 352:Src/main.c    ****   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 353:Src/main.c    ****   hltdc.Init.HorizontalSync = 9;
 354:Src/main.c    ****   hltdc.Init.VerticalSync = 1;
 355:Src/main.c    ****   hltdc.Init.AccumulatedHBP = 29;
 356:Src/main.c    ****   hltdc.Init.AccumulatedVBP = 3;
 357:Src/main.c    ****   hltdc.Init.AccumulatedActiveW = 269;
 358:Src/main.c    ****   hltdc.Init.AccumulatedActiveH = 323;
 359:Src/main.c    ****   hltdc.Init.TotalWidth = 279;
 360:Src/main.c    ****   hltdc.Init.TotalHeigh = 327;
 361:Src/main.c    ****   hltdc.Init.Backcolor.Blue = 0;
 362:Src/main.c    ****   hltdc.Init.Backcolor.Green = 0;
 363:Src/main.c    ****   hltdc.Init.Backcolor.Red = 0;
 364:Src/main.c    ****   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 365:Src/main.c    ****   {
 366:Src/main.c    ****     Error_Handler();
 367:Src/main.c    ****   }
 368:Src/main.c    ****   pLayerCfg.WindowX0 = 0;
 369:Src/main.c    ****   pLayerCfg.WindowX1 = 240;
 370:Src/main.c    ****   pLayerCfg.WindowY0 = 0;
 371:Src/main.c    ****   pLayerCfg.WindowY1 = 320;
 372:Src/main.c    ****   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 8


 373:Src/main.c    ****   pLayerCfg.Alpha = 255;
 374:Src/main.c    ****   pLayerCfg.Alpha0 = 0;
 375:Src/main.c    ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 376:Src/main.c    ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 377:Src/main.c    ****   pLayerCfg.FBStartAdress = 0xD0000000;
 378:Src/main.c    ****   pLayerCfg.ImageWidth = 240;
 379:Src/main.c    ****   pLayerCfg.ImageHeight = 320;
 380:Src/main.c    ****   pLayerCfg.Backcolor.Blue = 0;
 381:Src/main.c    ****   pLayerCfg.Backcolor.Green = 0;
 382:Src/main.c    ****   pLayerCfg.Backcolor.Red = 0;
 383:Src/main.c    ****   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 384:Src/main.c    ****   {
 385:Src/main.c    ****     Error_Handler();
 386:Src/main.c    ****   }
 387:Src/main.c    ****   /* USER CODE BEGIN LTDC_Init 2 */
 388:Src/main.c    **** 
 389:Src/main.c    ****   /* USER CODE END LTDC_Init 2 */
 390:Src/main.c    **** 
 391:Src/main.c    **** }
 392:Src/main.c    **** 
 393:Src/main.c    **** /**
 394:Src/main.c    ****   * @brief SPI5 Initialization Function
 395:Src/main.c    ****   * @param None
 396:Src/main.c    ****   * @retval None
 397:Src/main.c    ****   */
 398:Src/main.c    **** static void MX_SPI5_Init(void)
 399:Src/main.c    **** {
 400:Src/main.c    **** 
 401:Src/main.c    ****   /* USER CODE BEGIN SPI5_Init 0 */
 402:Src/main.c    **** 
 403:Src/main.c    ****   /* USER CODE END SPI5_Init 0 */
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* USER CODE BEGIN SPI5_Init 1 */
 406:Src/main.c    **** 
 407:Src/main.c    ****   /* USER CODE END SPI5_Init 1 */
 408:Src/main.c    ****   /* SPI5 parameter configuration*/
 409:Src/main.c    ****   hspi5.Instance = SPI5;
 410:Src/main.c    ****   hspi5.Init.Mode = SPI_MODE_MASTER;
 411:Src/main.c    ****   hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 412:Src/main.c    ****   hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 413:Src/main.c    ****   hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 414:Src/main.c    ****   hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 415:Src/main.c    ****   hspi5.Init.NSS = SPI_NSS_SOFT;
 416:Src/main.c    ****   hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 417:Src/main.c    ****   hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 418:Src/main.c    ****   hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 419:Src/main.c    ****   hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 420:Src/main.c    ****   hspi5.Init.CRCPolynomial = 10;
 421:Src/main.c    ****   if (HAL_SPI_Init(&hspi5) != HAL_OK)
 422:Src/main.c    ****   {
 423:Src/main.c    ****     Error_Handler();
 424:Src/main.c    ****   }
 425:Src/main.c    ****   /* USER CODE BEGIN SPI5_Init 2 */
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* USER CODE END SPI5_Init 2 */
 428:Src/main.c    **** 
 429:Src/main.c    **** }
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 9


 430:Src/main.c    **** 
 431:Src/main.c    **** /**
 432:Src/main.c    ****   * @brief TIM1 Initialization Function
 433:Src/main.c    ****   * @param None
 434:Src/main.c    ****   * @retval None
 435:Src/main.c    ****   */
 436:Src/main.c    **** static void MX_TIM1_Init(void)
 437:Src/main.c    **** {
 438:Src/main.c    **** 
 439:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 440:Src/main.c    **** 
 441:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 442:Src/main.c    **** 
 443:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 444:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 445:Src/main.c    **** 
 446:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 447:Src/main.c    **** 
 448:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 449:Src/main.c    ****   htim1.Instance = TIM1;
 450:Src/main.c    ****   htim1.Init.Prescaler = 0;
 451:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 452:Src/main.c    ****   htim1.Init.Period = 0;
 453:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 454:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 455:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 456:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 457:Src/main.c    ****   {
 458:Src/main.c    ****     Error_Handler();
 459:Src/main.c    ****   }
 460:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 461:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 462:Src/main.c    ****   {
 463:Src/main.c    ****     Error_Handler();
 464:Src/main.c    ****   }
 465:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 466:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 467:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 468:Src/main.c    ****   {
 469:Src/main.c    ****     Error_Handler();
 470:Src/main.c    ****   }
 471:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 472:Src/main.c    **** 
 473:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 474:Src/main.c    **** 
 475:Src/main.c    **** }
 476:Src/main.c    **** 
 477:Src/main.c    **** /**
 478:Src/main.c    ****   * @brief USART1 Initialization Function
 479:Src/main.c    ****   * @param None
 480:Src/main.c    ****   * @retval None
 481:Src/main.c    ****   */
 482:Src/main.c    **** static void MX_USART1_UART_Init(void)
 483:Src/main.c    **** {
 484:Src/main.c    **** 
 485:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 486:Src/main.c    **** 
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 10


 487:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 488:Src/main.c    **** 
 489:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 490:Src/main.c    **** 
 491:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 492:Src/main.c    ****   huart1.Instance = USART1;
 493:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 494:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 495:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 496:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 497:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 498:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 499:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 500:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 501:Src/main.c    ****   {
 502:Src/main.c    ****     Error_Handler();
 503:Src/main.c    ****   }
 504:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 505:Src/main.c    **** 
 506:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 507:Src/main.c    **** 
 508:Src/main.c    **** }
 509:Src/main.c    **** 
 510:Src/main.c    **** /* FMC initialization function */
 511:Src/main.c    **** static void MX_FMC_Init(void)
 512:Src/main.c    **** {
 513:Src/main.c    **** 
 514:Src/main.c    ****   /* USER CODE BEGIN FMC_Init 0 */
 515:Src/main.c    **** 
 516:Src/main.c    ****   /* USER CODE END FMC_Init 0 */
 517:Src/main.c    **** 
 518:Src/main.c    ****   FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE BEGIN FMC_Init 1 */
 521:Src/main.c    **** 
 522:Src/main.c    ****   /* USER CODE END FMC_Init 1 */
 523:Src/main.c    **** 
 524:Src/main.c    ****   /** Perform the SDRAM1 memory initialization sequence
 525:Src/main.c    ****   */
 526:Src/main.c    ****   hsdram1.Instance = FMC_SDRAM_DEVICE;
 527:Src/main.c    ****   /* hsdram1.Init */
 528:Src/main.c    ****   hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 529:Src/main.c    ****   hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 530:Src/main.c    ****   hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 531:Src/main.c    ****   hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 532:Src/main.c    ****   hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 533:Src/main.c    ****   hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 534:Src/main.c    ****   hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 535:Src/main.c    ****   hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 536:Src/main.c    ****   hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 537:Src/main.c    ****   hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 538:Src/main.c    ****   /* SdramTiming */
 539:Src/main.c    ****   SdramTiming.LoadToActiveDelay = 2;
 540:Src/main.c    ****   SdramTiming.ExitSelfRefreshDelay = 7;
 541:Src/main.c    ****   SdramTiming.SelfRefreshTime = 4;
 542:Src/main.c    ****   SdramTiming.RowCycleDelay = 7;
 543:Src/main.c    ****   SdramTiming.WriteRecoveryTime = 3;
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 11


 544:Src/main.c    ****   SdramTiming.RPDelay = 2;
 545:Src/main.c    ****   SdramTiming.RCDDelay = 2;
 546:Src/main.c    **** 
 547:Src/main.c    ****   if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 548:Src/main.c    ****   {
 549:Src/main.c    ****     Error_Handler( );
 550:Src/main.c    ****   }
 551:Src/main.c    **** 
 552:Src/main.c    ****   /* USER CODE BEGIN FMC_Init 2 */
 553:Src/main.c    **** 
 554:Src/main.c    ****   /* USER CODE END FMC_Init 2 */
 555:Src/main.c    **** }
 556:Src/main.c    **** 
 557:Src/main.c    **** /**
 558:Src/main.c    ****   * @brief GPIO Initialization Function
 559:Src/main.c    ****   * @param None
 560:Src/main.c    ****   * @retval None
 561:Src/main.c    ****   */
 562:Src/main.c    **** static void MX_GPIO_Init(void)
 563:Src/main.c    **** {
  29              		.loc 1 563 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 56
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 4, -32
  37              		.cfi_offset 5, -28
  38              		.cfi_offset 6, -24
  39              		.cfi_offset 7, -20
  40              		.cfi_offset 8, -16
  41              		.cfi_offset 9, -12
  42              		.cfi_offset 10, -8
  43              		.cfi_offset 14, -4
  44 0004 8EB0     		sub	sp, sp, #56
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 88
 564:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  47              		.loc 1 564 0
  48 0006 0024     		movs	r4, #0
  49 0008 0994     		str	r4, [sp, #36]
  50 000a 0A94     		str	r4, [sp, #40]
  51 000c 0B94     		str	r4, [sp, #44]
  52 000e 0C94     		str	r4, [sp, #48]
  53 0010 0D94     		str	r4, [sp, #52]
  54              	.LBB2:
 565:Src/main.c    **** 
 566:Src/main.c    ****   /* GPIO Ports Clock Enable */
 567:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  55              		.loc 1 567 0
  56 0012 0194     		str	r4, [sp, #4]
  57 0014 5D4B     		ldr	r3, .L3
  58 0016 1A6B     		ldr	r2, [r3, #48]
  59 0018 42F00402 		orr	r2, r2, #4
  60 001c 1A63     		str	r2, [r3, #48]
  61 001e 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 12


  62 0020 02F00402 		and	r2, r2, #4
  63 0024 0192     		str	r2, [sp, #4]
  64 0026 019A     		ldr	r2, [sp, #4]
  65              	.LBE2:
  66              	.LBB3:
 568:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  67              		.loc 1 568 0
  68 0028 0294     		str	r4, [sp, #8]
  69 002a 1A6B     		ldr	r2, [r3, #48]
  70 002c 42F02002 		orr	r2, r2, #32
  71 0030 1A63     		str	r2, [r3, #48]
  72 0032 1A6B     		ldr	r2, [r3, #48]
  73 0034 02F02002 		and	r2, r2, #32
  74 0038 0292     		str	r2, [sp, #8]
  75 003a 029A     		ldr	r2, [sp, #8]
  76              	.LBE3:
  77              	.LBB4:
 569:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  78              		.loc 1 569 0
  79 003c 0394     		str	r4, [sp, #12]
  80 003e 1A6B     		ldr	r2, [r3, #48]
  81 0040 42F08002 		orr	r2, r2, #128
  82 0044 1A63     		str	r2, [r3, #48]
  83 0046 1A6B     		ldr	r2, [r3, #48]
  84 0048 02F08002 		and	r2, r2, #128
  85 004c 0392     		str	r2, [sp, #12]
  86 004e 039A     		ldr	r2, [sp, #12]
  87              	.LBE4:
  88              	.LBB5:
 570:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  89              		.loc 1 570 0
  90 0050 0494     		str	r4, [sp, #16]
  91 0052 1A6B     		ldr	r2, [r3, #48]
  92 0054 42F00102 		orr	r2, r2, #1
  93 0058 1A63     		str	r2, [r3, #48]
  94 005a 1A6B     		ldr	r2, [r3, #48]
  95 005c 02F00102 		and	r2, r2, #1
  96 0060 0492     		str	r2, [sp, #16]
  97 0062 049A     		ldr	r2, [sp, #16]
  98              	.LBE5:
  99              	.LBB6:
 571:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 100              		.loc 1 571 0
 101 0064 0594     		str	r4, [sp, #20]
 102 0066 1A6B     		ldr	r2, [r3, #48]
 103 0068 42F00202 		orr	r2, r2, #2
 104 006c 1A63     		str	r2, [r3, #48]
 105 006e 1A6B     		ldr	r2, [r3, #48]
 106 0070 02F00202 		and	r2, r2, #2
 107 0074 0592     		str	r2, [sp, #20]
 108 0076 059A     		ldr	r2, [sp, #20]
 109              	.LBE6:
 110              	.LBB7:
 572:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 111              		.loc 1 572 0
 112 0078 0694     		str	r4, [sp, #24]
 113 007a 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 13


 114 007c 42F04002 		orr	r2, r2, #64
 115 0080 1A63     		str	r2, [r3, #48]
 116 0082 1A6B     		ldr	r2, [r3, #48]
 117 0084 02F04002 		and	r2, r2, #64
 118 0088 0692     		str	r2, [sp, #24]
 119 008a 069A     		ldr	r2, [sp, #24]
 120              	.LBE7:
 121              	.LBB8:
 573:Src/main.c    ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 122              		.loc 1 573 0
 123 008c 0794     		str	r4, [sp, #28]
 124 008e 1A6B     		ldr	r2, [r3, #48]
 125 0090 42F01002 		orr	r2, r2, #16
 126 0094 1A63     		str	r2, [r3, #48]
 127 0096 1A6B     		ldr	r2, [r3, #48]
 128 0098 02F01002 		and	r2, r2, #16
 129 009c 0792     		str	r2, [sp, #28]
 130 009e 079A     		ldr	r2, [sp, #28]
 131              	.LBE8:
 132              	.LBB9:
 574:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 133              		.loc 1 574 0
 134 00a0 0894     		str	r4, [sp, #32]
 135 00a2 1A6B     		ldr	r2, [r3, #48]
 136 00a4 42F00802 		orr	r2, r2, #8
 137 00a8 1A63     		str	r2, [r3, #48]
 138 00aa 1B6B     		ldr	r3, [r3, #48]
 139 00ac 03F00803 		and	r3, r3, #8
 140 00b0 0893     		str	r3, [sp, #32]
 141 00b2 089B     		ldr	r3, [sp, #32]
 142              	.LBE9:
 575:Src/main.c    **** 
 576:Src/main.c    ****   /*Configure GPIO pin Output Level */
 577:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 143              		.loc 1 577 0
 144 00b4 364F     		ldr	r7, .L3+4
 145 00b6 2246     		mov	r2, r4
 146 00b8 1621     		movs	r1, #22
 147 00ba 3846     		mov	r0, r7
 148 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 149              	.LVL0:
 578:Src/main.c    **** 
 579:Src/main.c    ****   /*Configure GPIO pin Output Level */
 580:Src/main.c    ****   HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 150              		.loc 1 580 0
 151 00c0 DFF8D880 		ldr	r8, .L3+16
 152 00c4 2246     		mov	r2, r4
 153 00c6 8021     		movs	r1, #128
 154 00c8 4046     		mov	r0, r8
 155 00ca FFF7FEFF 		bl	HAL_GPIO_WritePin
 156              	.LVL1:
 581:Src/main.c    **** 
 582:Src/main.c    ****   /*Configure GPIO pin Output Level */
 583:Src/main.c    ****   HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 157              		.loc 1 583 0
 158 00ce 314E     		ldr	r6, .L3+8
 159 00d0 2246     		mov	r2, r4
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 14


 160 00d2 4FF44051 		mov	r1, #12288
 161 00d6 3046     		mov	r0, r6
 162 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 163              	.LVL2:
 584:Src/main.c    **** 
 585:Src/main.c    ****   /*Configure GPIO pin Output Level */
 586:Src/main.c    ****   HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 164              		.loc 1 586 0
 165 00dc DFF8C090 		ldr	r9, .L3+20
 166 00e0 2246     		mov	r2, r4
 167 00e2 4FF4C041 		mov	r1, #24576
 168 00e6 4846     		mov	r0, r9
 169 00e8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 170              	.LVL3:
 587:Src/main.c    **** 
 588:Src/main.c    ****   /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
 589:Src/main.c    ****   GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 171              		.loc 1 589 0
 172 00ec 1623     		movs	r3, #22
 173 00ee 0993     		str	r3, [sp, #36]
 590:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 174              		.loc 1 590 0
 175 00f0 0125     		movs	r5, #1
 176 00f2 0A95     		str	r5, [sp, #40]
 591:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 177              		.loc 1 591 0
 178 00f4 0B94     		str	r4, [sp, #44]
 592:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 179              		.loc 1 592 0
 180 00f6 0C94     		str	r4, [sp, #48]
 593:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 181              		.loc 1 593 0
 182 00f8 09A9     		add	r1, sp, #36
 183 00fa 3846     		mov	r0, r7
 184 00fc FFF7FEFF 		bl	HAL_GPIO_Init
 185              	.LVL4:
 594:Src/main.c    **** 
 595:Src/main.c    ****   /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
 596:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 186              		.loc 1 596 0
 187 0100 48F20703 		movw	r3, #32775
 188 0104 0993     		str	r3, [sp, #36]
 597:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 189              		.loc 1 597 0
 190 0106 DFF89CA0 		ldr	r10, .L3+24
 191 010a CDF828A0 		str	r10, [sp, #40]
 598:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 192              		.loc 1 598 0
 193 010e 0B94     		str	r4, [sp, #44]
 599:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 194              		.loc 1 599 0
 195 0110 09A9     		add	r1, sp, #36
 196 0112 4046     		mov	r0, r8
 197 0114 FFF7FEFF 		bl	HAL_GPIO_Init
 198              	.LVL5:
 600:Src/main.c    **** 
 601:Src/main.c    ****   /*Configure GPIO pin : ACP_RST_Pin */
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 15


 602:Src/main.c    ****   GPIO_InitStruct.Pin = ACP_RST_Pin;
 199              		.loc 1 602 0
 200 0118 8023     		movs	r3, #128
 201 011a 0993     		str	r3, [sp, #36]
 603:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 202              		.loc 1 603 0
 203 011c 0A95     		str	r5, [sp, #40]
 604:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 204              		.loc 1 604 0
 205 011e 0B94     		str	r4, [sp, #44]
 605:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 206              		.loc 1 605 0
 207 0120 0C94     		str	r4, [sp, #48]
 606:Src/main.c    ****   HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 208              		.loc 1 606 0
 209 0122 09A9     		add	r1, sp, #36
 210 0124 4046     		mov	r0, r8
 211 0126 FFF7FEFF 		bl	HAL_GPIO_Init
 212              	.LVL6:
 607:Src/main.c    **** 
 608:Src/main.c    ****   /*Configure GPIO pin : OTG_FS_OC_Pin */
 609:Src/main.c    ****   GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 213              		.loc 1 609 0
 214 012a 2023     		movs	r3, #32
 215 012c 0993     		str	r3, [sp, #36]
 610:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 216              		.loc 1 610 0
 217 012e CDF828A0 		str	r10, [sp, #40]
 611:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 218              		.loc 1 611 0
 219 0132 0B94     		str	r4, [sp, #44]
 612:Src/main.c    ****   HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 220              		.loc 1 612 0
 221 0134 09A9     		add	r1, sp, #36
 222 0136 3846     		mov	r0, r7
 223 0138 FFF7FEFF 		bl	HAL_GPIO_Init
 224              	.LVL7:
 613:Src/main.c    **** 
 614:Src/main.c    ****   /*Configure GPIO pin : BOOT1_Pin */
 615:Src/main.c    ****   GPIO_InitStruct.Pin = BOOT1_Pin;
 225              		.loc 1 615 0
 226 013c 0423     		movs	r3, #4
 227 013e 0993     		str	r3, [sp, #36]
 616:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 228              		.loc 1 616 0
 229 0140 0A94     		str	r4, [sp, #40]
 617:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 230              		.loc 1 617 0
 231 0142 0B94     		str	r4, [sp, #44]
 618:Src/main.c    ****   HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 232              		.loc 1 618 0
 233 0144 09A9     		add	r1, sp, #36
 234 0146 1448     		ldr	r0, .L3+12
 235 0148 FFF7FEFF 		bl	HAL_GPIO_Init
 236              	.LVL8:
 619:Src/main.c    **** 
 620:Src/main.c    ****   /*Configure GPIO pin : TE_Pin */
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 16


 621:Src/main.c    ****   GPIO_InitStruct.Pin = TE_Pin;
 237              		.loc 1 621 0
 238 014c 4FF40063 		mov	r3, #2048
 239 0150 0993     		str	r3, [sp, #36]
 622:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 240              		.loc 1 622 0
 241 0152 0A94     		str	r4, [sp, #40]
 623:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 242              		.loc 1 623 0
 243 0154 0B94     		str	r4, [sp, #44]
 624:Src/main.c    ****   HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 244              		.loc 1 624 0
 245 0156 09A9     		add	r1, sp, #36
 246 0158 3046     		mov	r0, r6
 247 015a FFF7FEFF 		bl	HAL_GPIO_Init
 248              	.LVL9:
 625:Src/main.c    **** 
 626:Src/main.c    ****   /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
 627:Src/main.c    ****   GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 249              		.loc 1 627 0
 250 015e 4FF44053 		mov	r3, #12288
 251 0162 0993     		str	r3, [sp, #36]
 628:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 252              		.loc 1 628 0
 253 0164 0A95     		str	r5, [sp, #40]
 629:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 254              		.loc 1 629 0
 255 0166 0B94     		str	r4, [sp, #44]
 630:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 256              		.loc 1 630 0
 257 0168 0C94     		str	r4, [sp, #48]
 631:Src/main.c    ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 258              		.loc 1 631 0
 259 016a 09A9     		add	r1, sp, #36
 260 016c 3046     		mov	r0, r6
 261 016e FFF7FEFF 		bl	HAL_GPIO_Init
 262              	.LVL10:
 632:Src/main.c    **** 
 633:Src/main.c    ****   /*Configure GPIO pins : LD3_Pin LD4_Pin */
 634:Src/main.c    ****   GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 263              		.loc 1 634 0
 264 0172 4FF4C043 		mov	r3, #24576
 265 0176 0993     		str	r3, [sp, #36]
 635:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 266              		.loc 1 635 0
 267 0178 0A95     		str	r5, [sp, #40]
 636:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 268              		.loc 1 636 0
 269 017a 0B94     		str	r4, [sp, #44]
 637:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 270              		.loc 1 637 0
 271 017c 0C94     		str	r4, [sp, #48]
 638:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 272              		.loc 1 638 0
 273 017e 09A9     		add	r1, sp, #36
 274 0180 4846     		mov	r0, r9
 275 0182 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 17


 276              	.LVL11:
 639:Src/main.c    **** 
 640:Src/main.c    **** }
 277              		.loc 1 640 0
 278 0186 0EB0     		add	sp, sp, #56
 279              	.LCFI2:
 280              		.cfi_def_cfa_offset 32
 281              		@ sp needed
 282 0188 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 283              	.L4:
 284              		.align	2
 285              	.L3:
 286 018c 00380240 		.word	1073887232
 287 0190 00080240 		.word	1073874944
 288 0194 000C0240 		.word	1073875968
 289 0198 00040240 		.word	1073873920
 290 019c 00000240 		.word	1073872896
 291 01a0 00180240 		.word	1073879040
 292 01a4 00001210 		.word	269615104
 293              		.cfi_endproc
 294              	.LFE145:
 296              		.section	.text.MX_CRC_Init,"ax",%progbits
 297              		.align	2
 298              		.thumb
 299              		.thumb_func
 301              	MX_CRC_Init:
 302              	.LFB137:
 228:Src/main.c    **** 
 303              		.loc 1 228 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307 0000 08B5     		push	{r3, lr}
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 8
 310              		.cfi_offset 3, -8
 311              		.cfi_offset 14, -4
 237:Src/main.c    ****   if (HAL_CRC_Init(&hcrc) != HAL_OK)
 312              		.loc 1 237 0
 313 0002 0348     		ldr	r0, .L7
 314 0004 034B     		ldr	r3, .L7+4
 315 0006 0360     		str	r3, [r0]
 238:Src/main.c    ****   {
 316              		.loc 1 238 0
 317 0008 FFF7FEFF 		bl	HAL_CRC_Init
 318              	.LVL12:
 319 000c 08BD     		pop	{r3, pc}
 320              	.L8:
 321 000e 00BF     		.align	2
 322              	.L7:
 323 0010 00000000 		.word	hcrc
 324 0014 00300240 		.word	1073885184
 325              		.cfi_endproc
 326              	.LFE137:
 328              		.section	.text.MX_DMA2D_Init,"ax",%progbits
 329              		.align	2
 330              		.thumb
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 18


 331              		.thumb_func
 333              	MX_DMA2D_Init:
 334              	.LFB138:
 254:Src/main.c    **** 
 335              		.loc 1 254 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339 0000 10B5     		push	{r4, lr}
 340              	.LCFI4:
 341              		.cfi_def_cfa_offset 8
 342              		.cfi_offset 4, -8
 343              		.cfi_offset 14, -4
 263:Src/main.c    ****   hdma2d.Init.Mode = DMA2D_M2M;
 344              		.loc 1 263 0
 345 0002 094C     		ldr	r4, .L11
 346 0004 094B     		ldr	r3, .L11+4
 347 0006 2360     		str	r3, [r4]
 264:Src/main.c    ****   hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 348              		.loc 1 264 0
 349 0008 0023     		movs	r3, #0
 350 000a 6360     		str	r3, [r4, #4]
 265:Src/main.c    ****   hdma2d.Init.OutputOffset = 0;
 351              		.loc 1 265 0
 352 000c A360     		str	r3, [r4, #8]
 266:Src/main.c    ****   hdma2d.LayerCfg[1].InputOffset = 0;
 353              		.loc 1 266 0
 354 000e E360     		str	r3, [r4, #12]
 267:Src/main.c    ****   hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 355              		.loc 1 267 0
 356 0010 A362     		str	r3, [r4, #40]
 268:Src/main.c    ****   hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 357              		.loc 1 268 0
 358 0012 E362     		str	r3, [r4, #44]
 269:Src/main.c    ****   hdma2d.LayerCfg[1].InputAlpha = 0;
 359              		.loc 1 269 0
 360 0014 2363     		str	r3, [r4, #48]
 270:Src/main.c    ****   if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 361              		.loc 1 270 0
 362 0016 6363     		str	r3, [r4, #52]
 271:Src/main.c    ****   {
 363              		.loc 1 271 0
 364 0018 2046     		mov	r0, r4
 365 001a FFF7FEFF 		bl	HAL_DMA2D_Init
 366              	.LVL13:
 275:Src/main.c    ****   {
 367              		.loc 1 275 0
 368 001e 0121     		movs	r1, #1
 369 0020 2046     		mov	r0, r4
 370 0022 FFF7FEFF 		bl	HAL_DMA2D_ConfigLayer
 371              	.LVL14:
 372 0026 10BD     		pop	{r4, pc}
 373              	.L12:
 374              		.align	2
 375              	.L11:
 376 0028 00000000 		.word	hdma2d
 377 002c 00B00240 		.word	1073917952
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 19


 378              		.cfi_endproc
 379              	.LFE138:
 381              		.section	.text.MX_FMC_Init,"ax",%progbits
 382              		.align	2
 383              		.thumb
 384              		.thumb_func
 386              	MX_FMC_Init:
 387              	.LFB144:
 512:Src/main.c    **** 
 388              		.loc 1 512 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 32
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392 0000 00B5     		push	{lr}
 393              	.LCFI5:
 394              		.cfi_def_cfa_offset 4
 395              		.cfi_offset 14, -4
 396 0002 89B0     		sub	sp, sp, #36
 397              	.LCFI6:
 398              		.cfi_def_cfa_offset 40
 518:Src/main.c    **** 
 399              		.loc 1 518 0
 400 0004 0023     		movs	r3, #0
 526:Src/main.c    ****   /* hsdram1.Init */
 401              		.loc 1 526 0
 402 0006 1348     		ldr	r0, .L15
 403 0008 134A     		ldr	r2, .L15+4
 404 000a 0260     		str	r2, [r0]
 528:Src/main.c    ****   hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 405              		.loc 1 528 0
 406 000c 0122     		movs	r2, #1
 407 000e 4260     		str	r2, [r0, #4]
 529:Src/main.c    ****   hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 408              		.loc 1 529 0
 409 0010 8360     		str	r3, [r0, #8]
 530:Src/main.c    ****   hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 410              		.loc 1 530 0
 411 0012 0421     		movs	r1, #4
 412 0014 C160     		str	r1, [r0, #12]
 531:Src/main.c    ****   hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 413              		.loc 1 531 0
 414 0016 1022     		movs	r2, #16
 415 0018 0261     		str	r2, [r0, #16]
 532:Src/main.c    ****   hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 416              		.loc 1 532 0
 417 001a 4022     		movs	r2, #64
 418 001c 4261     		str	r2, [r0, #20]
 533:Src/main.c    ****   hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 419              		.loc 1 533 0
 420 001e 4FF4C072 		mov	r2, #384
 421 0022 8261     		str	r2, [r0, #24]
 534:Src/main.c    ****   hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 422              		.loc 1 534 0
 423 0024 C361     		str	r3, [r0, #28]
 535:Src/main.c    ****   hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 424              		.loc 1 535 0
 425 0026 4FF40062 		mov	r2, #2048
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 20


 426 002a 0262     		str	r2, [r0, #32]
 536:Src/main.c    ****   hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 427              		.loc 1 536 0
 428 002c 4362     		str	r3, [r0, #36]
 537:Src/main.c    ****   /* SdramTiming */
 429              		.loc 1 537 0
 430 002e 4FF40053 		mov	r3, #8192
 431 0032 8362     		str	r3, [r0, #40]
 539:Src/main.c    ****   SdramTiming.ExitSelfRefreshDelay = 7;
 432              		.loc 1 539 0
 433 0034 0223     		movs	r3, #2
 434 0036 0193     		str	r3, [sp, #4]
 540:Src/main.c    ****   SdramTiming.SelfRefreshTime = 4;
 435              		.loc 1 540 0
 436 0038 0722     		movs	r2, #7
 437 003a 0292     		str	r2, [sp, #8]
 541:Src/main.c    ****   SdramTiming.RowCycleDelay = 7;
 438              		.loc 1 541 0
 439 003c 0391     		str	r1, [sp, #12]
 542:Src/main.c    ****   SdramTiming.WriteRecoveryTime = 3;
 440              		.loc 1 542 0
 441 003e 0492     		str	r2, [sp, #16]
 543:Src/main.c    ****   SdramTiming.RPDelay = 2;
 442              		.loc 1 543 0
 443 0040 0322     		movs	r2, #3
 444 0042 0592     		str	r2, [sp, #20]
 544:Src/main.c    ****   SdramTiming.RCDDelay = 2;
 445              		.loc 1 544 0
 446 0044 0693     		str	r3, [sp, #24]
 545:Src/main.c    **** 
 447              		.loc 1 545 0
 448 0046 0793     		str	r3, [sp, #28]
 547:Src/main.c    ****   {
 449              		.loc 1 547 0
 450 0048 6944     		add	r1, sp, r1
 451 004a FFF7FEFF 		bl	HAL_SDRAM_Init
 452              	.LVL15:
 555:Src/main.c    **** 
 453              		.loc 1 555 0
 454 004e 09B0     		add	sp, sp, #36
 455              	.LCFI7:
 456              		.cfi_def_cfa_offset 4
 457              		@ sp needed
 458 0050 5DF804FB 		ldr	pc, [sp], #4
 459              	.L16:
 460              		.align	2
 461              	.L15:
 462 0054 00000000 		.word	hsdram1
 463 0058 400100A0 		.word	-1610612416
 464              		.cfi_endproc
 465              	.LFE144:
 467              		.section	.text.MX_I2C3_Init,"ax",%progbits
 468              		.align	2
 469              		.thumb
 470              		.thumb_func
 472              	MX_I2C3_Init:
 473              	.LFB139:
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 21


 291:Src/main.c    **** 
 474              		.loc 1 291 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478 0000 38B5     		push	{r3, r4, r5, lr}
 479              	.LCFI8:
 480              		.cfi_def_cfa_offset 16
 481              		.cfi_offset 3, -16
 482              		.cfi_offset 4, -12
 483              		.cfi_offset 5, -8
 484              		.cfi_offset 14, -4
 300:Src/main.c    ****   hi2c3.Init.ClockSpeed = 100000;
 485              		.loc 1 300 0
 486 0002 0D4C     		ldr	r4, .L19
 487 0004 0D4B     		ldr	r3, .L19+4
 488 0006 2360     		str	r3, [r4]
 301:Src/main.c    ****   hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 489              		.loc 1 301 0
 490 0008 0D4B     		ldr	r3, .L19+8
 491 000a 6360     		str	r3, [r4, #4]
 302:Src/main.c    ****   hi2c3.Init.OwnAddress1 = 0;
 492              		.loc 1 302 0
 493 000c 0025     		movs	r5, #0
 494 000e A560     		str	r5, [r4, #8]
 303:Src/main.c    ****   hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 495              		.loc 1 303 0
 496 0010 E560     		str	r5, [r4, #12]
 304:Src/main.c    ****   hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 497              		.loc 1 304 0
 498 0012 4FF48043 		mov	r3, #16384
 499 0016 2361     		str	r3, [r4, #16]
 305:Src/main.c    ****   hi2c3.Init.OwnAddress2 = 0;
 500              		.loc 1 305 0
 501 0018 6561     		str	r5, [r4, #20]
 306:Src/main.c    ****   hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 502              		.loc 1 306 0
 503 001a A561     		str	r5, [r4, #24]
 307:Src/main.c    ****   hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 504              		.loc 1 307 0
 505 001c E561     		str	r5, [r4, #28]
 308:Src/main.c    ****   if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 506              		.loc 1 308 0
 507 001e 2562     		str	r5, [r4, #32]
 309:Src/main.c    ****   {
 508              		.loc 1 309 0
 509 0020 2046     		mov	r0, r4
 510 0022 FFF7FEFF 		bl	HAL_I2C_Init
 511              	.LVL16:
 315:Src/main.c    ****   {
 512              		.loc 1 315 0
 513 0026 2946     		mov	r1, r5
 514 0028 2046     		mov	r0, r4
 515 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 516              	.LVL17:
 321:Src/main.c    ****   {
 517              		.loc 1 321 0
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 22


 518 002e 2946     		mov	r1, r5
 519 0030 2046     		mov	r0, r4
 520 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 521              	.LVL18:
 522 0036 38BD     		pop	{r3, r4, r5, pc}
 523              	.L20:
 524              		.align	2
 525              	.L19:
 526 0038 00000000 		.word	hi2c3
 527 003c 005C0040 		.word	1073765376
 528 0040 A0860100 		.word	100000
 529              		.cfi_endproc
 530              	.LFE139:
 532              		.section	.text.MX_LTDC_Init,"ax",%progbits
 533              		.align	2
 534              		.thumb
 535              		.thumb_func
 537              	MX_LTDC_Init:
 538              	.LFB140:
 337:Src/main.c    **** 
 539              		.loc 1 337 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 56
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543 0000 30B5     		push	{r4, r5, lr}
 544              	.LCFI9:
 545              		.cfi_def_cfa_offset 12
 546              		.cfi_offset 4, -12
 547              		.cfi_offset 5, -8
 548              		.cfi_offset 14, -4
 549 0002 8FB0     		sub	sp, sp, #60
 550              	.LCFI10:
 551              		.cfi_def_cfa_offset 72
 343:Src/main.c    **** 
 552              		.loc 1 343 0
 553 0004 3422     		movs	r2, #52
 554 0006 0021     		movs	r1, #0
 555 0008 01A8     		add	r0, sp, #4
 556 000a FFF7FEFF 		bl	memset
 557              	.LVL19:
 348:Src/main.c    ****   hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 558              		.loc 1 348 0
 559 000e 244C     		ldr	r4, .L23
 560 0010 244B     		ldr	r3, .L23+4
 561 0012 2360     		str	r3, [r4]
 349:Src/main.c    ****   hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 562              		.loc 1 349 0
 563 0014 0025     		movs	r5, #0
 564 0016 6560     		str	r5, [r4, #4]
 350:Src/main.c    ****   hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 565              		.loc 1 350 0
 566 0018 A560     		str	r5, [r4, #8]
 351:Src/main.c    ****   hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 567              		.loc 1 351 0
 568 001a E560     		str	r5, [r4, #12]
 352:Src/main.c    ****   hltdc.Init.HorizontalSync = 9;
 569              		.loc 1 352 0
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 23


 570 001c 2561     		str	r5, [r4, #16]
 353:Src/main.c    ****   hltdc.Init.VerticalSync = 1;
 571              		.loc 1 353 0
 572 001e 0923     		movs	r3, #9
 573 0020 6361     		str	r3, [r4, #20]
 354:Src/main.c    ****   hltdc.Init.AccumulatedHBP = 29;
 574              		.loc 1 354 0
 575 0022 0123     		movs	r3, #1
 576 0024 A361     		str	r3, [r4, #24]
 355:Src/main.c    ****   hltdc.Init.AccumulatedVBP = 3;
 577              		.loc 1 355 0
 578 0026 1D23     		movs	r3, #29
 579 0028 E361     		str	r3, [r4, #28]
 356:Src/main.c    ****   hltdc.Init.AccumulatedActiveW = 269;
 580              		.loc 1 356 0
 581 002a 0323     		movs	r3, #3
 582 002c 2362     		str	r3, [r4, #32]
 357:Src/main.c    ****   hltdc.Init.AccumulatedActiveH = 323;
 583              		.loc 1 357 0
 584 002e 40F20D13 		movw	r3, #269
 585 0032 6362     		str	r3, [r4, #36]
 358:Src/main.c    ****   hltdc.Init.TotalWidth = 279;
 586              		.loc 1 358 0
 587 0034 40F24313 		movw	r3, #323
 588 0038 A362     		str	r3, [r4, #40]
 359:Src/main.c    ****   hltdc.Init.TotalHeigh = 327;
 589              		.loc 1 359 0
 590 003a 40F21713 		movw	r3, #279
 591 003e E362     		str	r3, [r4, #44]
 360:Src/main.c    ****   hltdc.Init.Backcolor.Blue = 0;
 592              		.loc 1 360 0
 593 0040 40F24713 		movw	r3, #327
 594 0044 2363     		str	r3, [r4, #48]
 361:Src/main.c    ****   hltdc.Init.Backcolor.Green = 0;
 595              		.loc 1 361 0
 596 0046 84F83450 		strb	r5, [r4, #52]
 362:Src/main.c    ****   hltdc.Init.Backcolor.Red = 0;
 597              		.loc 1 362 0
 598 004a 84F83550 		strb	r5, [r4, #53]
 363:Src/main.c    ****   if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 599              		.loc 1 363 0
 600 004e 84F83650 		strb	r5, [r4, #54]
 364:Src/main.c    ****   {
 601              		.loc 1 364 0
 602 0052 2046     		mov	r0, r4
 603 0054 FFF7FEFF 		bl	HAL_LTDC_Init
 604              	.LVL20:
 368:Src/main.c    ****   pLayerCfg.WindowX1 = 240;
 605              		.loc 1 368 0
 606 0058 0195     		str	r5, [sp, #4]
 369:Src/main.c    ****   pLayerCfg.WindowY0 = 0;
 607              		.loc 1 369 0
 608 005a F022     		movs	r2, #240
 609 005c 0292     		str	r2, [sp, #8]
 370:Src/main.c    ****   pLayerCfg.WindowY1 = 320;
 610              		.loc 1 370 0
 611 005e 0395     		str	r5, [sp, #12]
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 24


 371:Src/main.c    ****   pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 612              		.loc 1 371 0
 613 0060 4FF4A073 		mov	r3, #320
 614 0064 0493     		str	r3, [sp, #16]
 372:Src/main.c    ****   pLayerCfg.Alpha = 255;
 615              		.loc 1 372 0
 616 0066 0221     		movs	r1, #2
 617 0068 0591     		str	r1, [sp, #20]
 373:Src/main.c    ****   pLayerCfg.Alpha0 = 0;
 618              		.loc 1 373 0
 619 006a FF21     		movs	r1, #255
 620 006c 0691     		str	r1, [sp, #24]
 374:Src/main.c    ****   pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 621              		.loc 1 374 0
 622 006e 0795     		str	r5, [sp, #28]
 375:Src/main.c    ****   pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 623              		.loc 1 375 0
 624 0070 4FF4C061 		mov	r1, #1536
 625 0074 0891     		str	r1, [sp, #32]
 376:Src/main.c    ****   pLayerCfg.FBStartAdress = 0xD0000000;
 626              		.loc 1 376 0
 627 0076 0721     		movs	r1, #7
 628 0078 0991     		str	r1, [sp, #36]
 377:Src/main.c    ****   pLayerCfg.ImageWidth = 240;
 629              		.loc 1 377 0
 630 007a 4FF05041 		mov	r1, #-805306368
 631 007e 0A91     		str	r1, [sp, #40]
 378:Src/main.c    ****   pLayerCfg.ImageHeight = 320;
 632              		.loc 1 378 0
 633 0080 0B92     		str	r2, [sp, #44]
 379:Src/main.c    ****   pLayerCfg.Backcolor.Blue = 0;
 634              		.loc 1 379 0
 635 0082 0C93     		str	r3, [sp, #48]
 380:Src/main.c    ****   pLayerCfg.Backcolor.Green = 0;
 636              		.loc 1 380 0
 637 0084 8DF83450 		strb	r5, [sp, #52]
 381:Src/main.c    ****   pLayerCfg.Backcolor.Red = 0;
 638              		.loc 1 381 0
 639 0088 8DF83550 		strb	r5, [sp, #53]
 382:Src/main.c    ****   if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 640              		.loc 1 382 0
 641 008c 8DF83650 		strb	r5, [sp, #54]
 383:Src/main.c    ****   {
 642              		.loc 1 383 0
 643 0090 2A46     		mov	r2, r5
 644 0092 01A9     		add	r1, sp, #4
 645 0094 2046     		mov	r0, r4
 646 0096 FFF7FEFF 		bl	HAL_LTDC_ConfigLayer
 647              	.LVL21:
 391:Src/main.c    **** 
 648              		.loc 1 391 0
 649 009a 0FB0     		add	sp, sp, #60
 650              	.LCFI11:
 651              		.cfi_def_cfa_offset 12
 652              		@ sp needed
 653 009c 30BD     		pop	{r4, r5, pc}
 654              	.L24:
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 25


 655 009e 00BF     		.align	2
 656              	.L23:
 657 00a0 00000000 		.word	hltdc
 658 00a4 00680140 		.word	1073833984
 659              		.cfi_endproc
 660              	.LFE140:
 662              		.section	.text.MX_SPI5_Init,"ax",%progbits
 663              		.align	2
 664              		.thumb
 665              		.thumb_func
 667              	MX_SPI5_Init:
 668              	.LFB141:
 399:Src/main.c    **** 
 669              		.loc 1 399 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673 0000 08B5     		push	{r3, lr}
 674              	.LCFI12:
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 3, -8
 677              		.cfi_offset 14, -4
 409:Src/main.c    ****   hspi5.Init.Mode = SPI_MODE_MASTER;
 678              		.loc 1 409 0
 679 0002 0C48     		ldr	r0, .L27
 680 0004 0C4B     		ldr	r3, .L27+4
 681 0006 0360     		str	r3, [r0]
 410:Src/main.c    ****   hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 682              		.loc 1 410 0
 683 0008 4FF48273 		mov	r3, #260
 684 000c 4360     		str	r3, [r0, #4]
 411:Src/main.c    ****   hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 685              		.loc 1 411 0
 686 000e 0023     		movs	r3, #0
 687 0010 8360     		str	r3, [r0, #8]
 412:Src/main.c    ****   hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 688              		.loc 1 412 0
 689 0012 C360     		str	r3, [r0, #12]
 413:Src/main.c    ****   hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 690              		.loc 1 413 0
 691 0014 0361     		str	r3, [r0, #16]
 414:Src/main.c    ****   hspi5.Init.NSS = SPI_NSS_SOFT;
 692              		.loc 1 414 0
 693 0016 4361     		str	r3, [r0, #20]
 415:Src/main.c    ****   hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 694              		.loc 1 415 0
 695 0018 4FF40072 		mov	r2, #512
 696 001c 8261     		str	r2, [r0, #24]
 416:Src/main.c    ****   hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 697              		.loc 1 416 0
 698 001e 1822     		movs	r2, #24
 699 0020 C261     		str	r2, [r0, #28]
 417:Src/main.c    ****   hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 700              		.loc 1 417 0
 701 0022 0362     		str	r3, [r0, #32]
 418:Src/main.c    ****   hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 702              		.loc 1 418 0
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 26


 703 0024 4362     		str	r3, [r0, #36]
 419:Src/main.c    ****   hspi5.Init.CRCPolynomial = 10;
 704              		.loc 1 419 0
 705 0026 8362     		str	r3, [r0, #40]
 420:Src/main.c    ****   if (HAL_SPI_Init(&hspi5) != HAL_OK)
 706              		.loc 1 420 0
 707 0028 0A23     		movs	r3, #10
 708 002a C362     		str	r3, [r0, #44]
 421:Src/main.c    ****   {
 709              		.loc 1 421 0
 710 002c FFF7FEFF 		bl	HAL_SPI_Init
 711              	.LVL22:
 712 0030 08BD     		pop	{r3, pc}
 713              	.L28:
 714 0032 00BF     		.align	2
 715              	.L27:
 716 0034 00000000 		.word	hspi5
 717 0038 00500140 		.word	1073827840
 718              		.cfi_endproc
 719              	.LFE141:
 721              		.section	.text.MX_TIM1_Init,"ax",%progbits
 722              		.align	2
 723              		.thumb
 724              		.thumb_func
 726              	MX_TIM1_Init:
 727              	.LFB142:
 437:Src/main.c    **** 
 728              		.loc 1 437 0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 24
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 30B5     		push	{r4, r5, lr}
 733              	.LCFI13:
 734              		.cfi_def_cfa_offset 12
 735              		.cfi_offset 4, -12
 736              		.cfi_offset 5, -8
 737              		.cfi_offset 14, -4
 738 0002 87B0     		sub	sp, sp, #28
 739              	.LCFI14:
 740              		.cfi_def_cfa_offset 40
 443:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 741              		.loc 1 443 0
 742 0004 0024     		movs	r4, #0
 743 0006 0294     		str	r4, [sp, #8]
 744 0008 0394     		str	r4, [sp, #12]
 745 000a 0494     		str	r4, [sp, #16]
 746 000c 0594     		str	r4, [sp, #20]
 444:Src/main.c    **** 
 747              		.loc 1 444 0
 748 000e 0094     		str	r4, [sp]
 749 0010 0194     		str	r4, [sp, #4]
 449:Src/main.c    ****   htim1.Init.Prescaler = 0;
 750              		.loc 1 449 0
 751 0012 0D4D     		ldr	r5, .L31
 752 0014 0D4B     		ldr	r3, .L31+4
 753 0016 2B60     		str	r3, [r5]
 450:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 27


 754              		.loc 1 450 0
 755 0018 6C60     		str	r4, [r5, #4]
 451:Src/main.c    ****   htim1.Init.Period = 0;
 756              		.loc 1 451 0
 757 001a AC60     		str	r4, [r5, #8]
 452:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 758              		.loc 1 452 0
 759 001c EC60     		str	r4, [r5, #12]
 453:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 760              		.loc 1 453 0
 761 001e 2C61     		str	r4, [r5, #16]
 454:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 762              		.loc 1 454 0
 763 0020 6C61     		str	r4, [r5, #20]
 455:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 764              		.loc 1 455 0
 765 0022 AC61     		str	r4, [r5, #24]
 456:Src/main.c    ****   {
 766              		.loc 1 456 0
 767 0024 2846     		mov	r0, r5
 768 0026 FFF7FEFF 		bl	HAL_TIM_Base_Init
 769              	.LVL23:
 460:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 770              		.loc 1 460 0
 771 002a 4FF48053 		mov	r3, #4096
 772 002e 0293     		str	r3, [sp, #8]
 461:Src/main.c    ****   {
 773              		.loc 1 461 0
 774 0030 02A9     		add	r1, sp, #8
 775 0032 2846     		mov	r0, r5
 776 0034 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 777              	.LVL24:
 465:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 778              		.loc 1 465 0
 779 0038 0094     		str	r4, [sp]
 466:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 780              		.loc 1 466 0
 781 003a 0194     		str	r4, [sp, #4]
 467:Src/main.c    ****   {
 782              		.loc 1 467 0
 783 003c 6946     		mov	r1, sp
 784 003e 2846     		mov	r0, r5
 785 0040 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 786              	.LVL25:
 475:Src/main.c    **** 
 787              		.loc 1 475 0
 788 0044 07B0     		add	sp, sp, #28
 789              	.LCFI15:
 790              		.cfi_def_cfa_offset 12
 791              		@ sp needed
 792 0046 30BD     		pop	{r4, r5, pc}
 793              	.L32:
 794              		.align	2
 795              	.L31:
 796 0048 00000000 		.word	htim1
 797 004c 00000140 		.word	1073807360
 798              		.cfi_endproc
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 28


 799              	.LFE142:
 801              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 802              		.align	2
 803              		.thumb
 804              		.thumb_func
 806              	MX_USART1_UART_Init:
 807              	.LFB143:
 483:Src/main.c    **** 
 808              		.loc 1 483 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812 0000 08B5     		push	{r3, lr}
 813              	.LCFI16:
 814              		.cfi_def_cfa_offset 8
 815              		.cfi_offset 3, -8
 816              		.cfi_offset 14, -4
 492:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 817              		.loc 1 492 0
 818 0002 0848     		ldr	r0, .L35
 819 0004 084B     		ldr	r3, .L35+4
 820 0006 0360     		str	r3, [r0]
 493:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 821              		.loc 1 493 0
 822 0008 4FF4E133 		mov	r3, #115200
 823 000c 4360     		str	r3, [r0, #4]
 494:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 824              		.loc 1 494 0
 825 000e 0023     		movs	r3, #0
 826 0010 8360     		str	r3, [r0, #8]
 495:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 827              		.loc 1 495 0
 828 0012 C360     		str	r3, [r0, #12]
 496:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 829              		.loc 1 496 0
 830 0014 0361     		str	r3, [r0, #16]
 497:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 831              		.loc 1 497 0
 832 0016 0C22     		movs	r2, #12
 833 0018 4261     		str	r2, [r0, #20]
 498:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 834              		.loc 1 498 0
 835 001a 8361     		str	r3, [r0, #24]
 499:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 836              		.loc 1 499 0
 837 001c C361     		str	r3, [r0, #28]
 500:Src/main.c    ****   {
 838              		.loc 1 500 0
 839 001e FFF7FEFF 		bl	HAL_UART_Init
 840              	.LVL26:
 841 0022 08BD     		pop	{r3, pc}
 842              	.L36:
 843              		.align	2
 844              	.L35:
 845 0024 00000000 		.word	huart1
 846 0028 00100140 		.word	1073811456
 847              		.cfi_endproc
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 29


 848              	.LFE143:
 850              		.section	.text.StartDefaultTask,"ax",%progbits
 851              		.align	2
 852              		.global	StartDefaultTask
 853              		.thumb
 854              		.thumb_func
 856              	StartDefaultTask:
 857              	.LFB146:
 641:Src/main.c    **** 
 642:Src/main.c    **** /* USER CODE BEGIN 4 */
 643:Src/main.c    **** 
 644:Src/main.c    **** /* USER CODE END 4 */
 645:Src/main.c    **** 
 646:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 647:Src/main.c    **** /**
 648:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 649:Src/main.c    ****   * @param  argument: Not used 
 650:Src/main.c    ****   * @retval None
 651:Src/main.c    ****   */
 652:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 653:Src/main.c    **** void StartDefaultTask(void const * argument)
 654:Src/main.c    **** {
 858              		.loc 1 654 0
 859              		.cfi_startproc
 860              		@ Volatile: function does not return.
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              	.LVL27:
 864 0000 08B5     		push	{r3, lr}
 865              	.LCFI17:
 866              		.cfi_def_cfa_offset 8
 867              		.cfi_offset 3, -8
 868              		.cfi_offset 14, -4
 655:Src/main.c    ****   /* init code for USB_HOST */
 656:Src/main.c    ****   MX_USB_HOST_Init();
 869              		.loc 1 656 0
 870 0002 FFF7FEFF 		bl	MX_USB_HOST_Init
 871              	.LVL28:
 872              	.L38:
 657:Src/main.c    ****   /* USER CODE BEGIN 5 */
 658:Src/main.c    ****   /* Infinite loop */
 659:Src/main.c    ****   for(;;)
 660:Src/main.c    ****   {
 661:Src/main.c    ****     osDelay(1);
 873              		.loc 1 661 0 discriminator 1
 874 0006 0120     		movs	r0, #1
 875 0008 FFF7FEFF 		bl	osDelay
 876              	.LVL29:
 877 000c FBE7     		b	.L38
 878              		.cfi_endproc
 879              	.LFE146:
 881 000e 00BF     		.section	.text.SystemClock_Config,"ax",%progbits
 882              		.align	2
 883              		.global	SystemClock_Config
 884              		.thumb
 885              		.thumb_func
 887              	SystemClock_Config:
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 30


 888              	.LFB136:
 176:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 889              		.loc 1 176 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 128
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893 0000 30B5     		push	{r4, r5, lr}
 894              	.LCFI18:
 895              		.cfi_def_cfa_offset 12
 896              		.cfi_offset 4, -12
 897              		.cfi_offset 5, -8
 898              		.cfi_offset 14, -4
 899 0002 A1B0     		sub	sp, sp, #132
 900              	.LCFI19:
 901              		.cfi_def_cfa_offset 144
 177:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 902              		.loc 1 177 0
 903 0004 3025     		movs	r5, #48
 904 0006 2A46     		mov	r2, r5
 905 0008 0021     		movs	r1, #0
 906 000a 14A8     		add	r0, sp, #80
 907 000c FFF7FEFF 		bl	memset
 908              	.LVL30:
 178:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 909              		.loc 1 178 0
 910 0010 0024     		movs	r4, #0
 911 0012 0F94     		str	r4, [sp, #60]
 912 0014 1094     		str	r4, [sp, #64]
 913 0016 1194     		str	r4, [sp, #68]
 914 0018 1294     		str	r4, [sp, #72]
 915 001a 1394     		str	r4, [sp, #76]
 179:Src/main.c    **** 
 916              		.loc 1 179 0
 917 001c 2A46     		mov	r2, r5
 918 001e 2146     		mov	r1, r4
 919 0020 03A8     		add	r0, sp, #12
 920 0022 FFF7FEFF 		bl	memset
 921              	.LVL31:
 922              	.LBB10:
 183:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 923              		.loc 1 183 0
 924 0026 0194     		str	r4, [sp, #4]
 925 0028 204B     		ldr	r3, .L42
 926 002a 1A6C     		ldr	r2, [r3, #64]
 927 002c 42F08052 		orr	r2, r2, #268435456
 928 0030 1A64     		str	r2, [r3, #64]
 929 0032 1B6C     		ldr	r3, [r3, #64]
 930 0034 03F08053 		and	r3, r3, #268435456
 931 0038 0193     		str	r3, [sp, #4]
 932 003a 019B     		ldr	r3, [sp, #4]
 933              	.LBE10:
 934              	.LBB11:
 184:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 935              		.loc 1 184 0
 936 003c 0294     		str	r4, [sp, #8]
 937 003e 1C4A     		ldr	r2, .L42+4
 938 0040 1368     		ldr	r3, [r2]
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 31


 939 0042 23F44043 		bic	r3, r3, #49152
 940 0046 43F48043 		orr	r3, r3, #16384
 941 004a 1360     		str	r3, [r2]
 942 004c 1368     		ldr	r3, [r2]
 943 004e 03F44043 		and	r3, r3, #49152
 944 0052 0293     		str	r3, [sp, #8]
 945 0054 029B     		ldr	r3, [sp, #8]
 946              	.LBE11:
 187:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 947              		.loc 1 187 0
 948 0056 0123     		movs	r3, #1
 949 0058 1493     		str	r3, [sp, #80]
 188:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 950              		.loc 1 188 0
 951 005a 4FF48033 		mov	r3, #65536
 952 005e 1593     		str	r3, [sp, #84]
 189:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 953              		.loc 1 189 0
 954 0060 0225     		movs	r5, #2
 955 0062 1A95     		str	r5, [sp, #104]
 190:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 956              		.loc 1 190 0
 957 0064 4FF48003 		mov	r3, #4194304
 958 0068 1B93     		str	r3, [sp, #108]
 191:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 72;
 959              		.loc 1 191 0
 960 006a 0423     		movs	r3, #4
 961 006c 1C93     		str	r3, [sp, #112]
 192:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 962              		.loc 1 192 0
 963 006e 4823     		movs	r3, #72
 964 0070 1D93     		str	r3, [sp, #116]
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 3;
 965              		.loc 1 193 0
 966 0072 1E95     		str	r5, [sp, #120]
 194:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 967              		.loc 1 194 0
 968 0074 0323     		movs	r3, #3
 969 0076 1F93     		str	r3, [sp, #124]
 195:Src/main.c    ****   {
 970              		.loc 1 195 0
 971 0078 14A8     		add	r0, sp, #80
 972 007a FFF7FEFF 		bl	HAL_RCC_OscConfig
 973              	.LVL32:
 201:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 974              		.loc 1 201 0
 975 007e 0F23     		movs	r3, #15
 976 0080 0F93     		str	r3, [sp, #60]
 203:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 977              		.loc 1 203 0
 978 0082 1095     		str	r5, [sp, #64]
 204:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 979              		.loc 1 204 0
 980 0084 1194     		str	r4, [sp, #68]
 205:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 981              		.loc 1 205 0
 982 0086 4FF48053 		mov	r3, #4096
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 32


 983 008a 1293     		str	r3, [sp, #72]
 206:Src/main.c    **** 
 984              		.loc 1 206 0
 985 008c 1394     		str	r4, [sp, #76]
 208:Src/main.c    ****   {
 986              		.loc 1 208 0
 987 008e 2946     		mov	r1, r5
 988 0090 0FA8     		add	r0, sp, #60
 989 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 990              	.LVL33:
 212:Src/main.c    ****   PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 991              		.loc 1 212 0
 992 0096 0823     		movs	r3, #8
 993 0098 0393     		str	r3, [sp, #12]
 213:Src/main.c    ****   PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 994              		.loc 1 213 0
 995 009a 3223     		movs	r3, #50
 996 009c 0793     		str	r3, [sp, #28]
 214:Src/main.c    ****   PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 997              		.loc 1 214 0
 998 009e 0995     		str	r5, [sp, #36]
 215:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 999              		.loc 1 215 0
 1000 00a0 0C94     		str	r4, [sp, #48]
 216:Src/main.c    ****   {
 1001              		.loc 1 216 0
 1002 00a2 03A8     		add	r0, sp, #12
 1003 00a4 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1004              	.LVL34:
 220:Src/main.c    **** 
 1005              		.loc 1 220 0
 1006 00a8 21B0     		add	sp, sp, #132
 1007              	.LCFI20:
 1008              		.cfi_def_cfa_offset 12
 1009              		@ sp needed
 1010 00aa 30BD     		pop	{r4, r5, pc}
 1011              	.L43:
 1012              		.align	2
 1013              	.L42:
 1014 00ac 00380240 		.word	1073887232
 1015 00b0 00700040 		.word	1073770496
 1016              		.cfi_endproc
 1017              	.LFE136:
 1019              		.section	.text.main,"ax",%progbits
 1020              		.align	2
 1021              		.global	main
 1022              		.thumb
 1023              		.thumb_func
 1025              	main:
 1026              	.LFB135:
  94:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1027              		.loc 1 94 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 32
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031 0000 30B5     		push	{r4, r5, lr}
 1032              	.LCFI21:
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 33


 1033              		.cfi_def_cfa_offset 12
 1034              		.cfi_offset 4, -12
 1035              		.cfi_offset 5, -8
 1036              		.cfi_offset 14, -4
 1037 0002 89B0     		sub	sp, sp, #36
 1038              	.LCFI22:
 1039              		.cfi_def_cfa_offset 48
 103:Src/main.c    **** 
 1040              		.loc 1 103 0
 1041 0004 FFF7FEFF 		bl	HAL_Init
 1042              	.LVL35:
 110:Src/main.c    **** 
 1043              		.loc 1 110 0
 1044 0008 FFF7FEFF 		bl	SystemClock_Config
 1045              	.LVL36:
 117:Src/main.c    ****   MX_CRC_Init();
 1046              		.loc 1 117 0
 1047 000c FFF7FEFF 		bl	MX_GPIO_Init
 1048              	.LVL37:
 118:Src/main.c    ****   MX_DMA2D_Init();
 1049              		.loc 1 118 0
 1050 0010 FFF7FEFF 		bl	MX_CRC_Init
 1051              	.LVL38:
 119:Src/main.c    ****   MX_FMC_Init();
 1052              		.loc 1 119 0
 1053 0014 FFF7FEFF 		bl	MX_DMA2D_Init
 1054              	.LVL39:
 120:Src/main.c    ****   MX_I2C3_Init();
 1055              		.loc 1 120 0
 1056 0018 FFF7FEFF 		bl	MX_FMC_Init
 1057              	.LVL40:
 121:Src/main.c    ****   MX_LTDC_Init();
 1058              		.loc 1 121 0
 1059 001c FFF7FEFF 		bl	MX_I2C3_Init
 1060              	.LVL41:
 122:Src/main.c    ****   MX_SPI5_Init();
 1061              		.loc 1 122 0
 1062 0020 FFF7FEFF 		bl	MX_LTDC_Init
 1063              	.LVL42:
 123:Src/main.c    ****   MX_TIM1_Init();
 1064              		.loc 1 123 0
 1065 0024 FFF7FEFF 		bl	MX_SPI5_Init
 1066              	.LVL43:
 124:Src/main.c    ****   MX_USART1_UART_Init();
 1067              		.loc 1 124 0
 1068 0028 FFF7FEFF 		bl	MX_TIM1_Init
 1069              	.LVL44:
 125:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1070              		.loc 1 125 0
 1071 002c FFF7FEFF 		bl	MX_USART1_UART_Init
 1072              	.LVL45:
 148:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 1073              		.loc 1 148 0
 1074 0030 01AC     		add	r4, sp, #4
 1075 0032 084D     		ldr	r5, .L47
 1076 0034 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1077 0036 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 34


 1078 0038 95E80700 		ldmia	r5, {r0, r1, r2}
 1079 003c 84E80700 		stmia	r4, {r0, r1, r2}
 149:Src/main.c    **** 
 1080              		.loc 1 149 0
 1081 0040 0021     		movs	r1, #0
 1082 0042 01A8     		add	r0, sp, #4
 1083 0044 FFF7FEFF 		bl	osThreadCreate
 1084              	.LVL46:
 1085 0048 034B     		ldr	r3, .L47+4
 1086 004a 1860     		str	r0, [r3]
 156:Src/main.c    ****  
 1087              		.loc 1 156 0
 1088 004c FFF7FEFF 		bl	osKernelStart
 1089              	.LVL47:
 1090              	.L45:
 1091 0050 FEE7     		b	.L45
 1092              	.L48:
 1093 0052 00BF     		.align	2
 1094              	.L47:
 1095 0054 00000000 		.word	.LANCHOR0
 1096 0058 00000000 		.word	defaultTaskHandle
 1097              		.cfi_endproc
 1098              	.LFE135:
 1100              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1101              		.align	2
 1102              		.global	HAL_TIM_PeriodElapsedCallback
 1103              		.thumb
 1104              		.thumb_func
 1106              	HAL_TIM_PeriodElapsedCallback:
 1107              	.LFB147:
 662:Src/main.c    ****   }
 663:Src/main.c    ****   /* USER CODE END 5 */ 
 664:Src/main.c    **** }
 665:Src/main.c    **** 
 666:Src/main.c    **** /**
 667:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 668:Src/main.c    ****   * @note   This function is called  when TIM6 interrupt took place, inside
 669:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 670:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 671:Src/main.c    ****   * @param  htim : TIM handle
 672:Src/main.c    ****   * @retval None
 673:Src/main.c    ****   */
 674:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 675:Src/main.c    **** {
 1108              		.loc 1 675 0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
 1112              	.LVL48:
 1113 0000 08B5     		push	{r3, lr}
 1114              	.LCFI23:
 1115              		.cfi_def_cfa_offset 8
 1116              		.cfi_offset 3, -8
 1117              		.cfi_offset 14, -4
 676:Src/main.c    ****   /* USER CODE BEGIN Callback 0 */
 677:Src/main.c    **** 
 678:Src/main.c    ****   /* USER CODE END Callback 0 */
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 35


 679:Src/main.c    ****   if (htim->Instance == TIM6) {
 1118              		.loc 1 679 0
 1119 0002 0268     		ldr	r2, [r0]
 1120 0004 024B     		ldr	r3, .L52
 1121 0006 9A42     		cmp	r2, r3
 1122 0008 01D1     		bne	.L49
 680:Src/main.c    ****     HAL_IncTick();
 1123              		.loc 1 680 0
 1124 000a FFF7FEFF 		bl	HAL_IncTick
 1125              	.LVL49:
 1126              	.L49:
 1127 000e 08BD     		pop	{r3, pc}
 1128              	.L53:
 1129              		.align	2
 1130              	.L52:
 1131 0010 00100040 		.word	1073745920
 1132              		.cfi_endproc
 1133              	.LFE147:
 1135              		.section	.text.Error_Handler,"ax",%progbits
 1136              		.align	2
 1137              		.global	Error_Handler
 1138              		.thumb
 1139              		.thumb_func
 1141              	Error_Handler:
 1142              	.LFB148:
 681:Src/main.c    ****   }
 682:Src/main.c    ****   /* USER CODE BEGIN Callback 1 */
 683:Src/main.c    **** 
 684:Src/main.c    ****   /* USER CODE END Callback 1 */
 685:Src/main.c    **** }
 686:Src/main.c    **** 
 687:Src/main.c    **** /**
 688:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 689:Src/main.c    ****   * @retval None
 690:Src/main.c    ****   */
 691:Src/main.c    **** void Error_Handler(void)
 692:Src/main.c    **** {
 1143              		.loc 1 692 0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147              		@ link register save eliminated.
 1148 0000 7047     		bx	lr
 1149              		.cfi_endproc
 1150              	.LFE148:
 1152              		.comm	defaultTaskHandle,4,4
 1153              		.comm	hsdram1,52,4
 1154              		.comm	huart1,64,4
 1155              		.comm	htim1,64,4
 1156              		.comm	hspi5,88,4
 1157              		.comm	hltdc,168,4
 1158              		.comm	hi2c3,84,4
 1159              		.comm	hdma2d,64,4
 1160              		.comm	hcrc,8,4
 1161 0002 00BF     		.section	.rodata
 1162              		.align	2
 1163              		.set	.LANCHOR0,. + 0
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 36


 1164              	.LC2:
 1165 0000 00000000 		.word	.LC0
 1166 0004 00000000 		.word	StartDefaultTask
 1167 0008 0000     		.short	0
 1168 000a 0000     		.space	2
 1169 000c 00000000 		.word	0
 1170 0010 00100000 		.word	4096
 1171 0014 00000000 		.word	0
 1172 0018 00000000 		.word	0
 1173              		.section	.rodata.str1.4,"aMS",%progbits,1
 1174              		.align	2
 1175              	.LC0:
 1176 0000 64656661 		.ascii	"defaultTask\000"
 1176      756C7454 
 1176      61736B00 
 1177              		.text
 1178              	.Letext0:
 1179              		.file 2 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_
 1180              		.file 3 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 1181              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 1182              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1183              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1184              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1185              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1186              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1187              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_crc.h"
 1188              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma2d.h"
 1189              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_fmc.h"
 1190              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_sdram.h"
 1191              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 1192              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_ltdc.h"
 1193              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 1194              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1195              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1196              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1197              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1198              		.file 21 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1199              		.file 22 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1200              		.file 23 "Drivers/CMSIS/Include/core_cm4.h"
 1201              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c_ex.h"
 1202              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1203              		.file 26 "Inc/usb_host.h"
 1204              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 37


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\WINDOWS\TEMP\cclskL8t.s:22     .text.MX_GPIO_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\WINDOWS\TEMP\cclskL8t.s:286    .text.MX_GPIO_Init:0000018c $d
C:\WINDOWS\TEMP\cclskL8t.s:297    .text.MX_CRC_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:301    .text.MX_CRC_Init:00000000 MX_CRC_Init
C:\WINDOWS\TEMP\cclskL8t.s:323    .text.MX_CRC_Init:00000010 $d
                            *COM*:00000008 hcrc
C:\WINDOWS\TEMP\cclskL8t.s:329    .text.MX_DMA2D_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:333    .text.MX_DMA2D_Init:00000000 MX_DMA2D_Init
C:\WINDOWS\TEMP\cclskL8t.s:376    .text.MX_DMA2D_Init:00000028 $d
                            *COM*:00000040 hdma2d
C:\WINDOWS\TEMP\cclskL8t.s:382    .text.MX_FMC_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:386    .text.MX_FMC_Init:00000000 MX_FMC_Init
C:\WINDOWS\TEMP\cclskL8t.s:462    .text.MX_FMC_Init:00000054 $d
                            *COM*:00000034 hsdram1
C:\WINDOWS\TEMP\cclskL8t.s:468    .text.MX_I2C3_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:472    .text.MX_I2C3_Init:00000000 MX_I2C3_Init
C:\WINDOWS\TEMP\cclskL8t.s:526    .text.MX_I2C3_Init:00000038 $d
                            *COM*:00000054 hi2c3
C:\WINDOWS\TEMP\cclskL8t.s:533    .text.MX_LTDC_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:537    .text.MX_LTDC_Init:00000000 MX_LTDC_Init
C:\WINDOWS\TEMP\cclskL8t.s:657    .text.MX_LTDC_Init:000000a0 $d
                            *COM*:000000a8 hltdc
C:\WINDOWS\TEMP\cclskL8t.s:663    .text.MX_SPI5_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:667    .text.MX_SPI5_Init:00000000 MX_SPI5_Init
C:\WINDOWS\TEMP\cclskL8t.s:716    .text.MX_SPI5_Init:00000034 $d
                            *COM*:00000058 hspi5
C:\WINDOWS\TEMP\cclskL8t.s:722    .text.MX_TIM1_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:726    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\WINDOWS\TEMP\cclskL8t.s:796    .text.MX_TIM1_Init:00000048 $d
                            *COM*:00000040 htim1
C:\WINDOWS\TEMP\cclskL8t.s:802    .text.MX_USART1_UART_Init:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:806    .text.MX_USART1_UART_Init:00000000 MX_USART1_UART_Init
C:\WINDOWS\TEMP\cclskL8t.s:845    .text.MX_USART1_UART_Init:00000024 $d
                            *COM*:00000040 huart1
C:\WINDOWS\TEMP\cclskL8t.s:851    .text.StartDefaultTask:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:856    .text.StartDefaultTask:00000000 StartDefaultTask
C:\WINDOWS\TEMP\cclskL8t.s:882    .text.SystemClock_Config:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:887    .text.SystemClock_Config:00000000 SystemClock_Config
C:\WINDOWS\TEMP\cclskL8t.s:1014   .text.SystemClock_Config:000000ac $d
C:\WINDOWS\TEMP\cclskL8t.s:1020   .text.main:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:1025   .text.main:00000000 main
C:\WINDOWS\TEMP\cclskL8t.s:1095   .text.main:00000054 $d
                            *COM*:00000004 defaultTaskHandle
C:\WINDOWS\TEMP\cclskL8t.s:1101   .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:1106   .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\WINDOWS\TEMP\cclskL8t.s:1131   .text.HAL_TIM_PeriodElapsedCallback:00000010 $d
C:\WINDOWS\TEMP\cclskL8t.s:1136   .text.Error_Handler:00000000 $t
C:\WINDOWS\TEMP\cclskL8t.s:1141   .text.Error_Handler:00000000 Error_Handler
C:\WINDOWS\TEMP\cclskL8t.s:1162   .rodata:00000000 $d
C:\WINDOWS\TEMP\cclskL8t.s:1174   .rodata.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
ARM GAS  C:\WINDOWS\TEMP\cclskL8t.s 			page 38


HAL_GPIO_Init
HAL_CRC_Init
HAL_DMA2D_Init
HAL_DMA2D_ConfigLayer
HAL_SDRAM_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
memset
HAL_LTDC_Init
HAL_LTDC_ConfigLayer
HAL_SPI_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
MX_USB_HOST_Init
osDelay
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
osThreadCreate
osKernelStart
HAL_IncTick
