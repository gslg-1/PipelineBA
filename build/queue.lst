ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"queue.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvGetDisinheritPriorityAfterTimeout:
  27              	.LFB28:
  28              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/queue.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include <string.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 2


  31:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "task.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #include "queue.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  40:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  43:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  44:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  50:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  51:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** structure member). */
  66:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
  67:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  68:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** zero. */
  72:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  75:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #else
  80:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
  82:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
  84:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 3


  88:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
  89:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  90:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
  94:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  96:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} u;
  99:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } xQUEUE;
 124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 132:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	more user friendly. */
 140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 4


 145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	debuggers. */
 149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	array position being vacant. */
 154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 159:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 169:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 171:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 176:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  *
 178:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 183:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * back of the queue.
 185:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 189:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 190:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 5


 202:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
 204:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 208:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * as a mutex.
 211:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/*
 218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 * that priority.
 223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	 */
 224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*
 229:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 231:Middlewares/Third_Party/FreeRTOS/Source/queue.c ****  */
 232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{														\
 235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{													\
 241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}													\
 243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}														\
 244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 6


 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	versions. */
 296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return pdPASS;
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		supplied. */
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 7


 316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		but is already set. */
 330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				later deleted. */
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 8


 373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			storage area. */
 384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				deleted. */
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
 423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	defined. */
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 9


 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 10


 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 11


 544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void *pxReturn;
 551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not required here. */
 557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pxReturn;
 567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 12


 601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder. */
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			before reaching here. */
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 13


 658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 14


 715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xHandle;
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
 739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
 745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue is full. */
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 15


 772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							takes care of that. */
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 16


 829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the function. */
 853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
 864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 17


 886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
 904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Try again. */
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
 911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 18


 943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
 954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
 987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
 992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
 997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 19


1000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 20


1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	post). */
1085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 21


1114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		space'. */
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 22


1171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								else
1174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								{
1175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								}
1177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							else
1202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
1203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
1205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 23


1228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				task. */
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 24


1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 25


1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data. */
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif
1389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	0. */
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 26


1399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 27


1456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 28


1513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif
1531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timed out. */
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 29


1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	for( ;; )
1626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 30


1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				data, not removing it. */
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
1667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					state. */
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 31


1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1686:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1689:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1690:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1691:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1694:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1695:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1696:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1697:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1701:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1705:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1707:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1712:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1714:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1715:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1716:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1718:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1719:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1721:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1723:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1727:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1728:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1729:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1730:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1734:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1737:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1739:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 32


1741:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1743:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1744:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1745:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1747:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1748:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1749:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1751:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1753:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1754:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1757:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1758:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1759:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1760:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1761:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1762:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1763:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1764:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1765:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1767:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1768:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1769:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1770:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1771:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1773:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1774:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1775:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1777:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1780:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1782:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1783:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1784:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1787:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1789:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1790:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1791:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			locked. */
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1793:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1795:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1797:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 33


1798:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
1799:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						force a context switch. */
1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1801:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1803:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1804:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
1805:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
1806:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1807:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
1808:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1809:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
1810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
1811:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
1813:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1814:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
1815:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
1816:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1817:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
1818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1819:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
1820:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
1821:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1822:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1824:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1827:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1828:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1829:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1832:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1833:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1834:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1835:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1836:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1838:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1839:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1842:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1843:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1844:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1846:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1850:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1852:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1853:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 34


1855:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1857:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1858:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1859:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1862:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1863:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1864:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1866:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1867:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1868:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1869:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1871:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1873:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1874:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1882:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1883:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1885:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1886:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1888:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1889:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1892:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1893:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1894:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1896:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1897:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1899:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1901:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1903:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1905:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1908:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1909:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1910:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 35


1912:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1915:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1919:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1921:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1923:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1926:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1927:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1928:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1933:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1936:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return uxReturn;
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1938:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1939:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1940:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
1942:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1943:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1945:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1946:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1948:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1950:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1951:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif
1952:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1953:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1954:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1955:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		again. */
1957:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1959:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1960:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1961:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1962:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1964:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1966:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
1968:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 36


1969:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1970:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
1971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1972:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#else
1973:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1975:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1976:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1977:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1978:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1979:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
1980:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1981:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1982:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1983:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1984:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1985:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1986:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1987:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1988:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1990:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1991:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1992:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1994:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1995:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
1996:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1997:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
1999:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2000:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2001:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2002:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2003:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2004:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2005:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2006:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2007:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2010:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2011:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2012:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2013:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2015:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
  29              		.loc 1 2015 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
2016:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2017:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2019:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 37


2020:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2021:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2022:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2023:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		mutex. */
2024:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  35              		.loc 1 2024 0
  36 0000 436A     		ldr	r3, [r0, #36]
  37 0002 23B1     		cbz	r3, .L3
2025:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
  38              		.loc 1 2026 0
  39 0004 036B     		ldr	r3, [r0, #48]
  40 0006 1868     		ldr	r0, [r3]
  41              	.LVL1:
  42 0008 C0F10700 		rsb	r0, r0, #7
  43              	.LVL2:
  44 000c 7047     		bx	lr
  45              	.LVL3:
  46              	.L3:
2027:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2029:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  47              		.loc 1 2030 0
  48 000e 0020     		movs	r0, #0
  49              	.LVL4:
2031:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2033:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
  50              		.loc 1 2034 0
  51 0010 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE28:
  55 0012 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
  56              		.align	2
  57              		.thumb
  58              		.thumb_func
  60              	prvIsQueueFull:
  61              	.LFB34:
2035:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2037:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2038:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2039:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2043:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2044:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2045:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2047:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2049:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2050:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2051:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 38


2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2053:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2054:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2058:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2059:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2061:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2062:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2063:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2064:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2066:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2070:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2072:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2073:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2074:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2076:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2077:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2078:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2079:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
2083:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
2085:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2087:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2088:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2092:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2094:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2096:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2097:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2098:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				correct. */
2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
2100:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2101:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2102:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2103:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2104:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2105:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2106:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2107:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2108:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 39


2109:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2110:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2113:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2114:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2116:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2117:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2121:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2124:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2126:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2127:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2128:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2129:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2130:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2133:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2134:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2135:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2138:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2139:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2140:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2141:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2142:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2143:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	updated. */
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2145:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2147:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2148:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2150:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2152:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2153:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2154:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2155:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2156:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2157:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2158:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2159:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2160:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2161:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						A context switch is required. */
2162:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2163:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2164:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2165:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 40


2166:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2167:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2168:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2169:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2170:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2171:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2172:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2173:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					suspended. */
2174:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2175:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2176:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2178:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2179:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							context	switch is required. */
2180:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2181:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2182:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						else
2183:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
2184:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2185:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
2186:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2187:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2188:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2189:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						break;
2190:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2194:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2195:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2196:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2198:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2200:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2201:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2202:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						a context switch is required. */
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2204:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2205:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2206:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2207:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2208:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2209:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2210:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2211:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2212:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					break;
2213:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2214:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2215:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2216:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--cTxLock;
2218:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2219:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2221:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 41


2223:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2226:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2228:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2232:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2234:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
2236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2237:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2238:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2241:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--cRxLock;
2243:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2244:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2245:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
2247:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2249:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2254:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2261:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2263:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2266:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2270:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2272:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
2275:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
2279:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 42


2280:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2286:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2287:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2290:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2293:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2294:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2296:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
  62              		.loc 1 2296 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL5:
  67 0000 10B5     		push	{r4, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 14, -4
  72 0002 0446     		mov	r4, r0
2297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 2299 0
  74 0004 FFF7FEFF 		bl	vPortEnterCritical
  75              	.LVL6:
2300:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2301:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  76              		.loc 1 2301 0
  77 0008 A26B     		ldr	r2, [r4, #56]
  78 000a E36B     		ldr	r3, [r4, #60]
  79 000c 9A42     		cmp	r2, r3
  80 000e 01D1     		bne	.L6
2302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
  81              		.loc 1 2303 0
  82 0010 0124     		movs	r4, #1
  83              	.LVL7:
  84 0012 00E0     		b	.L5
  85              	.LVL8:
  86              	.L6:
2304:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2305:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2307:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  87              		.loc 1 2307 0
  88 0014 0024     		movs	r4, #0
  89              	.LVL9:
  90              	.L5:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 43


2308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2309:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  91              		.loc 1 2310 0
  92 0016 FFF7FEFF 		bl	vPortExitCritical
  93              	.LVL10:
2311:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2312:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2313:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
  94              		.loc 1 2313 0
  95 001a 2046     		mov	r0, r4
  96 001c 10BD     		pop	{r4, pc}
  97              		.cfi_endproc
  98              	.LFE34:
 100 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
 101              		.align	2
 102              		.thumb
 103              		.thumb_func
 105              	prvIsQueueEmpty:
 106              	.LFB32:
2257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 107              		.loc 1 2257 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              	.LVL11:
 112 0000 10B5     		push	{r4, lr}
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 4, -8
 116              		.cfi_offset 14, -4
 117 0002 0446     		mov	r4, r0
2260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 118              		.loc 1 2260 0
 119 0004 FFF7FEFF 		bl	vPortEnterCritical
 120              	.LVL12:
2262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 121              		.loc 1 2262 0
 122 0008 A36B     		ldr	r3, [r4, #56]
 123 000a 0BB9     		cbnz	r3, .L10
2264:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 124              		.loc 1 2264 0
 125 000c 0124     		movs	r4, #1
 126              	.LVL13:
 127 000e 00E0     		b	.L9
 128              	.LVL14:
 129              	.L10:
2268:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 130              		.loc 1 2268 0
 131 0010 0024     		movs	r4, #0
 132              	.LVL15:
 133              	.L9:
2271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 134              		.loc 1 2271 0
 135 0012 FFF7FEFF 		bl	vPortExitCritical
 136              	.LVL16:
2274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 44


 137              		.loc 1 2274 0
 138 0016 2046     		mov	r0, r4
 139 0018 10BD     		pop	{r4, pc}
 140              		.cfi_endproc
 141              	.LFE32:
 143 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 144              		.align	2
 145              		.thumb
 146              		.thumb_func
 148              	prvCopyDataToQueue:
 149              	.LFB29:
2040:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 150              		.loc 1 2040 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              	.LVL17:
 155 0000 70B5     		push	{r4, r5, r6, lr}
 156              	.LCFI2:
 157              		.cfi_def_cfa_offset 16
 158              		.cfi_offset 4, -16
 159              		.cfi_offset 5, -12
 160              		.cfi_offset 6, -8
 161              		.cfi_offset 14, -4
 162 0002 0446     		mov	r4, r0
 163 0004 1646     		mov	r6, r2
 164              	.LVL18:
2046:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 165              		.loc 1 2046 0
 166 0006 856B     		ldr	r5, [r0, #56]
 167              	.LVL19:
2048:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 168              		.loc 1 2048 0
 169 0008 026C     		ldr	r2, [r0, #64]
 170              	.LVL20:
 171 000a 3AB9     		cbnz	r2, .L13
2052:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 172              		.loc 1 2052 0
 173 000c 0368     		ldr	r3, [r0]
 174 000e 43BB     		cbnz	r3, .L17
2055:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 175              		.loc 1 2055 0
 176 0010 4068     		ldr	r0, [r0, #4]
 177              	.LVL21:
 178 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 179              	.LVL22:
2056:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 180              		.loc 1 2056 0
 181 0016 0023     		movs	r3, #0
 182 0018 6360     		str	r3, [r4, #4]
 183 001a 29E0     		b	.L14
 184              	.LVL23:
 185              	.L13:
2065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 186              		.loc 1 2065 0
 187 001c 6EB9     		cbnz	r6, .L15
2067:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 45


 188              		.loc 1 2067 0
 189 001e 8068     		ldr	r0, [r0, #8]
 190              	.LVL24:
 191 0020 FFF7FEFF 		bl	memcpy
 192              	.LVL25:
2068:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 193              		.loc 1 2068 0
 194 0024 A268     		ldr	r2, [r4, #8]
 195 0026 236C     		ldr	r3, [r4, #64]
 196 0028 1344     		add	r3, r3, r2
 197 002a A360     		str	r3, [r4, #8]
2069:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 198              		.loc 1 2069 0
 199 002c 6268     		ldr	r2, [r4, #4]
 200 002e 9342     		cmp	r3, r2
 201 0030 19D3     		bcc	.L18
2071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 202              		.loc 1 2071 0
 203 0032 2368     		ldr	r3, [r4]
 204 0034 A360     		str	r3, [r4, #8]
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 205              		.loc 1 2041 0
 206 0036 0020     		movs	r0, #0
 207 0038 1AE0     		b	.L14
 208              	.LVL26:
 209              	.L15:
2080:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 210              		.loc 1 2080 0
 211 003a C068     		ldr	r0, [r0, #12]
 212              	.LVL27:
 213 003c FFF7FEFF 		bl	memcpy
 214              	.LVL28:
2081:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 215              		.loc 1 2081 0
 216 0040 236C     		ldr	r3, [r4, #64]
 217 0042 5B42     		negs	r3, r3
 218 0044 E268     		ldr	r2, [r4, #12]
 219 0046 1A44     		add	r2, r2, r3
 220 0048 E260     		str	r2, [r4, #12]
2082:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 221              		.loc 1 2082 0
 222 004a 2168     		ldr	r1, [r4]
 223 004c 8A42     		cmp	r2, r1
 224 004e 02D2     		bcs	.L16
2084:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 225              		.loc 1 2084 0
 226 0050 6268     		ldr	r2, [r4, #4]
 227 0052 1344     		add	r3, r3, r2
 228 0054 E360     		str	r3, [r4, #12]
 229              	.L16:
2091:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 230              		.loc 1 2091 0
 231 0056 022E     		cmp	r6, #2
 232 0058 07D1     		bne	.L19
2093:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 233              		.loc 1 2093 0
 234 005a 45B1     		cbz	r5, .L20
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 46


2099:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 235              		.loc 1 2099 0
 236 005c 013D     		subs	r5, r5, #1
 237              	.LVL29:
2041:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 238              		.loc 1 2041 0
 239 005e 0020     		movs	r0, #0
 240 0060 06E0     		b	.L14
 241              	.LVL30:
 242              	.L17:
 243 0062 0020     		movs	r0, #0
 244              	.LVL31:
 245 0064 04E0     		b	.L14
 246              	.LVL32:
 247              	.L18:
 248 0066 0020     		movs	r0, #0
 249 0068 02E0     		b	.L14
 250              	.L19:
 251 006a 0020     		movs	r0, #0
 252 006c 00E0     		b	.L14
 253              	.L20:
 254 006e 0020     		movs	r0, #0
 255              	.LVL33:
 256              	.L14:
2112:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 257              		.loc 1 2112 0
 258 0070 0135     		adds	r5, r5, #1
 259              	.LVL34:
 260 0072 A563     		str	r5, [r4, #56]
2115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 261              		.loc 1 2115 0
 262 0074 70BD     		pop	{r4, r5, r6, pc}
 263              		.cfi_endproc
 264              	.LFE29:
 266 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 267              		.align	2
 268              		.thumb
 269              		.thumb_func
 271              	prvCopyDataFromQueue:
 272              	.LFB30:
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 273              		.loc 1 2119 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              	.LVL35:
2120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 278              		.loc 1 2120 0
 279 0000 026C     		ldr	r2, [r0, #64]
 280 0002 72B1     		cbz	r2, .L26
2119:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 281              		.loc 1 2119 0
 282 0004 10B5     		push	{r4, lr}
 283              	.LCFI3:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 4, -8
 286              		.cfi_offset 14, -4
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 47


 287 0006 0346     		mov	r3, r0
2122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 288              		.loc 1 2122 0
 289 0008 C468     		ldr	r4, [r0, #12]
 290 000a 1444     		add	r4, r4, r2
 291 000c C460     		str	r4, [r0, #12]
2123:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 292              		.loc 1 2123 0
 293 000e 4068     		ldr	r0, [r0, #4]
 294              	.LVL36:
 295 0010 8442     		cmp	r4, r0
 296 0012 01D3     		bcc	.L24
2125:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 297              		.loc 1 2125 0
 298 0014 1868     		ldr	r0, [r3]
 299 0016 D860     		str	r0, [r3, #12]
 300              	.L24:
 301 0018 0846     		mov	r0, r1
2131:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 302              		.loc 1 2131 0
 303 001a D968     		ldr	r1, [r3, #12]
 304              	.LVL37:
 305 001c FFF7FEFF 		bl	memcpy
 306              	.LVL38:
 307 0020 10BD     		pop	{r4, pc}
 308              	.LVL39:
 309              	.L26:
 310              	.LCFI4:
 311              		.cfi_def_cfa_offset 0
 312              		.cfi_restore 4
 313              		.cfi_restore 14
 314 0022 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE30:
 318              		.section	.text.prvUnlockQueue,"ax",%progbits
 319              		.align	2
 320              		.thumb
 321              		.thumb_func
 323              	prvUnlockQueue:
 324              	.LFB31:
2137:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 325              		.loc 1 2137 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL40:
 330 0000 38B5     		push	{r3, r4, r5, lr}
 331              	.LCFI5:
 332              		.cfi_def_cfa_offset 16
 333              		.cfi_offset 3, -16
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 14, -4
 337 0002 0546     		mov	r5, r0
2144:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 338              		.loc 1 2144 0
 339 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 48


 340              	.LVL41:
 341              	.LBB116:
2146:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 342              		.loc 1 2146 0
 343 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 344 000c 64B2     		sxtb	r4, r4
 345              	.LVL42:
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 346              		.loc 1 2149 0
 347 000e 0AE0     		b	.L28
 348              	.L31:
2197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 349              		.loc 1 2197 0
 350 0010 6B6A     		ldr	r3, [r5, #36]
 351 0012 53B1     		cbz	r3, .L29
2199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 352              		.loc 1 2199 0
 353 0014 05F12400 		add	r0, r5, #36
 354 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 355              	.LVL43:
 356 001c 08B1     		cbz	r0, .L30
2203:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 357              		.loc 1 2203 0
 358 001e FFF7FEFF 		bl	vTaskMissedYield
 359              	.LVL44:
 360              	.L30:
2217:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 361              		.loc 1 2217 0
 362 0022 013C     		subs	r4, r4, #1
 363              	.LVL45:
 364 0024 64B2     		sxtb	r4, r4
 365              	.LVL46:
 366              	.L28:
2149:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 367              		.loc 1 2149 0
 368 0026 002C     		cmp	r4, #0
 369 0028 F2DC     		bgt	.L31
 370              	.L29:
2220:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 371              		.loc 1 2220 0
 372 002a FF23     		movs	r3, #255
 373 002c 85F84530 		strb	r3, [r5, #69]
 374              	.LBE116:
2222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 375              		.loc 1 2222 0
 376 0030 FFF7FEFF 		bl	vPortExitCritical
 377              	.LVL47:
2225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 378              		.loc 1 2225 0
 379 0034 FFF7FEFF 		bl	vPortEnterCritical
 380              	.LVL48:
 381              	.LBB117:
2227:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 382              		.loc 1 2227 0
 383 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 384              	.LVL49:
 385 003c 64B2     		sxtb	r4, r4
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 49


 386              	.LVL50:
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 387              		.loc 1 2229 0
 388 003e 0AE0     		b	.L32
 389              	.L35:
2231:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 390              		.loc 1 2231 0
 391 0040 2B69     		ldr	r3, [r5, #16]
 392 0042 53B1     		cbz	r3, .L33
2233:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 393              		.loc 1 2233 0
 394 0044 05F11000 		add	r0, r5, #16
 395 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 396              	.LVL51:
 397 004c 08B1     		cbz	r0, .L34
2235:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 398              		.loc 1 2235 0
 399 004e FFF7FEFF 		bl	vTaskMissedYield
 400              	.LVL52:
 401              	.L34:
2242:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 402              		.loc 1 2242 0
 403 0052 013C     		subs	r4, r4, #1
 404              	.LVL53:
 405 0054 64B2     		sxtb	r4, r4
 406              	.LVL54:
 407              	.L32:
2229:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 408              		.loc 1 2229 0
 409 0056 002C     		cmp	r4, #0
 410 0058 F2DC     		bgt	.L35
 411              	.L33:
2250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 412              		.loc 1 2250 0
 413 005a FF23     		movs	r3, #255
 414 005c 85F84430 		strb	r3, [r5, #68]
 415              	.LBE117:
2252:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** }
 416              		.loc 1 2252 0
 417 0060 FFF7FEFF 		bl	vPortExitCritical
 418              	.LVL55:
 419 0064 38BD     		pop	{r3, r4, r5, pc}
 420              		.cfi_endproc
 421              	.LFE31:
 423 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 424              		.align	2
 425              		.global	xQueueGenericReset
 426              		.thumb
 427              		.thumb_func
 429              	xQueueGenericReset:
 430              	.LFB5:
 248:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 431              		.loc 1 248 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              	.LVL56:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 50


 436 0000 38B5     		push	{r3, r4, r5, lr}
 437              	.LCFI6:
 438              		.cfi_def_cfa_offset 16
 439              		.cfi_offset 3, -16
 440              		.cfi_offset 4, -12
 441              		.cfi_offset 5, -8
 442              		.cfi_offset 14, -4
 443              	.LVL57:
 251:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 444              		.loc 1 251 0
 445 0002 40B9     		cbnz	r0, .L38
 446              	.LBB118:
 447              	.LBB119:
 448              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 51


  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 52


 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 53


 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 449              		.loc 2 195 0
 450              		.syntax unified
 451              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 452 0004 4FF05003 			mov r3, #80												
 453 0008 83F31188 		msr basepri, r3											
 454 000c BFF36F8F 		isb														
 455 0010 BFF34F8F 		dsb														
 456              	
 457              	@ 0 "" 2
 458              	.LVL58:
 459              		.thumb
 460              		.syntax unified
 461              	.L39:
 462 0014 FEE7     		b	.L39
 463              	.L38:
 464 0016 0446     		mov	r4, r0
 465 0018 0D46     		mov	r5, r1
 466              	.LBE119:
 467              	.LBE118:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 54


 253:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 468              		.loc 1 253 0
 469 001a FFF7FEFF 		bl	vPortEnterCritical
 470              	.LVL59:
 255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 471              		.loc 1 255 0
 472 001e 2168     		ldr	r1, [r4]
 473 0020 E26B     		ldr	r2, [r4, #60]
 474 0022 236C     		ldr	r3, [r4, #64]
 475 0024 03FB0210 		mla	r0, r3, r2, r1
 476 0028 6060     		str	r0, [r4, #4]
 256:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 477              		.loc 1 256 0
 478 002a 0020     		movs	r0, #0
 479 002c A063     		str	r0, [r4, #56]
 257:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 480              		.loc 1 257 0
 481 002e A160     		str	r1, [r4, #8]
 258:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 482              		.loc 1 258 0
 483 0030 013A     		subs	r2, r2, #1
 484 0032 02FB0313 		mla	r3, r2, r3, r1
 485 0036 E360     		str	r3, [r4, #12]
 259:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 486              		.loc 1 259 0
 487 0038 FF23     		movs	r3, #255
 488 003a 84F84430 		strb	r3, [r4, #68]
 260:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 489              		.loc 1 260 0
 490 003e 84F84530 		strb	r3, [r4, #69]
 262:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 491              		.loc 1 262 0
 492 0042 7DB9     		cbnz	r5, .L40
 269:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 493              		.loc 1 269 0
 494 0044 2369     		ldr	r3, [r4, #16]
 495 0046 ABB1     		cbz	r3, .L41
 271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 496              		.loc 1 271 0
 497 0048 04F11000 		add	r0, r4, #16
 498 004c FFF7FEFF 		bl	xTaskRemoveFromEventList
 499              	.LVL60:
 500 0050 80B1     		cbz	r0, .L41
 273:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 501              		.loc 1 273 0
 502 0052 4FF08052 		mov	r2, #268435456
 503 0056 094B     		ldr	r3, .L43
 504 0058 1A60     		str	r2, [r3]
 505              		.syntax unified
 506              	@ 273 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 507 005a BFF34F8F 		dsb
 508              	@ 0 "" 2
 509              	@ 273 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 510 005e BFF36F8F 		isb
 511              	@ 0 "" 2
 512              		.thumb
 513              		.syntax unified
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 55


 514 0062 07E0     		b	.L41
 515              	.L40:
 288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 516              		.loc 1 288 0
 517 0064 04F11000 		add	r0, r4, #16
 518 0068 FFF7FEFF 		bl	vListInitialise
 519              	.LVL61:
 289:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 520              		.loc 1 289 0
 521 006c 04F12400 		add	r0, r4, #36
 522 0070 FFF7FEFF 		bl	vListInitialise
 523              	.LVL62:
 524              	.L41:
 292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 525              		.loc 1 292 0
 526 0074 FFF7FEFF 		bl	vPortExitCritical
 527              	.LVL63:
 297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 528              		.loc 1 297 0
 529 0078 0120     		movs	r0, #1
 530 007a 38BD     		pop	{r3, r4, r5, pc}
 531              	.LVL64:
 532              	.L44:
 533              		.align	2
 534              	.L43:
 535 007c 04ED00E0 		.word	-536810236
 536              		.cfi_endproc
 537              	.LFE5:
 539              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 540              		.align	2
 541              		.thumb
 542              		.thumb_func
 544              	prvInitialiseNewQueue:
 545              	.LFB8:
 409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 546              		.loc 1 409 0
 547              		.cfi_startproc
 548              		@ args = 4, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              	.LVL65:
 551 0000 10B5     		push	{r4, lr}
 552              	.LCFI7:
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 4, -8
 555              		.cfi_offset 14, -4
 556 0002 029B     		ldr	r3, [sp, #8]
 557              	.LVL66:
 414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 558              		.loc 1 414 0
 559 0004 0C46     		mov	r4, r1
 560 0006 09B9     		cbnz	r1, .L46
 420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 561              		.loc 1 420 0
 562 0008 1B60     		str	r3, [r3]
 563 000a 00E0     		b	.L47
 564              	.L46:
 425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 56


 565              		.loc 1 425 0
 566 000c 1A60     		str	r2, [r3]
 567              	.L47:
 430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 568              		.loc 1 430 0
 569 000e D863     		str	r0, [r3, #60]
 431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 570              		.loc 1 431 0
 571 0010 1C64     		str	r4, [r3, #64]
 432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 572              		.loc 1 432 0
 573 0012 0121     		movs	r1, #1
 574              	.LVL67:
 575 0014 1846     		mov	r0, r3
 576              	.LVL68:
 577 0016 FFF7FEFF 		bl	xQueueGenericReset
 578              	.LVL69:
 579 001a 10BD     		pop	{r4, pc}
 580              		.cfi_endproc
 581              	.LFE8:
 583              		.section	.text.xQueueGenericCreateStatic,"ax",%progbits
 584              		.align	2
 585              		.global	xQueueGenericCreateStatic
 586              		.thumb
 587              		.thumb_func
 589              	xQueueGenericCreateStatic:
 590              	.LFB6:
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 591              		.loc 1 303 0
 592              		.cfi_startproc
 593              		@ args = 4, pretend = 0, frame = 8
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              	.LVL70:
 306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 596              		.loc 1 306 0
 597 0000 40B9     		cbnz	r0, .L50
 598              	.LBB120:
 599              	.LBB121:
 600              		.loc 2 195 0
 601              		.syntax unified
 602              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 603 0002 4FF05003 			mov r3, #80												
 604 0006 83F31188 		msr basepri, r3											
 605 000a BFF36F8F 		isb														
 606 000e BFF34F8F 		dsb														
 607              	
 608              	@ 0 "" 2
 609              	.LVL71:
 610              		.thumb
 611              		.syntax unified
 612              	.L51:
 613 0012 FEE7     		b	.L51
 614              	.LVL72:
 615              	.L50:
 616              	.LBE121:
 617              	.LBE120:
 303:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 57


 618              		.loc 1 303 0
 619 0014 10B5     		push	{r4, lr}
 620              	.LCFI8:
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 4, -8
 623              		.cfi_offset 14, -4
 624 0016 84B0     		sub	sp, sp, #16
 625              	.LCFI9:
 626              		.cfi_def_cfa_offset 24
 627 0018 0446     		mov	r4, r0
 310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 628              		.loc 1 310 0
 629 001a 43B9     		cbnz	r3, .L52
 630              	.LBB122:
 631              	.LBB123:
 632              		.loc 2 195 0
 633              		.syntax unified
 634              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 635 001c 4FF05003 			mov r3, #80												
 636 0020 83F31188 		msr basepri, r3											
 637 0024 BFF36F8F 		isb														
 638 0028 BFF34F8F 		dsb														
 639              	
 640              	@ 0 "" 2
 641              	.LVL73:
 642              		.thumb
 643              		.syntax unified
 644              	.L53:
 645 002c FEE7     		b	.L53
 646              	.LVL74:
 647              	.L52:
 648              	.LBE123:
 649              	.LBE122:
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 650              		.loc 1 314 0
 651 002e 12B1     		cbz	r2, .L63
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 652              		.loc 1 314 0 is_stmt 0 discriminator 2
 653 0030 19B1     		cbz	r1, .L64
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 654              		.loc 1 314 0
 655 0032 0120     		movs	r0, #1
 656              	.LVL75:
 657 0034 02E0     		b	.L54
 658              	.LVL76:
 659              	.L63:
 660 0036 0120     		movs	r0, #1
 661              	.LVL77:
 662 0038 00E0     		b	.L54
 663              	.LVL78:
 664              	.L64:
 665 003a 0020     		movs	r0, #0
 666              	.LVL79:
 667              	.L54:
 314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 668              		.loc 1 314 0 discriminator 6
 669 003c 40B9     		cbnz	r0, .L55
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 58


 670              	.LBB124:
 671              	.LBB125:
 672              		.loc 2 195 0 is_stmt 1
 673              		.syntax unified
 674              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 675 003e 4FF05003 			mov r3, #80												
 676 0042 83F31188 		msr basepri, r3											
 677 0046 BFF36F8F 		isb														
 678 004a BFF34F8F 		dsb														
 679              	
 680              	@ 0 "" 2
 681              	.LVL80:
 682              		.thumb
 683              		.syntax unified
 684              	.L56:
 685 004e FEE7     		b	.L56
 686              	.LVL81:
 687              	.L55:
 688              	.LBE125:
 689              	.LBE124:
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 690              		.loc 1 315 0
 691 0050 12B9     		cbnz	r2, .L65
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 692              		.loc 1 315 0 is_stmt 0 discriminator 2
 693 0052 19B9     		cbnz	r1, .L66
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 694              		.loc 1 315 0
 695 0054 0120     		movs	r0, #1
 696 0056 02E0     		b	.L57
 697              	.L65:
 698 0058 0120     		movs	r0, #1
 699 005a 00E0     		b	.L57
 700              	.L66:
 701 005c 0020     		movs	r0, #0
 702              	.L57:
 315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 703              		.loc 1 315 0 discriminator 6
 704 005e 40B9     		cbnz	r0, .L58
 705              	.LBB126:
 706              	.LBB127:
 707              		.loc 2 195 0 is_stmt 1
 708              		.syntax unified
 709              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 710 0060 4FF05003 			mov r3, #80												
 711 0064 83F31188 		msr basepri, r3											
 712 0068 BFF36F8F 		isb														
 713 006c BFF34F8F 		dsb														
 714              	
 715              	@ 0 "" 2
 716              	.LVL82:
 717              		.thumb
 718              		.syntax unified
 719              	.L59:
 720 0070 FEE7     		b	.L59
 721              	.LVL83:
 722              	.L58:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 59


 723              	.LBE127:
 724              	.LBE126:
 725              	.LBB128:
 322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 726              		.loc 1 322 0
 727 0072 4820     		movs	r0, #72
 728 0074 0390     		str	r0, [sp, #12]
 323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 729              		.loc 1 323 0
 730 0076 0398     		ldr	r0, [sp, #12]
 731 0078 4828     		cmp	r0, #72
 732 007a 08D0     		beq	.L60
 733              	.LBB129:
 734              	.LBB130:
 735              		.loc 2 195 0
 736              		.syntax unified
 737              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 738 007c 4FF05003 			mov r3, #80												
 739 0080 83F31188 		msr basepri, r3											
 740 0084 BFF36F8F 		isb														
 741 0088 BFF34F8F 		dsb														
 742              	
 743              	@ 0 "" 2
 744              	.LVL84:
 745              		.thumb
 746              		.syntax unified
 747              	.L61:
 748 008c FEE7     		b	.L61
 749              	.LVL85:
 750              	.L60:
 751 008e 2046     		mov	r0, r4
 752 0090 1C46     		mov	r4, r3
 753              	.LVL86:
 754              	.LBE130:
 755              	.LBE129:
 756              	.LBE128:
 332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 757              		.loc 1 332 0
 758 0092 3BB1     		cbz	r3, .L62
 759              	.LVL87:
 339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 760              		.loc 1 339 0
 761 0094 0123     		movs	r3, #1
 762              	.LVL88:
 763 0096 84F84630 		strb	r3, [r4, #70]
 343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 764              		.loc 1 343 0
 765 009a 0094     		str	r4, [sp]
 766 009c 9DF81830 		ldrb	r3, [sp, #24]	@ zero_extendqisi2
 767 00a0 FFF7FEFF 		bl	prvInitialiseNewQueue
 768              	.LVL89:
 769              	.L62:
 351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 770              		.loc 1 351 0
 771 00a4 2046     		mov	r0, r4
 772 00a6 04B0     		add	sp, sp, #16
 773              	.LCFI10:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 60


 774              		.cfi_def_cfa_offset 8
 775              		@ sp needed
 776 00a8 10BD     		pop	{r4, pc}
 777              		.cfi_endproc
 778              	.LFE6:
 780 00aa 00BF     		.section	.text.xQueueGenericCreate,"ax",%progbits
 781              		.align	2
 782              		.global	xQueueGenericCreate
 783              		.thumb
 784              		.thumb_func
 786              	xQueueGenericCreate:
 787              	.LFB7:
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 788              		.loc 1 359 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              	.LVL90:
 364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 793              		.loc 1 364 0
 794 0000 40B9     		cbnz	r0, .L69
 795              	.LBB131:
 796              	.LBB132:
 797              		.loc 2 195 0
 798              		.syntax unified
 799              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 800 0002 4FF05003 			mov r3, #80												
 801 0006 83F31188 		msr basepri, r3											
 802 000a BFF36F8F 		isb														
 803 000e BFF34F8F 		dsb														
 804              	
 805              	@ 0 "" 2
 806              	.LVL91:
 807              		.thumb
 808              		.syntax unified
 809              	.L70:
 810 0012 FEE7     		b	.L70
 811              	.L69:
 812              	.LBE132:
 813              	.LBE131:
 359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 814              		.loc 1 359 0
 815 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 816              	.LCFI11:
 817              		.cfi_def_cfa_offset 20
 818              		.cfi_offset 4, -20
 819              		.cfi_offset 5, -16
 820              		.cfi_offset 6, -12
 821              		.cfi_offset 7, -8
 822              		.cfi_offset 14, -4
 823 0016 83B0     		sub	sp, sp, #12
 824              	.LCFI12:
 825              		.cfi_def_cfa_offset 32
 826 0018 0346     		mov	r3, r0
 366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 827              		.loc 1 366 0
 828 001a 11B1     		cbz	r1, .L73
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 61


 375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 829              		.loc 1 375 0
 830 001c 01FB00F0 		mul	r0, r1, r0
 831              	.LVL92:
 832 0020 00E0     		b	.L71
 833              	.LVL93:
 834              	.L73:
 369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 835              		.loc 1 369 0
 836 0022 0020     		movs	r0, #0
 837              	.LVL94:
 838              	.L71:
 839 0024 1E46     		mov	r6, r3
 840 0026 1746     		mov	r7, r2
 841 0028 0C46     		mov	r4, r1
 842              	.LVL95:
 378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 843              		.loc 1 378 0
 844 002a 4830     		adds	r0, r0, #72
 845              	.LVL96:
 846 002c FFF7FEFF 		bl	pvPortMalloc
 847              	.LVL97:
 380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 848              		.loc 1 380 0
 849 0030 0546     		mov	r5, r0
 850 0032 50B1     		cbz	r0, .L72
 851              	.LVL98:
 391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 852              		.loc 1 391 0
 853 0034 0023     		movs	r3, #0
 854 0036 80F84630 		strb	r3, [r0, #70]
 395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 855              		.loc 1 395 0
 856 003a 0090     		str	r0, [sp]
 857 003c 3B46     		mov	r3, r7
 858 003e 00F14802 		add	r2, r0, #72
 859              	.LVL99:
 860 0042 2146     		mov	r1, r4
 861 0044 3046     		mov	r0, r6
 862              	.LVL100:
 863 0046 FFF7FEFF 		bl	prvInitialiseNewQueue
 864              	.LVL101:
 865              	.L72:
 403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 866              		.loc 1 403 0
 867 004a 2846     		mov	r0, r5
 868 004c 03B0     		add	sp, sp, #12
 869              	.LCFI13:
 870              		.cfi_def_cfa_offset 20
 871              		@ sp needed
 872 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 873              		.cfi_endproc
 874              	.LFE7:
 876              		.section	.text.xQueueCreateCountingSemaphoreStatic,"ax",%progbits
 877              		.align	2
 878              		.global	xQueueCreateCountingSemaphoreStatic
 879              		.thumb
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 62


 880              		.thumb_func
 882              	xQueueCreateCountingSemaphoreStatic:
 883              	.LFB14:
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 884              		.loc 1 672 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              	.LVL102:
 675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 889              		.loc 1 675 0
 890 0000 40B9     		cbnz	r0, .L76
 891              	.LBB133:
 892              	.LBB134:
 893              		.loc 2 195 0
 894              		.syntax unified
 895              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 896 0002 4FF05003 			mov r3, #80												
 897 0006 83F31188 		msr basepri, r3											
 898 000a BFF36F8F 		isb														
 899 000e BFF34F8F 		dsb														
 900              	
 901              	@ 0 "" 2
 902              	.LVL103:
 903              		.thumb
 904              		.syntax unified
 905              	.L77:
 906 0012 FEE7     		b	.L77
 907              	.L76:
 908              	.LBE134:
 909              	.LBE133:
 676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 910              		.loc 1 676 0
 911 0014 8842     		cmp	r0, r1
 912 0016 08D2     		bcs	.L78
 913              	.LBB135:
 914              	.LBB136:
 915              		.loc 2 195 0
 916              		.syntax unified
 917              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 918 0018 4FF05003 			mov r3, #80												
 919 001c 83F31188 		msr basepri, r3											
 920 0020 BFF36F8F 		isb														
 921 0024 BFF34F8F 		dsb														
 922              	
 923              	@ 0 "" 2
 924              	.LVL104:
 925              		.thumb
 926              		.syntax unified
 927              	.L79:
 928 0028 FEE7     		b	.L79
 929              	.L78:
 930              	.LBE136:
 931              	.LBE135:
 672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 932              		.loc 1 672 0
 933 002a 10B5     		push	{r4, lr}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 63


 934              	.LCFI14:
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 4, -8
 937              		.cfi_offset 14, -4
 938 002c 82B0     		sub	sp, sp, #8
 939              	.LCFI15:
 940              		.cfi_def_cfa_offset 16
 941 002e 1346     		mov	r3, r2
 942 0030 0C46     		mov	r4, r1
 678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 943              		.loc 1 678 0
 944 0032 0222     		movs	r2, #2
 945              	.LVL105:
 946 0034 0092     		str	r2, [sp]
 947 0036 0022     		movs	r2, #0
 948 0038 1146     		mov	r1, r2
 949              	.LVL106:
 950 003a FFF7FEFF 		bl	xQueueGenericCreateStatic
 951              	.LVL107:
 680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 952              		.loc 1 680 0
 953 003e 0346     		mov	r3, r0
 954 0040 00B1     		cbz	r0, .L80
 682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 955              		.loc 1 682 0
 956 0042 8463     		str	r4, [r0, #56]
 957              	.L80:
 692:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 958              		.loc 1 692 0
 959 0044 1846     		mov	r0, r3
 960              	.LVL108:
 961 0046 02B0     		add	sp, sp, #8
 962              	.LCFI16:
 963              		.cfi_def_cfa_offset 8
 964              		@ sp needed
 965 0048 10BD     		pop	{r4, pc}
 966              		.cfi_endproc
 967              	.LFE14:
 969 004a 00BF     		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 970              		.align	2
 971              		.global	xQueueCreateCountingSemaphore
 972              		.thumb
 973              		.thumb_func
 975              	xQueueCreateCountingSemaphore:
 976              	.LFB15:
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 977              		.loc 1 700 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 981              	.LVL109:
 703:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 982              		.loc 1 703 0
 983 0000 40B9     		cbnz	r0, .L83
 984              	.LBB137:
 985              	.LBB138:
 986              		.loc 2 195 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 64


 987              		.syntax unified
 988              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 989 0002 4FF05003 			mov r3, #80												
 990 0006 83F31188 		msr basepri, r3											
 991 000a BFF36F8F 		isb														
 992 000e BFF34F8F 		dsb														
 993              	
 994              	@ 0 "" 2
 995              	.LVL110:
 996              		.thumb
 997              		.syntax unified
 998              	.L84:
 999 0012 FEE7     		b	.L84
 1000              	.L83:
 1001              	.LBE138:
 1002              	.LBE137:
 704:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1003              		.loc 1 704 0
 1004 0014 8842     		cmp	r0, r1
 1005 0016 08D2     		bcs	.L85
 1006              	.LBB139:
 1007              	.LBB140:
 1008              		.loc 2 195 0
 1009              		.syntax unified
 1010              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1011 0018 4FF05003 			mov r3, #80												
 1012 001c 83F31188 		msr basepri, r3											
 1013 0020 BFF36F8F 		isb														
 1014 0024 BFF34F8F 		dsb														
 1015              	
 1016              	@ 0 "" 2
 1017              	.LVL111:
 1018              		.thumb
 1019              		.syntax unified
 1020              	.L86:
 1021 0028 FEE7     		b	.L86
 1022              	.L85:
 1023              	.LBE140:
 1024              	.LBE139:
 700:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 1025              		.loc 1 700 0
 1026 002a 10B5     		push	{r4, lr}
 1027              	.LCFI17:
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 4, -8
 1030              		.cfi_offset 14, -4
 1031 002c 0C46     		mov	r4, r1
 706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1032              		.loc 1 706 0
 1033 002e 0222     		movs	r2, #2
 1034 0030 0021     		movs	r1, #0
 1035              	.LVL112:
 1036 0032 FFF7FEFF 		bl	xQueueGenericCreate
 1037              	.LVL113:
 708:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1038              		.loc 1 708 0
 1039 0036 0346     		mov	r3, r0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 65


 1040 0038 00B1     		cbz	r0, .L87
 710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1041              		.loc 1 710 0
 1042 003a 8463     		str	r4, [r0, #56]
 1043              	.L87:
 720:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1044              		.loc 1 720 0
 1045 003c 1846     		mov	r0, r3
 1046              	.LVL114:
 1047 003e 10BD     		pop	{r4, pc}
 1048              		.cfi_endproc
 1049              	.LFE15:
 1051              		.section	.text.xQueueGenericSend,"ax",%progbits
 1052              		.align	2
 1053              		.global	xQueueGenericSend
 1054              		.thumb
 1055              		.thumb_func
 1057              	xQueueGenericSend:
 1058              	.LFB16:
 726:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1059              		.loc 1 726 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 16
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063              	.LVL115:
 1064 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1065              	.LCFI18:
 1066              		.cfi_def_cfa_offset 20
 1067              		.cfi_offset 4, -20
 1068              		.cfi_offset 5, -16
 1069              		.cfi_offset 6, -12
 1070              		.cfi_offset 7, -8
 1071              		.cfi_offset 14, -4
 1072 0002 85B0     		sub	sp, sp, #20
 1073              	.LCFI19:
 1074              		.cfi_def_cfa_offset 40
 1075 0004 0192     		str	r2, [sp, #4]
 1076              	.LVL116:
 731:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1077              		.loc 1 731 0
 1078 0006 40B9     		cbnz	r0, .L90
 1079              	.LBB141:
 1080              	.LBB142:
 1081              		.loc 2 195 0
 1082              		.syntax unified
 1083              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1084 0008 4FF05003 			mov r3, #80												
 1085 000c 83F31188 		msr basepri, r3											
 1086 0010 BFF36F8F 		isb														
 1087 0014 BFF34F8F 		dsb														
 1088              	
 1089              	@ 0 "" 2
 1090              	.LVL117:
 1091              		.thumb
 1092              		.syntax unified
 1093              	.L91:
 1094 0018 FEE7     		b	.L91
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 66


 1095              	.LVL118:
 1096              	.L90:
 1097 001a 0446     		mov	r4, r0
 1098              	.LBE142:
 1099              	.LBE141:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1100              		.loc 1 732 0
 1101 001c 19B9     		cbnz	r1, .L113
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1102              		.loc 1 732 0 is_stmt 0 discriminator 2
 1103 001e 026C     		ldr	r2, [r0, #64]
 1104              	.LVL119:
 1105 0020 1AB9     		cbnz	r2, .L114
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1106              		.loc 1 732 0
 1107 0022 0122     		movs	r2, #1
 1108 0024 02E0     		b	.L92
 1109              	.LVL120:
 1110              	.L113:
 1111 0026 0122     		movs	r2, #1
 1112              	.LVL121:
 1113 0028 00E0     		b	.L92
 1114              	.L114:
 1115 002a 0022     		movs	r2, #0
 1116              	.L92:
 732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1117              		.loc 1 732 0 discriminator 6
 1118 002c 42B9     		cbnz	r2, .L93
 1119              	.LBB143:
 1120              	.LBB144:
 1121              		.loc 2 195 0 is_stmt 1
 1122              		.syntax unified
 1123              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1124 002e 4FF05003 			mov r3, #80												
 1125 0032 83F31188 		msr basepri, r3											
 1126 0036 BFF36F8F 		isb														
 1127 003a BFF34F8F 		dsb														
 1128              	
 1129              	@ 0 "" 2
 1130              	.LVL122:
 1131              		.thumb
 1132              		.syntax unified
 1133              	.L94:
 1134 003e FEE7     		b	.L94
 1135              	.LVL123:
 1136              	.L93:
 1137              	.LBE144:
 1138              	.LBE143:
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1139              		.loc 1 733 0
 1140 0040 022B     		cmp	r3, #2
 1141 0042 03D1     		bne	.L115
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1142              		.loc 1 733 0 is_stmt 0 discriminator 2
 1143 0044 E26B     		ldr	r2, [r4, #60]
 1144 0046 012A     		cmp	r2, #1
 1145 0048 02D1     		bne	.L116
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 67


 1146 004a 02E0     		b	.L95
 1147              	.L115:
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1148              		.loc 1 733 0
 1149 004c 0122     		movs	r2, #1
 1150 004e 00E0     		b	.L95
 1151              	.L116:
 1152 0050 0022     		movs	r2, #0
 1153              	.L95:
 733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1154              		.loc 1 733 0 discriminator 6
 1155 0052 42B9     		cbnz	r2, .L96
 1156              	.LBB145:
 1157              	.LBB146:
 1158              		.loc 2 195 0 is_stmt 1
 1159              		.syntax unified
 1160              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1161 0054 4FF05003 			mov r3, #80												
 1162 0058 83F31188 		msr basepri, r3											
 1163 005c BFF36F8F 		isb														
 1164 0060 BFF34F8F 		dsb														
 1165              	
 1166              	@ 0 "" 2
 1167              	.LVL124:
 1168              		.thumb
 1169              		.syntax unified
 1170              	.L97:
 1171 0064 FEE7     		b	.L97
 1172              	.LVL125:
 1173              	.L96:
 1174 0066 1D46     		mov	r5, r3
 1175 0068 0E46     		mov	r6, r1
 1176              	.LBE146:
 1177              	.LBE145:
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1178              		.loc 1 736 0
 1179 006a FFF7FEFF 		bl	xTaskGetSchedulerState
 1180              	.LVL126:
 1181 006e 18B9     		cbnz	r0, .L117
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1182              		.loc 1 736 0 is_stmt 0 discriminator 2
 1183 0070 019B     		ldr	r3, [sp, #4]
 1184 0072 1BB9     		cbnz	r3, .L118
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1185              		.loc 1 736 0
 1186 0074 0123     		movs	r3, #1
 1187 0076 02E0     		b	.L98
 1188              	.L117:
 1189 0078 0123     		movs	r3, #1
 1190 007a 00E0     		b	.L98
 1191              	.L118:
 1192 007c 0023     		movs	r3, #0
 1193              	.L98:
 736:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 1194              		.loc 1 736 0 discriminator 6
 1195 007e 43B9     		cbnz	r3, .L119
 1196              	.LBB147:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 68


 1197              	.LBB148:
 1198              		.loc 2 195 0 is_stmt 1
 1199              		.syntax unified
 1200              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1201 0080 4FF05003 			mov r3, #80												
 1202 0084 83F31188 		msr basepri, r3											
 1203 0088 BFF36F8F 		isb														
 1204 008c BFF34F8F 		dsb														
 1205              	
 1206              	@ 0 "" 2
 1207              	.LVL127:
 1208              		.thumb
 1209              		.syntax unified
 1210              	.L100:
 1211 0090 FEE7     		b	.L100
 1212              	.L119:
 1213              	.LBE148:
 1214              	.LBE147:
 1215 0092 0027     		movs	r7, #0
 1216              	.LVL128:
 1217              	.L99:
 746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1218              		.loc 1 746 0
 1219 0094 FFF7FEFF 		bl	vPortEnterCritical
 1220              	.LVL129:
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1221              		.loc 1 752 0
 1222 0098 A26B     		ldr	r2, [r4, #56]
 1223 009a E36B     		ldr	r3, [r4, #60]
 1224 009c 9A42     		cmp	r2, r3
 1225 009e 01D3     		bcc	.L101
 752:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1226              		.loc 1 752 0 is_stmt 0 discriminator 1
 1227 00a0 022D     		cmp	r5, #2
 1228 00a2 21D1     		bne	.L102
 1229              	.L101:
 755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1230              		.loc 1 755 0 is_stmt 1
 1231 00a4 2A46     		mov	r2, r5
 1232 00a6 3146     		mov	r1, r6
 1233 00a8 2046     		mov	r0, r4
 1234 00aa FFF7FEFF 		bl	prvCopyDataToQueue
 1235              	.LVL130:
 810:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1236              		.loc 1 810 0
 1237 00ae 636A     		ldr	r3, [r4, #36]
 1238 00b0 6BB1     		cbz	r3, .L103
 812:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1239              		.loc 1 812 0
 1240 00b2 04F12400 		add	r0, r4, #36
 1241              	.LVL131:
 1242 00b6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1243              	.LVL132:
 1244 00ba 88B1     		cbz	r0, .L104
 818:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 1245              		.loc 1 818 0
 1246 00bc 4FF08052 		mov	r2, #268435456
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 69


 1247 00c0 324B     		ldr	r3, .L121
 1248 00c2 1A60     		str	r2, [r3]
 1249              		.syntax unified
 1250              	@ 818 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1251 00c4 BFF34F8F 		dsb
 1252              	@ 0 "" 2
 1253              	@ 818 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1254 00c8 BFF36F8F 		isb
 1255              	@ 0 "" 2
 1256              		.thumb
 1257              		.syntax unified
 1258 00cc 08E0     		b	.L104
 1259              	.LVL133:
 1260              	.L103:
 825:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1261              		.loc 1 825 0
 1262 00ce 38B1     		cbz	r0, .L104
 831:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 1263              		.loc 1 831 0
 1264 00d0 4FF08052 		mov	r2, #268435456
 1265 00d4 2D4B     		ldr	r3, .L121
 1266 00d6 1A60     		str	r2, [r3]
 1267              		.syntax unified
 1268              	@ 831 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1269 00d8 BFF34F8F 		dsb
 1270              	@ 0 "" 2
 1271              	@ 831 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1272 00dc BFF36F8F 		isb
 1273              	@ 0 "" 2
 1274              	.LVL134:
 1275              		.thumb
 1276              		.syntax unified
 1277              	.L104:
 840:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 1278              		.loc 1 840 0
 1279 00e0 FFF7FEFF 		bl	vPortExitCritical
 1280              	.LVL135:
 841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1281              		.loc 1 841 0
 1282 00e4 0120     		movs	r0, #1
 1283 00e6 4EE0     		b	.L105
 1284              	.L102:
 845:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1285              		.loc 1 845 0
 1286 00e8 019B     		ldr	r3, [sp, #4]
 1287 00ea 1BB9     		cbnz	r3, .L106
 849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1288              		.loc 1 849 0
 1289 00ec FFF7FEFF 		bl	vPortExitCritical
 1290              	.LVL136:
 854:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1291              		.loc 1 854 0
 1292 00f0 0020     		movs	r0, #0
 1293 00f2 48E0     		b	.L105
 1294              	.L106:
 856:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1295              		.loc 1 856 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 70


 1296 00f4 1FB9     		cbnz	r7, .L107
 860:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1297              		.loc 1 860 0
 1298 00f6 02A8     		add	r0, sp, #8
 1299 00f8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1300              	.LVL137:
 861:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1301              		.loc 1 861 0
 1302 00fc 0127     		movs	r7, #1
 1303              	.LVL138:
 1304              	.L107:
 870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1305              		.loc 1 870 0
 1306 00fe FFF7FEFF 		bl	vPortExitCritical
 1307              	.LVL139:
 875:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1308              		.loc 1 875 0
 1309 0102 FFF7FEFF 		bl	vTaskSuspendAll
 1310              	.LVL140:
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1311              		.loc 1 876 0
 1312 0106 FFF7FEFF 		bl	vPortEnterCritical
 1313              	.LVL141:
 1314 010a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1315 010e 5BB2     		sxtb	r3, r3
 1316 0110 B3F1FF3F 		cmp	r3, #-1
 1317 0114 02D1     		bne	.L108
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1318              		.loc 1 876 0 is_stmt 0 discriminator 1
 1319 0116 0023     		movs	r3, #0
 1320 0118 84F84430 		strb	r3, [r4, #68]
 1321              	.L108:
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1322              		.loc 1 876 0 discriminator 3
 1323 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1324 0120 5BB2     		sxtb	r3, r3
 1325 0122 B3F1FF3F 		cmp	r3, #-1
 1326 0126 02D1     		bne	.L109
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1327              		.loc 1 876 0 discriminator 4
 1328 0128 0023     		movs	r3, #0
 1329 012a 84F84530 		strb	r3, [r4, #69]
 1330              	.L109:
 876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1331              		.loc 1 876 0 discriminator 6
 1332 012e FFF7FEFF 		bl	vPortExitCritical
 1333              	.LVL142:
 879:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1334              		.loc 1 879 0 is_stmt 1 discriminator 6
 1335 0132 01A9     		add	r1, sp, #4
 1336              	.LVL143:
 1337 0134 02A8     		add	r0, sp, #8
 1338 0136 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1339              	.LVL144:
 1340 013a F0B9     		cbnz	r0, .L110
 881:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1341              		.loc 1 881 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 71


 1342 013c 2046     		mov	r0, r4
 1343 013e FFF7FEFF 		bl	prvIsQueueFull
 1344              	.LVL145:
 1345 0142 A0B1     		cbz	r0, .L111
 884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1346              		.loc 1 884 0
 1347 0144 0199     		ldr	r1, [sp, #4]
 1348 0146 04F11000 		add	r0, r4, #16
 1349 014a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1350              	.LVL146:
 891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1351              		.loc 1 891 0
 1352 014e 2046     		mov	r0, r4
 1353 0150 FFF7FEFF 		bl	prvUnlockQueue
 1354              	.LVL147:
 898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 1355              		.loc 1 898 0
 1356 0154 FFF7FEFF 		bl	xTaskResumeAll
 1357              	.LVL148:
 1358 0158 0028     		cmp	r0, #0
 1359 015a 9BD1     		bne	.L99
 900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 1360              		.loc 1 900 0
 1361 015c 4FF08052 		mov	r2, #268435456
 1362 0160 0A4B     		ldr	r3, .L121
 1363 0162 1A60     		str	r2, [r3]
 1364              		.syntax unified
 1365              	@ 900 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1366 0164 BFF34F8F 		dsb
 1367              	@ 0 "" 2
 1368              	@ 900 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 1369 0168 BFF36F8F 		isb
 1370              	@ 0 "" 2
 1371              		.thumb
 1372              		.syntax unified
 1373 016c 92E7     		b	.L99
 1374              	.L111:
 906:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1375              		.loc 1 906 0
 1376 016e 2046     		mov	r0, r4
 1377 0170 FFF7FEFF 		bl	prvUnlockQueue
 1378              	.LVL149:
 907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1379              		.loc 1 907 0
 1380 0174 FFF7FEFF 		bl	xTaskResumeAll
 1381              	.LVL150:
 1382 0178 8CE7     		b	.L99
 1383              	.L110:
 913:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1384              		.loc 1 913 0
 1385 017a 2046     		mov	r0, r4
 1386 017c FFF7FEFF 		bl	prvUnlockQueue
 1387              	.LVL151:
 914:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1388              		.loc 1 914 0
 1389 0180 FFF7FEFF 		bl	xTaskResumeAll
 1390              	.LVL152:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 72


 917:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1391              		.loc 1 917 0
 1392 0184 0020     		movs	r0, #0
 1393              	.L105:
 920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1394              		.loc 1 920 0
 1395 0186 05B0     		add	sp, sp, #20
 1396              	.LCFI20:
 1397              		.cfi_def_cfa_offset 20
 1398              		@ sp needed
 1399 0188 F0BD     		pop	{r4, r5, r6, r7, pc}
 1400              	.LVL153:
 1401              	.L122:
 1402 018a 00BF     		.align	2
 1403              	.L121:
 1404 018c 04ED00E0 		.word	-536810236
 1405              		.cfi_endproc
 1406              	.LFE16:
 1408              		.section	.text.prvInitialiseMutex,"ax",%progbits
 1409              		.align	2
 1410              		.thumb
 1411              		.thumb_func
 1413              	prvInitialiseMutex:
 1414              	.LFB9:
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1415              		.loc 1 453 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 0, uses_anonymous_args = 0
 1419              	.LVL154:
 454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1420              		.loc 1 454 0
 1421 0000 48B1     		cbz	r0, .L126
 453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1422              		.loc 1 453 0
 1423 0002 08B5     		push	{r3, lr}
 1424              	.LCFI21:
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 3, -8
 1427              		.cfi_offset 14, -4
 460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1428              		.loc 1 460 0
 1429 0004 0021     		movs	r1, #0
 1430 0006 4160     		str	r1, [r0, #4]
 461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1431              		.loc 1 461 0
 1432 0008 0160     		str	r1, [r0]
 464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1433              		.loc 1 464 0
 1434 000a C160     		str	r1, [r0, #12]
 469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1435              		.loc 1 469 0
 1436 000c 0B46     		mov	r3, r1
 1437 000e 0A46     		mov	r2, r1
 1438 0010 FFF7FEFF 		bl	xQueueGenericSend
 1439              	.LVL155:
 1440 0014 08BD     		pop	{r3, pc}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 73


 1441              	.LVL156:
 1442              	.L126:
 1443              	.LCFI22:
 1444              		.cfi_def_cfa_offset 0
 1445              		.cfi_restore 3
 1446              		.cfi_restore 14
 1447 0016 7047     		bx	lr
 1448              		.cfi_endproc
 1449              	.LFE9:
 1451              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1452              		.align	2
 1453              		.global	xQueueCreateMutex
 1454              		.thumb
 1455              		.thumb_func
 1457              	xQueueCreateMutex:
 1458              	.LFB10:
 483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1459              		.loc 1 483 0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 0
 1462              		@ frame_needed = 0, uses_anonymous_args = 0
 1463              	.LVL157:
 1464 0000 10B5     		push	{r4, lr}
 1465              	.LCFI23:
 1466              		.cfi_def_cfa_offset 8
 1467              		.cfi_offset 4, -8
 1468              		.cfi_offset 14, -4
 1469              	.LVL158:
 487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1470              		.loc 1 487 0
 1471 0002 0246     		mov	r2, r0
 1472 0004 0021     		movs	r1, #0
 1473 0006 0120     		movs	r0, #1
 1474              	.LVL159:
 1475 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1476              	.LVL160:
 1477 000c 0446     		mov	r4, r0
 1478              	.LVL161:
 488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1479              		.loc 1 488 0
 1480 000e FFF7FEFF 		bl	prvInitialiseMutex
 1481              	.LVL162:
 491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1482              		.loc 1 491 0
 1483 0012 2046     		mov	r0, r4
 1484 0014 10BD     		pop	{r4, pc}
 1485              		.cfi_endproc
 1486              	.LFE10:
 1488 0016 00BF     		.section	.text.xQueueCreateMutexStatic,"ax",%progbits
 1489              		.align	2
 1490              		.global	xQueueCreateMutexStatic
 1491              		.thumb
 1492              		.thumb_func
 1494              	xQueueCreateMutexStatic:
 1495              	.LFB11:
 499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1496              		.loc 1 499 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 74


 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500              	.LVL163:
 1501 0000 10B5     		push	{r4, lr}
 1502              	.LCFI24:
 1503              		.cfi_def_cfa_offset 8
 1504              		.cfi_offset 4, -8
 1505              		.cfi_offset 14, -4
 1506 0002 82B0     		sub	sp, sp, #8
 1507              	.LCFI25:
 1508              		.cfi_def_cfa_offset 16
 1509              	.LVL164:
 507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1510              		.loc 1 507 0
 1511 0004 0090     		str	r0, [sp]
 1512 0006 0B46     		mov	r3, r1
 1513 0008 0022     		movs	r2, #0
 1514 000a 1146     		mov	r1, r2
 1515              	.LVL165:
 1516 000c 0120     		movs	r0, #1
 1517              	.LVL166:
 1518 000e FFF7FEFF 		bl	xQueueGenericCreateStatic
 1519              	.LVL167:
 1520 0012 0446     		mov	r4, r0
 1521              	.LVL168:
 508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1522              		.loc 1 508 0
 1523 0014 FFF7FEFF 		bl	prvInitialiseMutex
 1524              	.LVL169:
 511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1525              		.loc 1 511 0
 1526 0018 2046     		mov	r0, r4
 1527 001a 02B0     		add	sp, sp, #8
 1528              	.LCFI26:
 1529              		.cfi_def_cfa_offset 8
 1530              		@ sp needed
 1531 001c 10BD     		pop	{r4, pc}
 1532              		.cfi_endproc
 1533              	.LFE11:
 1535 001e 00BF     		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1536              		.align	2
 1537              		.global	xQueueGiveMutexRecursive
 1538              		.thumb
 1539              		.thumb_func
 1541              	xQueueGiveMutexRecursive:
 1542              	.LFB12:
 575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 1543              		.loc 1 575 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 0
 1546              		@ frame_needed = 0, uses_anonymous_args = 0
 1547              	.LVL170:
 1548 0000 38B5     		push	{r3, r4, r5, lr}
 1549              	.LCFI27:
 1550              		.cfi_def_cfa_offset 16
 1551              		.cfi_offset 3, -16
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 75


 1552              		.cfi_offset 4, -12
 1553              		.cfi_offset 5, -8
 1554              		.cfi_offset 14, -4
 1555              	.LVL171:
 579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1556              		.loc 1 579 0
 1557 0002 40B9     		cbnz	r0, .L132
 1558              	.LBB149:
 1559              	.LBB150:
 1560              		.loc 2 195 0
 1561              		.syntax unified
 1562              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1563 0004 4FF05003 			mov r3, #80												
 1564 0008 83F31188 		msr basepri, r3											
 1565 000c BFF36F8F 		isb														
 1566 0010 BFF34F8F 		dsb														
 1567              	
 1568              	@ 0 "" 2
 1569              	.LVL172:
 1570              		.thumb
 1571              		.syntax unified
 1572              	.L133:
 1573 0014 FEE7     		b	.L133
 1574              	.L132:
 1575 0016 0446     		mov	r4, r0
 1576              	.LBE150:
 1577              	.LBE149:
 587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1578              		.loc 1 587 0
 1579 0018 4568     		ldr	r5, [r0, #4]
 1580 001a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1581              	.LVL173:
 1582 001e 8542     		cmp	r5, r0
 1583 0020 0AD1     		bne	.L135
 596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1584              		.loc 1 596 0
 1585 0022 E368     		ldr	r3, [r4, #12]
 1586 0024 013B     		subs	r3, r3, #1
 1587 0026 E360     		str	r3, [r4, #12]
 599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1588              		.loc 1 599 0
 1589 0028 43B9     		cbnz	r3, .L136
 603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1590              		.loc 1 603 0
 1591 002a 1A46     		mov	r2, r3
 1592 002c 1946     		mov	r1, r3
 1593 002e 2046     		mov	r0, r4
 1594 0030 FFF7FEFF 		bl	xQueueGenericSend
 1595              	.LVL174:
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1596              		.loc 1 610 0
 1597 0034 0120     		movs	r0, #1
 1598 0036 38BD     		pop	{r3, r4, r5, pc}
 1599              	.LVL175:
 1600              	.L135:
 616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1601              		.loc 1 616 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 76


 1602 0038 0020     		movs	r0, #0
 1603 003a 38BD     		pop	{r3, r4, r5, pc}
 1604              	.LVL176:
 1605              	.L136:
 610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1606              		.loc 1 610 0
 1607 003c 0120     		movs	r0, #1
 1608              	.LVL177:
 622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1609              		.loc 1 622 0
 1610 003e 38BD     		pop	{r3, r4, r5, pc}
 1611              		.cfi_endproc
 1612              	.LFE12:
 1614              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1615              		.align	2
 1616              		.global	xQueueGenericSendFromISR
 1617              		.thumb
 1618              		.thumb_func
 1620              	xQueueGenericSendFromISR:
 1621              	.LFB17:
 924:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1622              		.loc 1 924 0
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 0
 1625              		@ frame_needed = 0, uses_anonymous_args = 0
 1626              	.LVL178:
 1627 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1628              	.LCFI28:
 1629              		.cfi_def_cfa_offset 32
 1630              		.cfi_offset 3, -32
 1631              		.cfi_offset 4, -28
 1632              		.cfi_offset 5, -24
 1633              		.cfi_offset 6, -20
 1634              		.cfi_offset 7, -16
 1635              		.cfi_offset 8, -12
 1636              		.cfi_offset 9, -8
 1637              		.cfi_offset 14, -4
 1638              	.LVL179:
 929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1639              		.loc 1 929 0
 1640 0004 40B9     		cbnz	r0, .L139
 1641              	.LBB151:
 1642              	.LBB152:
 1643              		.loc 2 195 0
 1644              		.syntax unified
 1645              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1646 0006 4FF05003 			mov r3, #80												
 1647 000a 83F31188 		msr basepri, r3											
 1648 000e BFF36F8F 		isb														
 1649 0012 BFF34F8F 		dsb														
 1650              	
 1651              	@ 0 "" 2
 1652              	.LVL180:
 1653              		.thumb
 1654              		.syntax unified
 1655              	.L140:
 1656 0016 FEE7     		b	.L140
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 77


 1657              	.LVL181:
 1658              	.L139:
 1659 0018 0446     		mov	r4, r0
 1660              	.LBE152:
 1661              	.LBE151:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1662              		.loc 1 930 0
 1663 001a 19B9     		cbnz	r1, .L150
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1664              		.loc 1 930 0 is_stmt 0 discriminator 2
 1665 001c 006C     		ldr	r0, [r0, #64]
 1666              	.LVL182:
 1667 001e 18B9     		cbnz	r0, .L151
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1668              		.loc 1 930 0
 1669 0020 0120     		movs	r0, #1
 1670 0022 02E0     		b	.L141
 1671              	.LVL183:
 1672              	.L150:
 1673 0024 0120     		movs	r0, #1
 1674              	.LVL184:
 1675 0026 00E0     		b	.L141
 1676              	.L151:
 1677 0028 0020     		movs	r0, #0
 1678              	.L141:
 930:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1679              		.loc 1 930 0 discriminator 6
 1680 002a 40B9     		cbnz	r0, .L142
 1681              	.LBB153:
 1682              	.LBB154:
 1683              		.loc 2 195 0 is_stmt 1
 1684              		.syntax unified
 1685              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1686 002c 4FF05003 			mov r3, #80												
 1687 0030 83F31188 		msr basepri, r3											
 1688 0034 BFF36F8F 		isb														
 1689 0038 BFF34F8F 		dsb														
 1690              	
 1691              	@ 0 "" 2
 1692              	.LVL185:
 1693              		.thumb
 1694              		.syntax unified
 1695              	.L143:
 1696 003c FEE7     		b	.L143
 1697              	.LVL186:
 1698              	.L142:
 1699              	.LBE154:
 1700              	.LBE153:
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1701              		.loc 1 931 0
 1702 003e 022B     		cmp	r3, #2
 1703 0040 03D1     		bne	.L152
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1704              		.loc 1 931 0 is_stmt 0 discriminator 2
 1705 0042 E06B     		ldr	r0, [r4, #60]
 1706 0044 0128     		cmp	r0, #1
 1707 0046 02D1     		bne	.L153
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 78


 1708 0048 02E0     		b	.L144
 1709              	.L152:
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1710              		.loc 1 931 0
 1711 004a 0120     		movs	r0, #1
 1712 004c 00E0     		b	.L144
 1713              	.L153:
 1714 004e 0020     		movs	r0, #0
 1715              	.L144:
 931:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1716              		.loc 1 931 0 discriminator 6
 1717 0050 40B9     		cbnz	r0, .L145
 1718              	.LBB155:
 1719              	.LBB156:
 1720              		.loc 2 195 0 is_stmt 1
 1721              		.syntax unified
 1722              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1723 0052 4FF05003 			mov r3, #80												
 1724 0056 83F31188 		msr basepri, r3											
 1725 005a BFF36F8F 		isb														
 1726 005e BFF34F8F 		dsb														
 1727              	
 1728              	@ 0 "" 2
 1729              	.LVL187:
 1730              		.thumb
 1731              		.syntax unified
 1732              	.L146:
 1733 0062 FEE7     		b	.L146
 1734              	.LVL188:
 1735              	.L145:
 1736 0064 1F46     		mov	r7, r3
 1737 0066 9046     		mov	r8, r2
 1738 0068 8946     		mov	r9, r1
 1739              	.LBE156:
 1740              	.LBE155:
 947:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1741              		.loc 1 947 0
 1742 006a FFF7FEFF 		bl	vPortValidateInterruptPriority
 1743              	.LVL189:
 1744              	.LBB157:
 1745              	.LBB158:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 79


 1746              		.loc 2 211 0
 1747              		.syntax unified
 1748              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1749 006e EFF31186 			mrs r6, basepri											
 1750 0072 4FF05003 		mov r3, #80												
 1751 0076 83F31188 		msr basepri, r3											
 1752 007a BFF36F8F 		isb														
 1753 007e BFF34F8F 		dsb														
 1754              	
 1755              	@ 0 "" 2
 1756              		.thumb
 1757              		.syntax unified
 1758              	.LBE158:
 1759              	.LBE157:
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1760              		.loc 1 956 0
 1761 0082 A26B     		ldr	r2, [r4, #56]
 1762 0084 E36B     		ldr	r3, [r4, #60]
 1763 0086 9A42     		cmp	r2, r3
 1764 0088 01D3     		bcc	.L147
 956:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1765              		.loc 1 956 0 is_stmt 0 discriminator 1
 1766 008a 022F     		cmp	r7, #2
 1767 008c 1ED1     		bne	.L154
 1768              	.L147:
 1769              	.LBB159:
 958:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1770              		.loc 1 958 0 is_stmt 1
 1771 008e 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1772 0092 6DB2     		sxtb	r5, r5
 1773              	.LVL190:
 967:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1774              		.loc 1 967 0
 1775 0094 3A46     		mov	r2, r7
 1776 0096 4946     		mov	r1, r9
 1777 0098 2046     		mov	r0, r4
 1778 009a FFF7FEFF 		bl	prvCopyDataToQueue
 1779              	.LVL191:
 971:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1780              		.loc 1 971 0
 1781 009e B5F1FF3F 		cmp	r5, #-1
 1782 00a2 0DD1     		bne	.L149
1026:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1783              		.loc 1 1026 0
 1784 00a4 636A     		ldr	r3, [r4, #36]
 1785 00a6 9BB1     		cbz	r3, .L155
1028:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1786              		.loc 1 1028 0
 1787 00a8 04F12400 		add	r0, r4, #36
 1788 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1789              	.LVL192:
 1790 00b0 80B1     		cbz	r0, .L156
1032:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1791              		.loc 1 1032 0
 1792 00b2 B8F1000F 		cmp	r8, #0
 1793 00b6 0FD0     		beq	.L157
1034:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 80


 1794              		.loc 1 1034 0
 1795 00b8 0120     		movs	r0, #1
 1796 00ba C8F80000 		str	r0, [r8]
 1797 00be 0CE0     		b	.L148
 1798              	.L149:
1057:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 1799              		.loc 1 1057 0
 1800 00c0 6B1C     		adds	r3, r5, #1
 1801 00c2 5BB2     		sxtb	r3, r3
 1802 00c4 84F84530 		strb	r3, [r4, #69]
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1803              		.loc 1 1060 0
 1804 00c8 0120     		movs	r0, #1
 1805 00ca 06E0     		b	.L148
 1806              	.LVL193:
 1807              	.L154:
 1808              	.LBE159:
1065:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1809              		.loc 1 1065 0
 1810 00cc 0020     		movs	r0, #0
 1811 00ce 04E0     		b	.L148
 1812              	.LVL194:
 1813              	.L155:
 1814              	.LBB160:
1060:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 1815              		.loc 1 1060 0
 1816 00d0 0120     		movs	r0, #1
 1817 00d2 02E0     		b	.L148
 1818              	.L156:
 1819 00d4 0120     		movs	r0, #1
 1820 00d6 00E0     		b	.L148
 1821              	.L157:
 1822 00d8 0120     		movs	r0, #1
 1823              	.LVL195:
 1824              	.L148:
 1825              	.LBE160:
 1826              	.LBB161:
 1827              	.LBB162:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1828              		.loc 2 229 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 81


 1829              		.syntax unified
 1830              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1831 00da 86F31188 			msr basepri, r6	
 1832              	@ 0 "" 2
 1833              	.LVL196:
 1834              		.thumb
 1835              		.syntax unified
 1836              	.LBE162:
 1837              	.LBE161:
1071:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1838              		.loc 1 1071 0
 1839 00de BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1840              		.cfi_endproc
 1841              	.LFE17:
 1843 00e2 00BF     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1844              		.align	2
 1845              		.global	xQueueGiveFromISR
 1846              		.thumb
 1847              		.thumb_func
 1849              	xQueueGiveFromISR:
 1850              	.LFB18:
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1851              		.loc 1 1075 0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 0
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 1855              	.LVL197:
1086:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1856              		.loc 1 1086 0
 1857 0000 40B9     		cbnz	r0, .L160
 1858              	.LBB163:
 1859              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1860              		.loc 2 195 0
 1861              		.syntax unified
 1862              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1863 0002 4FF05003 			mov r3, #80												
 1864 0006 83F31188 		msr basepri, r3											
 1865 000a BFF36F8F 		isb														
 1866 000e BFF34F8F 		dsb														
 1867              	
 1868              	@ 0 "" 2
 1869              	.LVL198:
 1870              		.thumb
 1871              		.syntax unified
 1872              	.L161:
 1873 0012 FEE7     		b	.L161
 1874              	.L160:
 1875              	.LBE164:
 1876              	.LBE163:
1075:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1877              		.loc 1 1075 0
 1878 0014 70B5     		push	{r4, r5, r6, lr}
 1879              	.LCFI29:
 1880              		.cfi_def_cfa_offset 16
 1881              		.cfi_offset 4, -16
 1882              		.cfi_offset 5, -12
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 82


 1883              		.cfi_offset 6, -8
 1884              		.cfi_offset 14, -4
 1885 0016 0446     		mov	r4, r0
1090:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1886              		.loc 1 1090 0
 1887 0018 036C     		ldr	r3, [r0, #64]
 1888 001a 43B1     		cbz	r3, .L162
 1889              	.LBB165:
 1890              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1891              		.loc 2 195 0
 1892              		.syntax unified
 1893              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1894 001c 4FF05003 			mov r3, #80												
 1895 0020 83F31188 		msr basepri, r3											
 1896 0024 BFF36F8F 		isb														
 1897 0028 BFF34F8F 		dsb														
 1898              	
 1899              	@ 0 "" 2
 1900              	.LVL199:
 1901              		.thumb
 1902              		.syntax unified
 1903              	.L163:
 1904 002c FEE7     		b	.L163
 1905              	.L162:
 1906              	.LBE166:
 1907              	.LBE165:
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1908              		.loc 1 1095 0
 1909 002e 0368     		ldr	r3, [r0]
 1910 0030 1BB9     		cbnz	r3, .L169
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1911              		.loc 1 1095 0 is_stmt 0 discriminator 2
 1912 0032 4368     		ldr	r3, [r0, #4]
 1913 0034 1BB9     		cbnz	r3, .L170
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1914              		.loc 1 1095 0
 1915 0036 0123     		movs	r3, #1
 1916 0038 02E0     		b	.L164
 1917              	.L169:
 1918 003a 0123     		movs	r3, #1
 1919 003c 00E0     		b	.L164
 1920              	.L170:
 1921 003e 0023     		movs	r3, #0
 1922              	.L164:
1095:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1923              		.loc 1 1095 0 discriminator 6
 1924 0040 43B9     		cbnz	r3, .L165
 1925              	.LBB167:
 1926              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1927              		.loc 2 195 0 is_stmt 1
 1928              		.syntax unified
 1929              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1930 0042 4FF05003 			mov r3, #80												
 1931 0046 83F31188 		msr basepri, r3											
 1932 004a BFF36F8F 		isb														
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 83


 1933 004e BFF34F8F 		dsb														
 1934              	
 1935              	@ 0 "" 2
 1936              	.LVL200:
 1937              		.thumb
 1938              		.syntax unified
 1939              	.L166:
 1940 0052 FEE7     		b	.L166
 1941              	.L165:
 1942 0054 0E46     		mov	r6, r1
 1943              	.LBE168:
 1944              	.LBE167:
1111:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1945              		.loc 1 1111 0
 1946 0056 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1947              	.LVL201:
 1948              	.LBB169:
 1949              	.LBB170:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1950              		.loc 2 211 0
 1951              		.syntax unified
 1952              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1953 005a EFF31185 			mrs r5, basepri											
 1954 005e 4FF05003 		mov r3, #80												
 1955 0062 83F31188 		msr basepri, r3											
 1956 0066 BFF36F8F 		isb														
 1957 006a BFF34F8F 		dsb														
 1958              	
 1959              	@ 0 "" 2
 1960              		.thumb
 1961              		.syntax unified
 1962              	.LBE170:
 1963              	.LBE169:
 1964              	.LBB171:
1115:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1965              		.loc 1 1115 0
 1966 006e A26B     		ldr	r2, [r4, #56]
 1967              	.LVL202:
1120:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 1968              		.loc 1 1120 0
 1969 0070 E36B     		ldr	r3, [r4, #60]
 1970 0072 9A42     		cmp	r2, r3
 1971 0074 18D2     		bcs	.L171
 1972              	.LBB172:
1122:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1973              		.loc 1 1122 0
 1974 0076 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1975 007a 5BB2     		sxtb	r3, r3
 1976              	.LVL203:
1132:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 1977              		.loc 1 1132 0
 1978 007c 0132     		adds	r2, r2, #1
 1979              	.LVL204:
 1980 007e A263     		str	r2, [r4, #56]
1136:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 1981              		.loc 1 1136 0
 1982 0080 B3F1FF3F 		cmp	r3, #-1
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 84


 1983 0084 0AD1     		bne	.L168
1191:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 1984              		.loc 1 1191 0
 1985 0086 636A     		ldr	r3, [r4, #36]
 1986              	.LVL205:
 1987 0088 83B1     		cbz	r3, .L172
1193:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 1988              		.loc 1 1193 0
 1989 008a 04F12400 		add	r0, r4, #36
 1990 008e FFF7FEFF 		bl	xTaskRemoveFromEventList
 1991              	.LVL206:
 1992 0092 68B1     		cbz	r0, .L173
1197:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							{
 1993              		.loc 1 1197 0
 1994 0094 76B1     		cbz	r6, .L174
1199:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							}
 1995              		.loc 1 1199 0
 1996 0096 0120     		movs	r0, #1
 1997 0098 3060     		str	r0, [r6]
 1998 009a 0CE0     		b	.L167
 1999              	.LVL207:
 2000              	.L168:
1222:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2001              		.loc 1 1222 0
 2002 009c 0133     		adds	r3, r3, #1
 2003              	.LVL208:
 2004 009e 5BB2     		sxtb	r3, r3
 2005              	.LVL209:
 2006 00a0 84F84530 		strb	r3, [r4, #69]
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2007              		.loc 1 1225 0
 2008 00a4 0120     		movs	r0, #1
 2009 00a6 06E0     		b	.L167
 2010              	.LVL210:
 2011              	.L171:
 2012              	.LBE172:
1230:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2013              		.loc 1 1230 0
 2014 00a8 0020     		movs	r0, #0
 2015 00aa 04E0     		b	.L167
 2016              	.LVL211:
 2017              	.L172:
 2018              	.LBB173:
1225:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2019              		.loc 1 1225 0
 2020 00ac 0120     		movs	r0, #1
 2021 00ae 02E0     		b	.L167
 2022              	.LVL212:
 2023              	.L173:
 2024 00b0 0120     		movs	r0, #1
 2025 00b2 00E0     		b	.L167
 2026              	.L174:
 2027 00b4 0120     		movs	r0, #1
 2028              	.L167:
 2029              	.LVL213:
 2030              	.LBE173:
 2031              	.LBE171:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 85


 2032              	.LBB174:
 2033              	.LBB175:
 2034              		.loc 2 229 0
 2035              		.syntax unified
 2036              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2037 00b6 85F31188 			msr basepri, r5	
 2038              	@ 0 "" 2
 2039              	.LVL214:
 2040              		.thumb
 2041              		.syntax unified
 2042              	.LBE175:
 2043              	.LBE174:
1236:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2044              		.loc 1 1236 0
 2045 00ba 70BD     		pop	{r4, r5, r6, pc}
 2046              		.cfi_endproc
 2047              	.LFE18:
 2049              		.section	.text.xQueueReceive,"ax",%progbits
 2050              		.align	2
 2051              		.global	xQueueReceive
 2052              		.thumb
 2053              		.thumb_func
 2055              	xQueueReceive:
 2056              	.LFB19:
1240:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2057              		.loc 1 1240 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 16
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              	.LVL215:
 2062 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2063              	.LCFI30:
 2064              		.cfi_def_cfa_offset 20
 2065              		.cfi_offset 4, -20
 2066              		.cfi_offset 5, -16
 2067              		.cfi_offset 6, -12
 2068              		.cfi_offset 7, -8
 2069              		.cfi_offset 14, -4
 2070 0002 85B0     		sub	sp, sp, #20
 2071              	.LCFI31:
 2072              		.cfi_def_cfa_offset 40
 2073 0004 0192     		str	r2, [sp, #4]
 2074              	.LVL216:
1246:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2075              		.loc 1 1246 0
 2076 0006 40B9     		cbnz	r0, .L177
 2077              	.LBB176:
 2078              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2079              		.loc 2 195 0
 2080              		.syntax unified
 2081              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2082 0008 4FF05003 			mov r3, #80												
 2083 000c 83F31188 		msr basepri, r3											
 2084 0010 BFF36F8F 		isb														
 2085 0014 BFF34F8F 		dsb														
 2086              	
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 86


 2087              	@ 0 "" 2
 2088              	.LVL217:
 2089              		.thumb
 2090              		.syntax unified
 2091              	.L178:
 2092 0018 FEE7     		b	.L178
 2093              	.L177:
 2094 001a 0446     		mov	r4, r0
 2095              	.LBE177:
 2096              	.LBE176:
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2097              		.loc 1 1250 0
 2098 001c 19B9     		cbnz	r1, .L195
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2099              		.loc 1 1250 0 is_stmt 0 discriminator 2
 2100 001e 036C     		ldr	r3, [r0, #64]
 2101 0020 1BB9     		cbnz	r3, .L196
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2102              		.loc 1 1250 0
 2103 0022 0123     		movs	r3, #1
 2104 0024 02E0     		b	.L179
 2105              	.L195:
 2106 0026 0123     		movs	r3, #1
 2107 0028 00E0     		b	.L179
 2108              	.L196:
 2109 002a 0023     		movs	r3, #0
 2110              	.L179:
1250:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2111              		.loc 1 1250 0 discriminator 6
 2112 002c 43B9     		cbnz	r3, .L180
 2113              	.LBB178:
 2114              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2115              		.loc 2 195 0 is_stmt 1
 2116              		.syntax unified
 2117              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2118 002e 4FF05003 			mov r3, #80												
 2119 0032 83F31188 		msr basepri, r3											
 2120 0036 BFF36F8F 		isb														
 2121 003a BFF34F8F 		dsb														
 2122              	
 2123              	@ 0 "" 2
 2124              	.LVL218:
 2125              		.thumb
 2126              		.syntax unified
 2127              	.L181:
 2128 003e FEE7     		b	.L181
 2129              	.L180:
 2130 0040 0E46     		mov	r6, r1
 2131              	.LBE179:
 2132              	.LBE178:
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2133              		.loc 1 1255 0
 2134 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 2135              	.LVL219:
 2136 0046 18B9     		cbnz	r0, .L197
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 87


 2137              		.loc 1 1255 0 is_stmt 0 discriminator 2
 2138 0048 019B     		ldr	r3, [sp, #4]
 2139 004a 1BB9     		cbnz	r3, .L198
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2140              		.loc 1 1255 0
 2141 004c 0123     		movs	r3, #1
 2142 004e 02E0     		b	.L182
 2143              	.L197:
 2144 0050 0123     		movs	r3, #1
 2145 0052 00E0     		b	.L182
 2146              	.L198:
 2147 0054 0023     		movs	r3, #0
 2148              	.L182:
1255:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2149              		.loc 1 1255 0 discriminator 6
 2150 0056 43B9     		cbnz	r3, .L199
 2151              	.LBB180:
 2152              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2153              		.loc 2 195 0 is_stmt 1
 2154              		.syntax unified
 2155              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2156 0058 4FF05003 			mov r3, #80												
 2157 005c 83F31188 		msr basepri, r3											
 2158 0060 BFF36F8F 		isb														
 2159 0064 BFF34F8F 		dsb														
 2160              	
 2161              	@ 0 "" 2
 2162              	.LVL220:
 2163              		.thumb
 2164              		.syntax unified
 2165              	.L184:
 2166 0068 FEE7     		b	.L184
 2167              	.L199:
 2168              	.LBE181:
 2169              	.LBE180:
 2170 006a 0027     		movs	r7, #0
 2171              	.LVL221:
 2172              	.L183:
1265:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2173              		.loc 1 1265 0
 2174 006c FFF7FEFF 		bl	vPortEnterCritical
 2175              	.LVL222:
 2176              	.LBB182:
1267:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2177              		.loc 1 1267 0
 2178 0070 A56B     		ldr	r5, [r4, #56]
 2179              	.LVL223:
1271:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2180              		.loc 1 1271 0
 2181 0072 C5B1     		cbz	r5, .L185
1274:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 2182              		.loc 1 1274 0
 2183 0074 3146     		mov	r1, r6
 2184 0076 2046     		mov	r0, r4
 2185 0078 FFF7FEFF 		bl	prvCopyDataFromQueue
 2186              	.LVL224:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 88


1276:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2187              		.loc 1 1276 0
 2188 007c 013D     		subs	r5, r5, #1
 2189              	.LVL225:
 2190 007e A563     		str	r5, [r4, #56]
1281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2191              		.loc 1 1281 0
 2192 0080 2369     		ldr	r3, [r4, #16]
 2193 0082 63B1     		cbz	r3, .L186
1283:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2194              		.loc 1 1283 0
 2195 0084 04F11000 		add	r0, r4, #16
 2196 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2197              	.LVL226:
 2198 008c 38B1     		cbz	r0, .L186
1285:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2199              		.loc 1 1285 0
 2200 008e 4FF08052 		mov	r2, #268435456
 2201 0092 304B     		ldr	r3, .L201
 2202 0094 1A60     		str	r2, [r3]
 2203              		.syntax unified
 2204              	@ 1285 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2205 0096 BFF34F8F 		dsb
 2206              	@ 0 "" 2
 2207              	@ 1285 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2208 009a BFF36F8F 		isb
 2209              	@ 0 "" 2
 2210              		.thumb
 2211              		.syntax unified
 2212              	.L186:
1297:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2213              		.loc 1 1297 0
 2214 009e FFF7FEFF 		bl	vPortExitCritical
 2215              	.LVL227:
1298:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2216              		.loc 1 1298 0
 2217 00a2 0120     		movs	r0, #1
 2218 00a4 53E0     		b	.L187
 2219              	.LVL228:
 2220              	.L185:
1302:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2221              		.loc 1 1302 0
 2222 00a6 019B     		ldr	r3, [sp, #4]
 2223 00a8 1BB9     		cbnz	r3, .L188
1306:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2224              		.loc 1 1306 0
 2225 00aa FFF7FEFF 		bl	vPortExitCritical
 2226              	.LVL229:
1308:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2227              		.loc 1 1308 0
 2228 00ae 0020     		movs	r0, #0
 2229 00b0 4DE0     		b	.L187
 2230              	.L188:
1310:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2231              		.loc 1 1310 0
 2232 00b2 1FB9     		cbnz	r7, .L189
1314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 89


 2233              		.loc 1 1314 0
 2234 00b4 02A8     		add	r0, sp, #8
 2235 00b6 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2236              	.LVL230:
1315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2237              		.loc 1 1315 0
 2238 00ba 0127     		movs	r7, #1
 2239              	.LVL231:
 2240              	.L189:
 2241              	.LBE182:
1324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2242              		.loc 1 1324 0
 2243 00bc FFF7FEFF 		bl	vPortExitCritical
 2244              	.LVL232:
1329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2245              		.loc 1 1329 0
 2246 00c0 FFF7FEFF 		bl	vTaskSuspendAll
 2247              	.LVL233:
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2248              		.loc 1 1330 0
 2249 00c4 FFF7FEFF 		bl	vPortEnterCritical
 2250              	.LVL234:
 2251 00c8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2252 00cc 5BB2     		sxtb	r3, r3
 2253 00ce B3F1FF3F 		cmp	r3, #-1
 2254 00d2 02D1     		bne	.L190
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2255              		.loc 1 1330 0 is_stmt 0 discriminator 1
 2256 00d4 0023     		movs	r3, #0
 2257 00d6 84F84430 		strb	r3, [r4, #68]
 2258              	.L190:
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2259              		.loc 1 1330 0 discriminator 3
 2260 00da 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2261 00de 5BB2     		sxtb	r3, r3
 2262 00e0 B3F1FF3F 		cmp	r3, #-1
 2263 00e4 02D1     		bne	.L191
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2264              		.loc 1 1330 0 discriminator 4
 2265 00e6 0023     		movs	r3, #0
 2266 00e8 84F84530 		strb	r3, [r4, #69]
 2267              	.L191:
1330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2268              		.loc 1 1330 0 discriminator 6
 2269 00ec FFF7FEFF 		bl	vPortExitCritical
 2270              	.LVL235:
1333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2271              		.loc 1 1333 0 is_stmt 1 discriminator 6
 2272 00f0 01A9     		add	r1, sp, #4
 2273              	.LVL236:
 2274 00f2 02A8     		add	r0, sp, #8
 2275 00f4 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2276              	.LVL237:
 2277 00f8 F0B9     		cbnz	r0, .L192
1337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2278              		.loc 1 1337 0
 2279 00fa 2046     		mov	r0, r4
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 90


 2280 00fc FFF7FEFF 		bl	prvIsQueueEmpty
 2281              	.LVL238:
 2282 0100 A0B1     		cbz	r0, .L193
1340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2283              		.loc 1 1340 0
 2284 0102 0199     		ldr	r1, [sp, #4]
 2285 0104 04F12400 		add	r0, r4, #36
 2286 0108 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2287              	.LVL239:
1341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2288              		.loc 1 1341 0
 2289 010c 2046     		mov	r0, r4
 2290 010e FFF7FEFF 		bl	prvUnlockQueue
 2291              	.LVL240:
1342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2292              		.loc 1 1342 0
 2293 0112 FFF7FEFF 		bl	xTaskResumeAll
 2294              	.LVL241:
 2295 0116 0028     		cmp	r0, #0
 2296 0118 A8D1     		bne	.L183
1344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2297              		.loc 1 1344 0
 2298 011a 4FF08052 		mov	r2, #268435456
 2299 011e 0D4B     		ldr	r3, .L201
 2300 0120 1A60     		str	r2, [r3]
 2301              		.syntax unified
 2302              	@ 1344 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2303 0122 BFF34F8F 		dsb
 2304              	@ 0 "" 2
 2305              	@ 1344 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2306 0126 BFF36F8F 		isb
 2307              	@ 0 "" 2
 2308              		.thumb
 2309              		.syntax unified
 2310 012a 9FE7     		b	.L183
 2311              	.L193:
1355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2312              		.loc 1 1355 0
 2313 012c 2046     		mov	r0, r4
 2314 012e FFF7FEFF 		bl	prvUnlockQueue
 2315              	.LVL242:
1356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2316              		.loc 1 1356 0
 2317 0132 FFF7FEFF 		bl	xTaskResumeAll
 2318              	.LVL243:
 2319 0136 99E7     		b	.L183
 2320              	.L192:
1363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2321              		.loc 1 1363 0
 2322 0138 2046     		mov	r0, r4
 2323 013a FFF7FEFF 		bl	prvUnlockQueue
 2324              	.LVL244:
1364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2325              		.loc 1 1364 0
 2326 013e FFF7FEFF 		bl	xTaskResumeAll
 2327              	.LVL245:
1366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 91


 2328              		.loc 1 1366 0
 2329 0142 2046     		mov	r0, r4
 2330 0144 FFF7FEFF 		bl	prvIsQueueEmpty
 2331              	.LVL246:
 2332 0148 0028     		cmp	r0, #0
 2333 014a 8FD0     		beq	.L183
1369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2334              		.loc 1 1369 0
 2335 014c 0020     		movs	r0, #0
 2336              	.LVL247:
 2337              	.L187:
1377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2338              		.loc 1 1377 0
 2339 014e 05B0     		add	sp, sp, #20
 2340              	.LCFI32:
 2341              		.cfi_def_cfa_offset 20
 2342              		@ sp needed
 2343 0150 F0BD     		pop	{r4, r5, r6, r7, pc}
 2344              	.LVL248:
 2345              	.L202:
 2346 0152 00BF     		.align	2
 2347              	.L201:
 2348 0154 04ED00E0 		.word	-536810236
 2349              		.cfi_endproc
 2350              	.LFE19:
 2352              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2353              		.align	2
 2354              		.global	xQueueSemaphoreTake
 2355              		.thumb
 2356              		.thumb_func
 2358              	xQueueSemaphoreTake:
 2359              	.LFB20:
1381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2360              		.loc 1 1381 0
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 16
 2363              		@ frame_needed = 0, uses_anonymous_args = 0
 2364              	.LVL249:
 2365 0000 70B5     		push	{r4, r5, r6, lr}
 2366              	.LCFI33:
 2367              		.cfi_def_cfa_offset 16
 2368              		.cfi_offset 4, -16
 2369              		.cfi_offset 5, -12
 2370              		.cfi_offset 6, -8
 2371              		.cfi_offset 14, -4
 2372 0002 84B0     		sub	sp, sp, #16
 2373              	.LCFI34:
 2374              		.cfi_def_cfa_offset 32
 2375 0004 0191     		str	r1, [sp, #4]
 2376              	.LVL250:
1391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2377              		.loc 1 1391 0
 2378 0006 40B9     		cbnz	r0, .L204
 2379              	.LBB183:
 2380              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2381              		.loc 2 195 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 92


 2382              		.syntax unified
 2383              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2384 0008 4FF05003 			mov r3, #80												
 2385 000c 83F31188 		msr basepri, r3											
 2386 0010 BFF36F8F 		isb														
 2387 0014 BFF34F8F 		dsb														
 2388              	
 2389              	@ 0 "" 2
 2390              	.LVL251:
 2391              		.thumb
 2392              		.syntax unified
 2393              	.L205:
 2394 0018 FEE7     		b	.L205
 2395              	.L204:
 2396 001a 0446     		mov	r4, r0
 2397              	.LBE184:
 2398              	.LBE183:
1395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2399              		.loc 1 1395 0
 2400 001c 036C     		ldr	r3, [r0, #64]
 2401 001e 43B1     		cbz	r3, .L206
 2402              	.LBB185:
 2403              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2404              		.loc 2 195 0
 2405              		.syntax unified
 2406              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2407 0020 4FF05003 			mov r3, #80												
 2408 0024 83F31188 		msr basepri, r3											
 2409 0028 BFF36F8F 		isb														
 2410 002c BFF34F8F 		dsb														
 2411              	
 2412              	@ 0 "" 2
 2413              	.LVL252:
 2414              		.thumb
 2415              		.syntax unified
 2416              	.L207:
 2417 0030 FEE7     		b	.L207
 2418              	.L206:
 2419              	.LBE186:
 2420              	.LBE185:
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2421              		.loc 1 1400 0
 2422 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 2423              	.LVL253:
 2424 0036 18B9     		cbnz	r0, .L225
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2425              		.loc 1 1400 0 is_stmt 0 discriminator 2
 2426 0038 019B     		ldr	r3, [sp, #4]
 2427 003a 1BB9     		cbnz	r3, .L226
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2428              		.loc 1 1400 0
 2429 003c 0123     		movs	r3, #1
 2430 003e 02E0     		b	.L208
 2431              	.L225:
 2432 0040 0123     		movs	r3, #1
 2433 0042 00E0     		b	.L208
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 93


 2434              	.L226:
 2435 0044 0023     		movs	r3, #0
 2436              	.L208:
1400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2437              		.loc 1 1400 0 discriminator 6
 2438 0046 43B9     		cbnz	r3, .L227
 2439              	.LBB187:
 2440              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2441              		.loc 2 195 0 is_stmt 1
 2442              		.syntax unified
 2443              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2444 0048 4FF05003 			mov r3, #80												
 2445 004c 83F31188 		msr basepri, r3											
 2446 0050 BFF36F8F 		isb														
 2447 0054 BFF34F8F 		dsb														
 2448              	
 2449              	@ 0 "" 2
 2450              	.LVL254:
 2451              		.thumb
 2452              		.syntax unified
 2453              	.L210:
 2454 0058 FEE7     		b	.L210
 2455              	.L227:
 2456              	.LBE188:
 2457              	.LBE187:
 2458 005a 0025     		movs	r5, #0
 2459 005c 2E46     		mov	r6, r5
 2460              	.LVL255:
 2461              	.L209:
1411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2462              		.loc 1 1411 0
 2463 005e FFF7FEFF 		bl	vPortEnterCritical
 2464              	.LVL256:
 2465              	.LBB189:
1415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2466              		.loc 1 1415 0
 2467 0062 A36B     		ldr	r3, [r4, #56]
 2468              	.LVL257:
1419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2469              		.loc 1 1419 0
 2470 0064 CBB1     		cbz	r3, .L211
1425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2471              		.loc 1 1425 0
 2472 0066 013B     		subs	r3, r3, #1
 2473              	.LVL258:
 2474 0068 A363     		str	r3, [r4, #56]
1429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2475              		.loc 1 1429 0
 2476 006a 2368     		ldr	r3, [r4]
 2477              	.LVL259:
 2478 006c 13B9     		cbnz	r3, .L212
1433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2479              		.loc 1 1433 0
 2480 006e FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2481              	.LVL260:
 2482 0072 6060     		str	r0, [r4, #4]
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 94


 2483              	.L212:
1444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2484              		.loc 1 1444 0
 2485 0074 2369     		ldr	r3, [r4, #16]
 2486 0076 63B1     		cbz	r3, .L213
1446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2487              		.loc 1 1446 0
 2488 0078 04F11000 		add	r0, r4, #16
 2489 007c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2490              	.LVL261:
 2491 0080 38B1     		cbz	r0, .L213
1448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2492              		.loc 1 1448 0
 2493 0082 4FF08052 		mov	r2, #268435456
 2494 0086 414B     		ldr	r3, .L230
 2495 0088 1A60     		str	r2, [r3]
 2496              		.syntax unified
 2497              	@ 1448 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2498 008a BFF34F8F 		dsb
 2499              	@ 0 "" 2
 2500              	@ 1448 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2501 008e BFF36F8F 		isb
 2502              	@ 0 "" 2
 2503              		.thumb
 2504              		.syntax unified
 2505              	.L213:
1460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2506              		.loc 1 1460 0
 2507 0092 FFF7FEFF 		bl	vPortExitCritical
 2508              	.LVL262:
1461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2509              		.loc 1 1461 0
 2510 0096 0120     		movs	r0, #1
 2511 0098 76E0     		b	.L214
 2512              	.LVL263:
 2513              	.L211:
1465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2514              		.loc 1 1465 0
 2515 009a 019B     		ldr	r3, [sp, #4]
 2516              	.LVL264:
 2517 009c 6BB9     		cbnz	r3, .L215
1472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2518              		.loc 1 1472 0
 2519 009e 45B1     		cbz	r5, .L216
 2520              	.LBB190:
 2521              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2522              		.loc 2 195 0
 2523              		.syntax unified
 2524              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2525 00a0 4FF05003 			mov r3, #80												
 2526 00a4 83F31188 		msr basepri, r3											
 2527 00a8 BFF36F8F 		isb														
 2528 00ac BFF34F8F 		dsb														
 2529              	
 2530              	@ 0 "" 2
 2531              	.LVL265:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 95


 2532              		.thumb
 2533              		.syntax unified
 2534              	.L217:
 2535 00b0 FEE7     		b	.L217
 2536              	.L216:
 2537              	.LBE191:
 2538              	.LBE190:
1478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2539              		.loc 1 1478 0
 2540 00b2 FFF7FEFF 		bl	vPortExitCritical
 2541              	.LVL266:
1480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2542              		.loc 1 1480 0
 2543 00b6 0020     		movs	r0, #0
 2544 00b8 66E0     		b	.L214
 2545              	.L215:
1482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2546              		.loc 1 1482 0
 2547 00ba 1EB9     		cbnz	r6, .L218
1486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2548              		.loc 1 1486 0
 2549 00bc 02A8     		add	r0, sp, #8
 2550 00be FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2551              	.LVL267:
1487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2552              		.loc 1 1487 0
 2553 00c2 0126     		movs	r6, #1
 2554              	.LVL268:
 2555              	.L218:
 2556              	.LBE189:
1496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2557              		.loc 1 1496 0
 2558 00c4 FFF7FEFF 		bl	vPortExitCritical
 2559              	.LVL269:
1501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2560              		.loc 1 1501 0
 2561 00c8 FFF7FEFF 		bl	vTaskSuspendAll
 2562              	.LVL270:
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2563              		.loc 1 1502 0
 2564 00cc FFF7FEFF 		bl	vPortEnterCritical
 2565              	.LVL271:
 2566 00d0 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2567 00d4 5BB2     		sxtb	r3, r3
 2568 00d6 B3F1FF3F 		cmp	r3, #-1
 2569 00da 02D1     		bne	.L219
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2570              		.loc 1 1502 0 is_stmt 0 discriminator 1
 2571 00dc 0023     		movs	r3, #0
 2572 00de 84F84430 		strb	r3, [r4, #68]
 2573              	.L219:
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2574              		.loc 1 1502 0 discriminator 3
 2575 00e2 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2576 00e6 5BB2     		sxtb	r3, r3
 2577 00e8 B3F1FF3F 		cmp	r3, #-1
 2578 00ec 02D1     		bne	.L220
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 96


1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2579              		.loc 1 1502 0 discriminator 4
 2580 00ee 0023     		movs	r3, #0
 2581 00f0 84F84530 		strb	r3, [r4, #69]
 2582              	.L220:
1502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2583              		.loc 1 1502 0 discriminator 6
 2584 00f4 FFF7FEFF 		bl	vPortExitCritical
 2585              	.LVL272:
1505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2586              		.loc 1 1505 0 is_stmt 1 discriminator 6
 2587 00f8 01A9     		add	r1, sp, #4
 2588              	.LVL273:
 2589 00fa 02A8     		add	r0, sp, #8
 2590 00fc FFF7FEFF 		bl	xTaskCheckForTimeOut
 2591              	.LVL274:
 2592 0100 40BB     		cbnz	r0, .L221
1511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2593              		.loc 1 1511 0
 2594 0102 2046     		mov	r0, r4
 2595 0104 FFF7FEFF 		bl	prvIsQueueEmpty
 2596              	.LVL275:
 2597 0108 F0B1     		cbz	r0, .L222
1517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2598              		.loc 1 1517 0
 2599 010a 2368     		ldr	r3, [r4]
 2600 010c 3BB9     		cbnz	r3, .L223
1519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2601              		.loc 1 1519 0
 2602 010e FFF7FEFF 		bl	vPortEnterCritical
 2603              	.LVL276:
1521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2604              		.loc 1 1521 0
 2605 0112 6068     		ldr	r0, [r4, #4]
 2606 0114 FFF7FEFF 		bl	xTaskPriorityInherit
 2607              	.LVL277:
 2608 0118 0546     		mov	r5, r0
 2609              	.LVL278:
1523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2610              		.loc 1 1523 0
 2611 011a FFF7FEFF 		bl	vPortExitCritical
 2612              	.LVL279:
 2613              	.L223:
1532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2614              		.loc 1 1532 0
 2615 011e 0199     		ldr	r1, [sp, #4]
 2616 0120 04F12400 		add	r0, r4, #36
 2617 0124 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2618              	.LVL280:
1533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2619              		.loc 1 1533 0
 2620 0128 2046     		mov	r0, r4
 2621 012a FFF7FEFF 		bl	prvUnlockQueue
 2622              	.LVL281:
1534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2623              		.loc 1 1534 0
 2624 012e FFF7FEFF 		bl	xTaskResumeAll
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 97


 2625              	.LVL282:
 2626 0132 0028     		cmp	r0, #0
 2627 0134 93D1     		bne	.L209
1536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2628              		.loc 1 1536 0
 2629 0136 4FF08052 		mov	r2, #268435456
 2630 013a 144B     		ldr	r3, .L230
 2631 013c 1A60     		str	r2, [r3]
 2632              		.syntax unified
 2633              	@ 1536 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2634 013e BFF34F8F 		dsb
 2635              	@ 0 "" 2
 2636              	@ 1536 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2637 0142 BFF36F8F 		isb
 2638              	@ 0 "" 2
 2639              		.thumb
 2640              		.syntax unified
 2641 0146 8AE7     		b	.L209
 2642              	.L222:
1547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2643              		.loc 1 1547 0
 2644 0148 2046     		mov	r0, r4
 2645 014a FFF7FEFF 		bl	prvUnlockQueue
 2646              	.LVL283:
1548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2647              		.loc 1 1548 0
 2648 014e FFF7FEFF 		bl	xTaskResumeAll
 2649              	.LVL284:
 2650 0152 84E7     		b	.L209
 2651              	.L221:
1554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2652              		.loc 1 1554 0
 2653 0154 2046     		mov	r0, r4
 2654 0156 FFF7FEFF 		bl	prvUnlockQueue
 2655              	.LVL285:
1555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2656              		.loc 1 1555 0
 2657 015a FFF7FEFF 		bl	xTaskResumeAll
 2658              	.LVL286:
1561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2659              		.loc 1 1561 0
 2660 015e 2046     		mov	r0, r4
 2661 0160 FFF7FEFF 		bl	prvIsQueueEmpty
 2662              	.LVL287:
 2663 0164 0028     		cmp	r0, #0
 2664 0166 3FF47AAF 		beq	.L209
1568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2665              		.loc 1 1568 0
 2666 016a 65B1     		cbz	r5, .L228
1570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 2667              		.loc 1 1570 0
 2668 016c FFF7FEFF 		bl	vPortEnterCritical
 2669              	.LVL288:
 2670              	.LBB192:
1579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
 2671              		.loc 1 1579 0
 2672 0170 2046     		mov	r0, r4
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 98


 2673 0172 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2674              	.LVL289:
1580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 2675              		.loc 1 1580 0
 2676 0176 0146     		mov	r1, r0
 2677 0178 6068     		ldr	r0, [r4, #4]
 2678              	.LVL290:
 2679 017a FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2680              	.LVL291:
 2681              	.LBE192:
1582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2682              		.loc 1 1582 0
 2683 017e FFF7FEFF 		bl	vPortExitCritical
 2684              	.LVL292:
1588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2685              		.loc 1 1588 0
 2686 0182 0020     		movs	r0, #0
 2687 0184 00E0     		b	.L214
 2688              	.L228:
 2689 0186 0020     		movs	r0, #0
 2690              	.L214:
1596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2691              		.loc 1 1596 0
 2692 0188 04B0     		add	sp, sp, #16
 2693              	.LCFI35:
 2694              		.cfi_def_cfa_offset 16
 2695              		@ sp needed
 2696 018a 70BD     		pop	{r4, r5, r6, pc}
 2697              	.LVL293:
 2698              	.L231:
 2699              		.align	2
 2700              	.L230:
 2701 018c 04ED00E0 		.word	-536810236
 2702              		.cfi_endproc
 2703              	.LFE20:
 2705              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2706              		.align	2
 2707              		.global	xQueueTakeMutexRecursive
 2708              		.thumb
 2709              		.thumb_func
 2711              	xQueueTakeMutexRecursive:
 2712              	.LFB13:
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 2713              		.loc 1 630 0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 0
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              	.LVL294:
 634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2718              		.loc 1 634 0
 2719 0000 40B9     		cbnz	r0, .L233
 2720              	.LBB193:
 2721              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2722              		.loc 2 195 0
 2723              		.syntax unified
 2724              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 99


 2725 0002 4FF05003 			mov r3, #80												
 2726 0006 83F31188 		msr basepri, r3											
 2727 000a BFF36F8F 		isb														
 2728 000e BFF34F8F 		dsb														
 2729              	
 2730              	@ 0 "" 2
 2731              	.LVL295:
 2732              		.thumb
 2733              		.syntax unified
 2734              	.L234:
 2735 0012 FEE7     		b	.L234
 2736              	.L233:
 2737              	.LBE194:
 2738              	.LBE193:
 630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 2739              		.loc 1 630 0
 2740 0014 70B5     		push	{r4, r5, r6, lr}
 2741              	.LCFI36:
 2742              		.cfi_def_cfa_offset 16
 2743              		.cfi_offset 4, -16
 2744              		.cfi_offset 5, -12
 2745              		.cfi_offset 6, -8
 2746              		.cfi_offset 14, -4
 2747 0016 0446     		mov	r4, r0
 2748 0018 0D46     		mov	r5, r1
 641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2749              		.loc 1 641 0
 2750 001a 4668     		ldr	r6, [r0, #4]
 2751 001c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2752              	.LVL296:
 2753 0020 8642     		cmp	r6, r0
 2754 0022 04D1     		bne	.L235
 643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2755              		.loc 1 643 0
 2756 0024 E368     		ldr	r3, [r4, #12]
 2757 0026 0133     		adds	r3, r3, #1
 2758 0028 E360     		str	r3, [r4, #12]
 2759              	.LVL297:
 644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 2760              		.loc 1 644 0
 2761 002a 0122     		movs	r2, #1
 2762 002c 08E0     		b	.L236
 2763              	.LVL298:
 2764              	.L235:
 648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2765              		.loc 1 648 0
 2766 002e 2946     		mov	r1, r5
 2767 0030 2046     		mov	r0, r4
 2768 0032 FFF7FEFF 		bl	xQueueSemaphoreTake
 2769              	.LVL299:
 653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2770              		.loc 1 653 0
 2771 0036 0246     		mov	r2, r0
 2772 0038 10B1     		cbz	r0, .L236
 655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2773              		.loc 1 655 0
 2774 003a E368     		ldr	r3, [r4, #12]
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 100


 2775 003c 0133     		adds	r3, r3, #1
 2776 003e E360     		str	r3, [r4, #12]
 2777              	.LVL300:
 2778              	.L236:
 664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2779              		.loc 1 664 0
 2780 0040 1046     		mov	r0, r2
 2781 0042 70BD     		pop	{r4, r5, r6, pc}
 2782              		.cfi_endproc
 2783              	.LFE13:
 2785              		.section	.text.xQueuePeek,"ax",%progbits
 2786              		.align	2
 2787              		.global	xQueuePeek
 2788              		.thumb
 2789              		.thumb_func
 2791              	xQueuePeek:
 2792              	.LFB21:
1600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2793              		.loc 1 1600 0
 2794              		.cfi_startproc
 2795              		@ args = 0, pretend = 0, frame = 16
 2796              		@ frame_needed = 0, uses_anonymous_args = 0
 2797              	.LVL301:
 2798 0000 70B5     		push	{r4, r5, r6, lr}
 2799              	.LCFI37:
 2800              		.cfi_def_cfa_offset 16
 2801              		.cfi_offset 4, -16
 2802              		.cfi_offset 5, -12
 2803              		.cfi_offset 6, -8
 2804              		.cfi_offset 14, -4
 2805 0002 84B0     		sub	sp, sp, #16
 2806              	.LCFI38:
 2807              		.cfi_def_cfa_offset 32
 2808 0004 0192     		str	r2, [sp, #4]
 2809              	.LVL302:
1607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2810              		.loc 1 1607 0
 2811 0006 40B9     		cbnz	r0, .L239
 2812              	.LBB195:
 2813              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2814              		.loc 2 195 0
 2815              		.syntax unified
 2816              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2817 0008 4FF05003 			mov r3, #80												
 2818 000c 83F31188 		msr basepri, r3											
 2819 0010 BFF36F8F 		isb														
 2820 0014 BFF34F8F 		dsb														
 2821              	
 2822              	@ 0 "" 2
 2823              	.LVL303:
 2824              		.thumb
 2825              		.syntax unified
 2826              	.L240:
 2827 0018 FEE7     		b	.L240
 2828              	.L239:
 2829 001a 0446     		mov	r4, r0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 101


 2830              	.LBE196:
 2831              	.LBE195:
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2832              		.loc 1 1611 0
 2833 001c 19B9     		cbnz	r1, .L257
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2834              		.loc 1 1611 0 is_stmt 0 discriminator 2
 2835 001e 036C     		ldr	r3, [r0, #64]
 2836 0020 1BB9     		cbnz	r3, .L258
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2837              		.loc 1 1611 0
 2838 0022 0123     		movs	r3, #1
 2839 0024 02E0     		b	.L241
 2840              	.L257:
 2841 0026 0123     		movs	r3, #1
 2842 0028 00E0     		b	.L241
 2843              	.L258:
 2844 002a 0023     		movs	r3, #0
 2845              	.L241:
1611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2846              		.loc 1 1611 0 discriminator 6
 2847 002c 43B9     		cbnz	r3, .L242
 2848              	.LBB197:
 2849              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2850              		.loc 2 195 0 is_stmt 1
 2851              		.syntax unified
 2852              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2853 002e 4FF05003 			mov r3, #80												
 2854 0032 83F31188 		msr basepri, r3											
 2855 0036 BFF36F8F 		isb														
 2856 003a BFF34F8F 		dsb														
 2857              	
 2858              	@ 0 "" 2
 2859              	.LVL304:
 2860              		.thumb
 2861              		.syntax unified
 2862              	.L243:
 2863 003e FEE7     		b	.L243
 2864              	.L242:
 2865 0040 0E46     		mov	r6, r1
 2866              	.LBE198:
 2867              	.LBE197:
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2868              		.loc 1 1616 0
 2869 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 2870              	.LVL305:
 2871 0046 18B9     		cbnz	r0, .L259
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2872              		.loc 1 1616 0 is_stmt 0 discriminator 2
 2873 0048 019B     		ldr	r3, [sp, #4]
 2874 004a 1BB9     		cbnz	r3, .L260
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2875              		.loc 1 1616 0
 2876 004c 0123     		movs	r3, #1
 2877 004e 02E0     		b	.L244
 2878              	.L259:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 102


 2879 0050 0123     		movs	r3, #1
 2880 0052 00E0     		b	.L244
 2881              	.L260:
 2882 0054 0023     		movs	r3, #0
 2883              	.L244:
1616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 2884              		.loc 1 1616 0 discriminator 6
 2885 0056 43B9     		cbnz	r3, .L261
 2886              	.LBB199:
 2887              	.LBB200:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2888              		.loc 2 195 0 is_stmt 1
 2889              		.syntax unified
 2890              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2891 0058 4FF05003 			mov r3, #80												
 2892 005c 83F31188 		msr basepri, r3											
 2893 0060 BFF36F8F 		isb														
 2894 0064 BFF34F8F 		dsb														
 2895              	
 2896              	@ 0 "" 2
 2897              	.LVL306:
 2898              		.thumb
 2899              		.syntax unified
 2900              	.L246:
 2901 0068 FEE7     		b	.L246
 2902              	.L261:
 2903              	.LBE200:
 2904              	.LBE199:
 2905 006a 0025     		movs	r5, #0
 2906              	.LVL307:
 2907              	.L245:
1627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 2908              		.loc 1 1627 0
 2909 006c FFF7FEFF 		bl	vPortEnterCritical
 2910              	.LVL308:
 2911              	.LBB201:
1629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2912              		.loc 1 1629 0
 2913 0070 A36B     		ldr	r3, [r4, #56]
 2914              	.LVL309:
1633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 2915              		.loc 1 1633 0
 2916 0072 C3B1     		cbz	r3, .L247
1638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2917              		.loc 1 1638 0
 2918 0074 E568     		ldr	r5, [r4, #12]
 2919              	.LVL310:
1640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2920              		.loc 1 1640 0
 2921 0076 3146     		mov	r1, r6
 2922 0078 2046     		mov	r0, r4
 2923 007a FFF7FEFF 		bl	prvCopyDataFromQueue
 2924              	.LVL311:
1644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2925              		.loc 1 1644 0
 2926 007e E560     		str	r5, [r4, #12]
1648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 103


 2927              		.loc 1 1648 0
 2928 0080 636A     		ldr	r3, [r4, #36]
 2929 0082 63B1     		cbz	r3, .L248
1650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 2930              		.loc 1 1650 0
 2931 0084 04F12400 		add	r0, r4, #36
 2932 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2933              	.LVL312:
 2934 008c 38B1     		cbz	r0, .L248
1653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
 2935              		.loc 1 1653 0
 2936 008e 4FF08052 		mov	r2, #268435456
 2937 0092 304B     		ldr	r3, .L263
 2938 0094 1A60     		str	r2, [r3]
 2939              		.syntax unified
 2940              	@ 1653 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2941 0096 BFF34F8F 		dsb
 2942              	@ 0 "" 2
 2943              	@ 1653 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 2944 009a BFF36F8F 		isb
 2945              	@ 0 "" 2
 2946              		.thumb
 2947              		.syntax unified
 2948              	.L248:
1665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				return pdPASS;
 2949              		.loc 1 1665 0
 2950 009e FFF7FEFF 		bl	vPortExitCritical
 2951              	.LVL313:
1666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 2952              		.loc 1 1666 0
 2953 00a2 0120     		movs	r0, #1
 2954 00a4 53E0     		b	.L249
 2955              	.LVL314:
 2956              	.L247:
1670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2957              		.loc 1 1670 0
 2958 00a6 019B     		ldr	r3, [sp, #4]
 2959              	.LVL315:
 2960 00a8 1BB9     		cbnz	r3, .L250
1674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2961              		.loc 1 1674 0
 2962 00aa FFF7FEFF 		bl	vPortExitCritical
 2963              	.LVL316:
1676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 2964              		.loc 1 1676 0
 2965 00ae 0020     		movs	r0, #0
 2966 00b0 4DE0     		b	.L249
 2967              	.L250:
1678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 2968              		.loc 1 1678 0
 2969 00b2 1DB9     		cbnz	r5, .L251
1683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2970              		.loc 1 1683 0
 2971 00b4 02A8     		add	r0, sp, #8
 2972 00b6 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2973              	.LVL317:
1684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 104


 2974              		.loc 1 1684 0
 2975 00ba 0125     		movs	r5, #1
 2976              	.LVL318:
 2977              	.L251:
 2978              	.LBE201:
1693:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2979              		.loc 1 1693 0
 2980 00bc FFF7FEFF 		bl	vPortExitCritical
 2981              	.LVL319:
1698:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2982              		.loc 1 1698 0
 2983 00c0 FFF7FEFF 		bl	vTaskSuspendAll
 2984              	.LVL320:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2985              		.loc 1 1699 0
 2986 00c4 FFF7FEFF 		bl	vPortEnterCritical
 2987              	.LVL321:
 2988 00c8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2989 00cc 5BB2     		sxtb	r3, r3
 2990 00ce B3F1FF3F 		cmp	r3, #-1
 2991 00d2 02D1     		bne	.L252
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2992              		.loc 1 1699 0 is_stmt 0 discriminator 1
 2993 00d4 0023     		movs	r3, #0
 2994 00d6 84F84430 		strb	r3, [r4, #68]
 2995              	.L252:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 2996              		.loc 1 1699 0 discriminator 3
 2997 00da 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2998 00de 5BB2     		sxtb	r3, r3
 2999 00e0 B3F1FF3F 		cmp	r3, #-1
 3000 00e4 02D1     		bne	.L253
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3001              		.loc 1 1699 0 discriminator 4
 3002 00e6 0023     		movs	r3, #0
 3003 00e8 84F84530 		strb	r3, [r4, #69]
 3004              	.L253:
1699:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3005              		.loc 1 1699 0 discriminator 6
 3006 00ec FFF7FEFF 		bl	vPortExitCritical
 3007              	.LVL322:
1702:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3008              		.loc 1 1702 0 is_stmt 1 discriminator 6
 3009 00f0 01A9     		add	r1, sp, #4
 3010              	.LVL323:
 3011 00f2 02A8     		add	r0, sp, #8
 3012 00f4 FFF7FEFF 		bl	xTaskCheckForTimeOut
 3013              	.LVL324:
 3014 00f8 F0B9     		cbnz	r0, .L254
1706:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3015              		.loc 1 1706 0
 3016 00fa 2046     		mov	r0, r4
 3017 00fc FFF7FEFF 		bl	prvIsQueueEmpty
 3018              	.LVL325:
 3019 0100 A0B1     		cbz	r0, .L255
1709:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 3020              		.loc 1 1709 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 105


 3021 0102 0199     		ldr	r1, [sp, #4]
 3022 0104 04F12400 		add	r0, r4, #36
 3023 0108 FFF7FEFF 		bl	vTaskPlaceOnEventList
 3024              	.LVL326:
1710:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 3025              		.loc 1 1710 0
 3026 010c 2046     		mov	r0, r4
 3027 010e FFF7FEFF 		bl	prvUnlockQueue
 3028              	.LVL327:
1711:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 3029              		.loc 1 1711 0
 3030 0112 FFF7FEFF 		bl	xTaskResumeAll
 3031              	.LVL328:
 3032 0116 0028     		cmp	r0, #0
 3033 0118 A8D1     		bne	.L245
1713:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
 3034              		.loc 1 1713 0
 3035 011a 4FF08052 		mov	r2, #268435456
 3036 011e 0D4B     		ldr	r3, .L263
 3037 0120 1A60     		str	r2, [r3]
 3038              		.syntax unified
 3039              	@ 1713 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 3040 0122 BFF34F8F 		dsb
 3041              	@ 0 "" 2
 3042              	@ 1713 "Middlewares/Third_Party/FreeRTOS/Source/queue.c" 1
 3043 0126 BFF36F8F 		isb
 3044              	@ 0 "" 2
 3045              		.thumb
 3046              		.syntax unified
 3047 012a 9FE7     		b	.L245
 3048              	.L255:
1724:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 3049              		.loc 1 1724 0
 3050 012c 2046     		mov	r0, r4
 3051 012e FFF7FEFF 		bl	prvUnlockQueue
 3052              	.LVL329:
1725:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3053              		.loc 1 1725 0
 3054 0132 FFF7FEFF 		bl	xTaskResumeAll
 3055              	.LVL330:
 3056 0136 99E7     		b	.L245
 3057              	.L254:
1732:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 3058              		.loc 1 1732 0
 3059 0138 2046     		mov	r0, r4
 3060 013a FFF7FEFF 		bl	prvUnlockQueue
 3061              	.LVL331:
1733:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3062              		.loc 1 1733 0
 3063 013e FFF7FEFF 		bl	xTaskResumeAll
 3064              	.LVL332:
1735:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3065              		.loc 1 1735 0
 3066 0142 2046     		mov	r0, r4
 3067 0144 FFF7FEFF 		bl	prvIsQueueEmpty
 3068              	.LVL333:
 3069 0148 0028     		cmp	r0, #0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 106


 3070 014a 8FD0     		beq	.L245
1738:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3071              		.loc 1 1738 0
 3072 014c 0020     		movs	r0, #0
 3073              	.LVL334:
 3074              	.L249:
1746:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3075              		.loc 1 1746 0
 3076 014e 04B0     		add	sp, sp, #16
 3077              	.LCFI39:
 3078              		.cfi_def_cfa_offset 16
 3079              		@ sp needed
 3080 0150 70BD     		pop	{r4, r5, r6, pc}
 3081              	.LVL335:
 3082              	.L264:
 3083 0152 00BF     		.align	2
 3084              	.L263:
 3085 0154 04ED00E0 		.word	-536810236
 3086              		.cfi_endproc
 3087              	.LFE21:
 3089              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 3090              		.align	2
 3091              		.global	xQueueReceiveFromISR
 3092              		.thumb
 3093              		.thumb_func
 3095              	xQueueReceiveFromISR:
 3096              	.LFB22:
1750:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3097              		.loc 1 1750 0
 3098              		.cfi_startproc
 3099              		@ args = 0, pretend = 0, frame = 0
 3100              		@ frame_needed = 0, uses_anonymous_args = 0
 3101              	.LVL336:
 3102 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3103              	.LCFI40:
 3104              		.cfi_def_cfa_offset 32
 3105              		.cfi_offset 3, -32
 3106              		.cfi_offset 4, -28
 3107              		.cfi_offset 5, -24
 3108              		.cfi_offset 6, -20
 3109              		.cfi_offset 7, -16
 3110              		.cfi_offset 8, -12
 3111              		.cfi_offset 9, -8
 3112              		.cfi_offset 14, -4
 3113              	.LVL337:
1755:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3114              		.loc 1 1755 0
 3115 0004 40B9     		cbnz	r0, .L266
 3116              	.LBB202:
 3117              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3118              		.loc 2 195 0
 3119              		.syntax unified
 3120              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3121 0006 4FF05003 			mov r3, #80												
 3122 000a 83F31188 		msr basepri, r3											
 3123 000e BFF36F8F 		isb														
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 107


 3124 0012 BFF34F8F 		dsb														
 3125              	
 3126              	@ 0 "" 2
 3127              	.LVL338:
 3128              		.thumb
 3129              		.syntax unified
 3130              	.L267:
 3131 0016 FEE7     		b	.L267
 3132              	.L266:
 3133 0018 0446     		mov	r4, r0
 3134              	.LBE203:
 3135              	.LBE202:
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3136              		.loc 1 1756 0
 3137 001a 19B9     		cbnz	r1, .L273
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3138              		.loc 1 1756 0 is_stmt 0 discriminator 2
 3139 001c 036C     		ldr	r3, [r0, #64]
 3140 001e 1BB9     		cbnz	r3, .L274
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3141              		.loc 1 1756 0
 3142 0020 0123     		movs	r3, #1
 3143 0022 02E0     		b	.L268
 3144              	.L273:
 3145 0024 0123     		movs	r3, #1
 3146 0026 00E0     		b	.L268
 3147              	.L274:
 3148 0028 0023     		movs	r3, #0
 3149              	.L268:
1756:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3150              		.loc 1 1756 0 discriminator 6
 3151 002a 43B9     		cbnz	r3, .L269
 3152              	.LBB204:
 3153              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3154              		.loc 2 195 0 is_stmt 1
 3155              		.syntax unified
 3156              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3157 002c 4FF05003 			mov r3, #80												
 3158 0030 83F31188 		msr basepri, r3											
 3159 0034 BFF36F8F 		isb														
 3160 0038 BFF34F8F 		dsb														
 3161              	
 3162              	@ 0 "" 2
 3163              	.LVL339:
 3164              		.thumb
 3165              		.syntax unified
 3166              	.L270:
 3167 003c FEE7     		b	.L270
 3168              	.L269:
 3169 003e 1746     		mov	r7, r2
 3170 0040 8946     		mov	r9, r1
 3171              	.LBE205:
 3172              	.LBE204:
1772:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3173              		.loc 1 1772 0
 3174 0042 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 108


 3175              	.LVL340:
 3176              	.LBB206:
 3177              	.LBB207:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3178              		.loc 2 211 0
 3179              		.syntax unified
 3180              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3181 0046 EFF31186 			mrs r6, basepri											
 3182 004a 4FF05003 		mov r3, #80												
 3183 004e 83F31188 		msr basepri, r3											
 3184 0052 BFF36F8F 		isb														
 3185 0056 BFF34F8F 		dsb														
 3186              	
 3187              	@ 0 "" 2
 3188              		.thumb
 3189              		.syntax unified
 3190              	.LBE207:
 3191              	.LBE206:
 3192              	.LBB208:
1776:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3193              		.loc 1 1776 0
 3194 005a D4F83880 		ldr	r8, [r4, #56]
 3195              	.LVL341:
1779:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3196              		.loc 1 1779 0
 3197 005e B8F1000F 		cmp	r8, #0
 3198 0062 1DD0     		beq	.L275
 3199              	.LBB209:
1781:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3200              		.loc 1 1781 0
 3201 0064 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 3202 0068 6DB2     		sxtb	r5, r5
 3203              	.LVL342:
1785:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 3204              		.loc 1 1785 0
 3205 006a 4946     		mov	r1, r9
 3206 006c 2046     		mov	r0, r4
 3207 006e FFF7FEFF 		bl	prvCopyDataFromQueue
 3208              	.LVL343:
1786:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3209              		.loc 1 1786 0
 3210 0072 08F1FF33 		add	r3, r8, #-1
 3211 0076 A363     		str	r3, [r4, #56]
1792:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
 3212              		.loc 1 1792 0
 3213 0078 B5F1FF3F 		cmp	r5, #-1
 3214 007c 0AD1     		bne	.L272
1794:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
 3215              		.loc 1 1794 0
 3216 007e 2369     		ldr	r3, [r4, #16]
 3217 0080 83B1     		cbz	r3, .L276
1796:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
 3218              		.loc 1 1796 0
 3219 0082 04F11000 		add	r0, r4, #16
 3220 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 3221              	.LVL344:
 3222 008a 68B1     		cbz	r0, .L277
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 109


1800:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						{
 3223              		.loc 1 1800 0
 3224 008c 77B1     		cbz	r7, .L278
1802:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						}
 3225              		.loc 1 1802 0
 3226 008e 0120     		movs	r0, #1
 3227 0090 3860     		str	r0, [r7]
 3228 0092 0CE0     		b	.L271
 3229              	.L272:
1823:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
 3230              		.loc 1 1823 0
 3231 0094 6B1C     		adds	r3, r5, #1
 3232 0096 5BB2     		sxtb	r3, r3
 3233 0098 84F84430 		strb	r3, [r4, #68]
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3234              		.loc 1 1826 0
 3235 009c 0120     		movs	r0, #1
 3236 009e 06E0     		b	.L271
 3237              	.LVL345:
 3238              	.L275:
 3239              	.LBE209:
1830:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 3240              		.loc 1 1830 0
 3241 00a0 0020     		movs	r0, #0
 3242 00a2 04E0     		b	.L271
 3243              	.LVL346:
 3244              	.L276:
 3245              	.LBB210:
1826:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3246              		.loc 1 1826 0
 3247 00a4 0120     		movs	r0, #1
 3248 00a6 02E0     		b	.L271
 3249              	.L277:
 3250 00a8 0120     		movs	r0, #1
 3251 00aa 00E0     		b	.L271
 3252              	.L278:
 3253 00ac 0120     		movs	r0, #1
 3254              	.LVL347:
 3255              	.L271:
 3256              	.LBE210:
 3257              	.LBE208:
 3258              	.LBB211:
 3259              	.LBB212:
 3260              		.loc 2 229 0
 3261              		.syntax unified
 3262              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3263 00ae 86F31188 			msr basepri, r6	
 3264              	@ 0 "" 2
 3265              	.LVL348:
 3266              		.thumb
 3267              		.syntax unified
 3268              	.LBE212:
 3269              	.LBE211:
1837:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3270              		.loc 1 1837 0
 3271 00b2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3272              		.cfi_endproc
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 110


 3273              	.LFE22:
 3275 00b6 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 3276              		.align	2
 3277              		.global	xQueuePeekFromISR
 3278              		.thumb
 3279              		.thumb_func
 3281              	xQueuePeekFromISR:
 3282              	.LFB23:
1841:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3283              		.loc 1 1841 0
 3284              		.cfi_startproc
 3285              		@ args = 0, pretend = 0, frame = 0
 3286              		@ frame_needed = 0, uses_anonymous_args = 0
 3287              	.LVL349:
 3288 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3289              	.LCFI41:
 3290              		.cfi_def_cfa_offset 24
 3291              		.cfi_offset 3, -24
 3292              		.cfi_offset 4, -20
 3293              		.cfi_offset 5, -16
 3294              		.cfi_offset 6, -12
 3295              		.cfi_offset 7, -8
 3296              		.cfi_offset 14, -4
 3297              	.LVL350:
1847:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 3298              		.loc 1 1847 0
 3299 0002 40B9     		cbnz	r0, .L281
 3300              	.LBB213:
 3301              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3302              		.loc 2 195 0
 3303              		.syntax unified
 3304              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3305 0004 4FF05003 			mov r3, #80												
 3306 0008 83F31188 		msr basepri, r3											
 3307 000c BFF36F8F 		isb														
 3308 0010 BFF34F8F 		dsb														
 3309              	
 3310              	@ 0 "" 2
 3311              	.LVL351:
 3312              		.thumb
 3313              		.syntax unified
 3314              	.L282:
 3315 0014 FEE7     		b	.L282
 3316              	.L281:
 3317 0016 0446     		mov	r4, r0
 3318              	.LBE214:
 3319              	.LBE213:
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3320              		.loc 1 1848 0
 3321 0018 19B9     		cbnz	r1, .L289
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3322              		.loc 1 1848 0 is_stmt 0 discriminator 2
 3323 001a 036C     		ldr	r3, [r0, #64]
 3324 001c 1BB9     		cbnz	r3, .L290
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3325              		.loc 1 1848 0
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 111


 3326 001e 0123     		movs	r3, #1
 3327 0020 02E0     		b	.L283
 3328              	.L289:
 3329 0022 0123     		movs	r3, #1
 3330 0024 00E0     		b	.L283
 3331              	.L290:
 3332 0026 0023     		movs	r3, #0
 3333              	.L283:
1848:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 3334              		.loc 1 1848 0 discriminator 6
 3335 0028 43B9     		cbnz	r3, .L284
 3336              	.LBB215:
 3337              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3338              		.loc 2 195 0 is_stmt 1
 3339              		.syntax unified
 3340              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3341 002a 4FF05003 			mov r3, #80												
 3342 002e 83F31188 		msr basepri, r3											
 3343 0032 BFF36F8F 		isb														
 3344 0036 BFF34F8F 		dsb														
 3345              	
 3346              	@ 0 "" 2
 3347              	.LVL352:
 3348              		.thumb
 3349              		.syntax unified
 3350              	.L285:
 3351 003a FEE7     		b	.L285
 3352              	.L284:
 3353              	.LBE216:
 3354              	.LBE215:
1849:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3355              		.loc 1 1849 0
 3356 003c 236C     		ldr	r3, [r4, #64]
 3357 003e 43B9     		cbnz	r3, .L286
 3358              	.LBB217:
 3359              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3360              		.loc 2 195 0
 3361              		.syntax unified
 3362              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3363 0040 4FF05003 			mov r3, #80												
 3364 0044 83F31188 		msr basepri, r3											
 3365 0048 BFF36F8F 		isb														
 3366 004c BFF34F8F 		dsb														
 3367              	
 3368              	@ 0 "" 2
 3369              	.LVL353:
 3370              		.thumb
 3371              		.syntax unified
 3372              	.L287:
 3373 0050 FEE7     		b	.L287
 3374              	.L286:
 3375 0052 0D46     		mov	r5, r1
 3376              	.LBE218:
 3377              	.LBE217:
1865:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 112


 3378              		.loc 1 1865 0
 3379 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3380              	.LVL354:
 3381              	.LBB219:
 3382              	.LBB220:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3383              		.loc 2 211 0
 3384              		.syntax unified
 3385              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3386 0058 EFF31186 			mrs r6, basepri											
 3387 005c 4FF05003 		mov r3, #80												
 3388 0060 83F31188 		msr basepri, r3											
 3389 0064 BFF36F8F 		isb														
 3390 0068 BFF34F8F 		dsb														
 3391              	
 3392              	@ 0 "" 2
 3393              		.thumb
 3394              		.syntax unified
 3395              	.LBE220:
 3396              	.LBE219:
1870:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3397              		.loc 1 1870 0
 3398 006c A36B     		ldr	r3, [r4, #56]
 3399 006e 3BB1     		cbz	r3, .L291
1876:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3400              		.loc 1 1876 0
 3401 0070 E768     		ldr	r7, [r4, #12]
 3402              	.LVL355:
1877:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 3403              		.loc 1 1877 0
 3404 0072 2946     		mov	r1, r5
 3405 0074 2046     		mov	r0, r4
 3406 0076 FFF7FEFF 		bl	prvCopyDataFromQueue
 3407              	.LVL356:
1878:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3408              		.loc 1 1878 0
 3409 007a E760     		str	r7, [r4, #12]
 3410              	.LVL357:
1880:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3411              		.loc 1 1880 0
 3412 007c 0120     		movs	r0, #1
 3413 007e 00E0     		b	.L288
 3414              	.LVL358:
 3415              	.L291:
1884:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3416              		.loc 1 1884 0
 3417 0080 0020     		movs	r0, #0
 3418              	.L288:
 3419              	.LVL359:
 3420              	.LBB221:
 3421              	.LBB222:
 3422              		.loc 2 229 0
 3423              		.syntax unified
 3424              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3425 0082 86F31188 			msr basepri, r6	
 3426              	@ 0 "" 2
 3427              	.LVL360:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 113


 3428              		.thumb
 3429              		.syntax unified
 3430              	.LBE222:
 3431              	.LBE221:
1891:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3432              		.loc 1 1891 0
 3433 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3434              		.cfi_endproc
 3435              	.LFE23:
 3437              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3438              		.align	2
 3439              		.global	uxQueueMessagesWaiting
 3440              		.thumb
 3441              		.thumb_func
 3443              	uxQueueMessagesWaiting:
 3444              	.LFB24:
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3445              		.loc 1 1895 0
 3446              		.cfi_startproc
 3447              		@ args = 0, pretend = 0, frame = 0
 3448              		@ frame_needed = 0, uses_anonymous_args = 0
 3449              	.LVL361:
1898:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3450              		.loc 1 1898 0
 3451 0000 40B9     		cbnz	r0, .L294
 3452              	.LBB223:
 3453              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3454              		.loc 2 195 0
 3455              		.syntax unified
 3456              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3457 0002 4FF05003 			mov r3, #80												
 3458 0006 83F31188 		msr basepri, r3											
 3459 000a BFF36F8F 		isb														
 3460 000e BFF34F8F 		dsb														
 3461              	
 3462              	@ 0 "" 2
 3463              	.LVL362:
 3464              		.thumb
 3465              		.syntax unified
 3466              	.L295:
 3467 0012 FEE7     		b	.L295
 3468              	.L294:
 3469              	.LBE224:
 3470              	.LBE223:
1895:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3471              		.loc 1 1895 0
 3472 0014 10B5     		push	{r4, lr}
 3473              	.LCFI42:
 3474              		.cfi_def_cfa_offset 8
 3475              		.cfi_offset 4, -8
 3476              		.cfi_offset 14, -4
 3477 0016 0446     		mov	r4, r0
1900:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3478              		.loc 1 1900 0
 3479 0018 FFF7FEFF 		bl	vPortEnterCritical
 3480              	.LVL363:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 114


1902:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3481              		.loc 1 1902 0
 3482 001c A46B     		ldr	r4, [r4, #56]
 3483              	.LVL364:
1904:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3484              		.loc 1 1904 0
 3485 001e FFF7FEFF 		bl	vPortExitCritical
 3486              	.LVL365:
1907:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3487              		.loc 1 1907 0
 3488 0022 2046     		mov	r0, r4
 3489 0024 10BD     		pop	{r4, pc}
 3490              		.cfi_endproc
 3491              	.LFE24:
 3493 0026 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3494              		.align	2
 3495              		.global	uxQueueSpacesAvailable
 3496              		.thumb
 3497              		.thumb_func
 3499              	uxQueueSpacesAvailable:
 3500              	.LFB25:
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3501              		.loc 1 1911 0
 3502              		.cfi_startproc
 3503              		@ args = 0, pretend = 0, frame = 0
 3504              		@ frame_needed = 0, uses_anonymous_args = 0
 3505              	.LVL366:
1916:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3506              		.loc 1 1916 0
 3507 0000 40B9     		cbnz	r0, .L298
 3508              	.LBB225:
 3509              	.LBB226:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3510              		.loc 2 195 0
 3511              		.syntax unified
 3512              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3513 0002 4FF05003 			mov r3, #80												
 3514 0006 83F31188 		msr basepri, r3											
 3515 000a BFF36F8F 		isb														
 3516 000e BFF34F8F 		dsb														
 3517              	
 3518              	@ 0 "" 2
 3519              	.LVL367:
 3520              		.thumb
 3521              		.syntax unified
 3522              	.L299:
 3523 0012 FEE7     		b	.L299
 3524              	.L298:
 3525              	.LBE226:
 3526              	.LBE225:
1911:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3527              		.loc 1 1911 0
 3528 0014 10B5     		push	{r4, lr}
 3529              	.LCFI43:
 3530              		.cfi_def_cfa_offset 8
 3531              		.cfi_offset 4, -8
 3532              		.cfi_offset 14, -4
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 115


 3533 0016 0446     		mov	r4, r0
1918:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3534              		.loc 1 1918 0
 3535 0018 FFF7FEFF 		bl	vPortEnterCritical
 3536              	.LVL368:
1920:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3537              		.loc 1 1920 0
 3538 001c E36B     		ldr	r3, [r4, #60]
 3539 001e A46B     		ldr	r4, [r4, #56]
 3540              	.LVL369:
 3541 0020 1C1B     		subs	r4, r3, r4
 3542              	.LVL370:
1922:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3543              		.loc 1 1922 0
 3544 0022 FFF7FEFF 		bl	vPortExitCritical
 3545              	.LVL371:
1925:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3546              		.loc 1 1925 0
 3547 0026 2046     		mov	r0, r4
 3548 0028 10BD     		pop	{r4, pc}
 3549              		.cfi_endproc
 3550              	.LFE25:
 3552 002a 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 3553              		.align	2
 3554              		.global	uxQueueMessagesWaitingFromISR
 3555              		.thumb
 3556              		.thumb_func
 3558              	uxQueueMessagesWaitingFromISR:
 3559              	.LFB26:
1929:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3560              		.loc 1 1929 0
 3561              		.cfi_startproc
 3562              		@ args = 0, pretend = 0, frame = 0
 3563              		@ frame_needed = 0, uses_anonymous_args = 0
 3564              		@ link register save eliminated.
 3565              	.LVL372:
1932:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3566              		.loc 1 1932 0
 3567 0000 40B9     		cbnz	r0, .L302
 3568              	.LBB227:
 3569              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3570              		.loc 2 195 0
 3571              		.syntax unified
 3572              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3573 0002 4FF05003 			mov r3, #80												
 3574 0006 83F31188 		msr basepri, r3											
 3575 000a BFF36F8F 		isb														
 3576 000e BFF34F8F 		dsb														
 3577              	
 3578              	@ 0 "" 2
 3579              	.LVL373:
 3580              		.thumb
 3581              		.syntax unified
 3582              	.L303:
 3583 0012 FEE7     		b	.L303
 3584              	.L302:
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 116


 3585              	.LBE228:
 3586              	.LBE227:
1934:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3587              		.loc 1 1934 0
 3588 0014 806B     		ldr	r0, [r0, #56]
 3589              	.LVL374:
1937:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3590              		.loc 1 1937 0
 3591 0016 7047     		bx	lr
 3592              		.cfi_endproc
 3593              	.LFE26:
 3595              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3596              		.align	2
 3597              		.global	xQueueIsQueueEmptyFromISR
 3598              		.thumb
 3599              		.thumb_func
 3601              	xQueueIsQueueEmptyFromISR:
 3602              	.LFB33:
2278:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3603              		.loc 1 2278 0
 3604              		.cfi_startproc
 3605              		@ args = 0, pretend = 0, frame = 0
 3606              		@ frame_needed = 0, uses_anonymous_args = 0
 3607              		@ link register save eliminated.
 3608              	.LVL375:
2281:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3609              		.loc 1 2281 0
 3610 0000 40B9     		cbnz	r0, .L305
 3611              	.LBB229:
 3612              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3613              		.loc 2 195 0
 3614              		.syntax unified
 3615              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3616 0002 4FF05003 			mov r3, #80												
 3617 0006 83F31188 		msr basepri, r3											
 3618 000a BFF36F8F 		isb														
 3619 000e BFF34F8F 		dsb														
 3620              	
 3621              	@ 0 "" 2
 3622              	.LVL376:
 3623              		.thumb
 3624              		.syntax unified
 3625              	.L306:
 3626 0012 FEE7     		b	.L306
 3627              	.L305:
 3628              	.LBE230:
 3629              	.LBE229:
2282:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3630              		.loc 1 2282 0
 3631 0014 836B     		ldr	r3, [r0, #56]
 3632 0016 0BB9     		cbnz	r3, .L308
2284:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3633              		.loc 1 2284 0
 3634 0018 0120     		movs	r0, #1
 3635              	.LVL377:
 3636 001a 7047     		bx	lr
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 117


 3637              	.LVL378:
 3638              	.L308:
2288:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3639              		.loc 1 2288 0
 3640 001c 0020     		movs	r0, #0
 3641              	.LVL379:
2292:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3642              		.loc 1 2292 0
 3643 001e 7047     		bx	lr
 3644              		.cfi_endproc
 3645              	.LFE33:
 3647              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3648              		.align	2
 3649              		.global	xQueueIsQueueFullFromISR
 3650              		.thumb
 3651              		.thumb_func
 3653              	xQueueIsQueueFullFromISR:
 3654              	.LFB35:
2314:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2315:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2317:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** {
 3655              		.loc 1 2317 0
 3656              		.cfi_startproc
 3657              		@ args = 0, pretend = 0, frame = 0
 3658              		@ frame_needed = 0, uses_anonymous_args = 0
 3659              		@ link register save eliminated.
 3660              	.LVL380:
2318:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2319:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3661              		.loc 1 2320 0
 3662 0000 40B9     		cbnz	r0, .L310
 3663              	.LBB231:
 3664              	.LBB232:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3665              		.loc 2 195 0
 3666              		.syntax unified
 3667              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3668 0002 4FF05003 			mov r3, #80												
 3669 0006 83F31188 		msr basepri, r3											
 3670 000a BFF36F8F 		isb														
 3671 000e BFF34F8F 		dsb														
 3672              	
 3673              	@ 0 "" 2
 3674              	.LVL381:
 3675              		.thumb
 3676              		.syntax unified
 3677              	.L311:
 3678 0012 FEE7     		b	.L311
 3679              	.L310:
 3680              	.LBE232:
 3681              	.LBE231:
2321:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3682              		.loc 1 2321 0
 3683 0014 826B     		ldr	r2, [r0, #56]
 3684 0016 C36B     		ldr	r3, [r0, #60]
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 118


 3685 0018 9A42     		cmp	r2, r3
 3686 001a 01D1     		bne	.L313
2322:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 3687              		.loc 1 2323 0
 3688 001c 0120     		movs	r0, #1
 3689              	.LVL382:
 3690 001e 7047     		bx	lr
 3691              	.LVL383:
 3692              	.L313:
2324:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2325:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	else
2326:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2327:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3693              		.loc 1 2327 0
 3694 0020 0020     		movs	r0, #0
 3695              	.LVL384:
2328:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2329:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	return xReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3696              		.loc 1 2331 0
 3697 0022 7047     		bx	lr
 3698              		.cfi_endproc
 3699              	.LFE35:
 3701              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3702              		.align	2
 3703              		.global	vQueueAddToRegistry
 3704              		.thumb
 3705              		.thumb_func
 3707              	vQueueAddToRegistry:
 3708              	.LFB36:
2332:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2333:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2334:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2335:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2337:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2338:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2339:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2340:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2341:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2342:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2343:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2344:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2345:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2346:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2347:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2348:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2349:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				posting? */
2350:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2351:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2352:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2353:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2354:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2355:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2356:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 119


2357:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2359:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2360:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2361:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2362:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2363:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2364:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2365:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2366:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2367:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2368:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2369:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2370:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2371:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2372:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2373:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2374:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2375:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2376:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2377:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2378:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2379:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2380:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2381:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2382:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2383:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2384:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2385:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2386:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2387:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2393:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2394:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2395:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2396:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2397:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2398:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2399:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2400:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2401:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2402:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2403:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2404:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2406:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2407:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2408:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2409:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2410:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2411:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2412:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 120


2414:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2415:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2416:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2417:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2419:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2420:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2421:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2422:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2423:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2424:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2425:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2426:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				leave with nothing? */
2427:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2428:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2429:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2430:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2431:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2432:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2433:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2434:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2435:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2436:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2437:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2438:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2439:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2441:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2442:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2443:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2444:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2445:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2446:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2447:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2449:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2451:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2453:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2454:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2455:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2456:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2457:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2458:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2459:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2460:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2461:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2463:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2464:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2466:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2467:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2468:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2469:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 121


2471:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2472:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2473:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2474:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2475:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2476:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2477:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2478:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2479:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2480:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2481:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2482:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2483:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2484:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2485:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2486:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2487:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2488:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2489:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2490:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2491:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2492:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2493:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2494:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2495:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2496:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2497:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2498:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2499:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2500:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2502:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2504:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2505:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2506:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2508:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2509:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2510:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2512:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2513:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2514:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2515:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2516:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2517:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2518:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2519:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2520:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2521:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						return pdTRUE;
2522:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2523:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2524:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2525:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2527:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 122


2528:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2529:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2531:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2532:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2533:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2534:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2535:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2536:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2537:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2538:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2539:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2540:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2541:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2542:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2543:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2544:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2545:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2546:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2547:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2548:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2549:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2550:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2552:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
2553:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2554:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2555:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2556:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2557:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2558:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2559:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2560:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2561:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2562:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2563:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2564:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2565:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2566:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2567:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2568:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2571:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2572:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2574:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2575:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2576:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2577:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2578:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2579:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2580:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
2581:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					else
2582:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					{
2583:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2584:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					}
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 123


2585:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2586:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				else
2587:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				{
2588:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2589:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				}
2590:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2591:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2592:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2593:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2594:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2595:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2597:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2598:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		else
2599:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2601:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2602:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return xReturn;
2604:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2607:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2609:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2610:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2612:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3709              		.loc 1 2612 0
 3710              		.cfi_startproc
 3711              		@ args = 0, pretend = 0, frame = 0
 3712              		@ frame_needed = 0, uses_anonymous_args = 0
 3713              		@ link register save eliminated.
 3714              	.LVL385:
2613:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2614:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2615:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2616:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		a free slot. */
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3715              		.loc 1 2617 0
 3716 0000 0023     		movs	r3, #0
 3717 0002 0BE0     		b	.L315
 3718              	.LVL386:
 3719              	.L318:
2618:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2619:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3720              		.loc 1 2619 0
 3721 0004 074A     		ldr	r2, .L319
 3722 0006 52F83320 		ldr	r2, [r2, r3, lsl #3]
 3723 000a 32B9     		cbnz	r2, .L316
2620:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2622:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3724              		.loc 1 2622 0
 3725 000c 054A     		ldr	r2, .L319
 3726 000e 42F83310 		str	r1, [r2, r3, lsl #3]
2623:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 124


 3727              		.loc 1 2623 0
 3728 0012 02EBC303 		add	r3, r2, r3, lsl #3
 3729              	.LVL387:
 3730 0016 5860     		str	r0, [r3, #4]
2624:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2625:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2626:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3731              		.loc 1 2626 0
 3732 0018 7047     		bx	lr
 3733              	.LVL388:
 3734              	.L316:
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3735              		.loc 1 2617 0 discriminator 2
 3736 001a 0133     		adds	r3, r3, #1
 3737              	.LVL389:
 3738              	.L315:
2617:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3739              		.loc 1 2617 0 is_stmt 0 discriminator 1
 3740 001c 072B     		cmp	r3, #7
 3741 001e F1D9     		bls	.L318
 3742 0020 7047     		bx	lr
 3743              	.L320:
 3744 0022 00BF     		.align	2
 3745              	.L319:
 3746 0024 00000000 		.word	xQueueRegistry
 3747              		.cfi_endproc
 3748              	.LFE36:
 3750              		.section	.text.pcQueueGetName,"ax",%progbits
 3751              		.align	2
 3752              		.global	pcQueueGetName
 3753              		.thumb
 3754              		.thumb_func
 3756              	pcQueueGetName:
 3757              	.LFB37:
2627:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2628:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2629:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2630:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2631:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2632:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2633:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
2634:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2635:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2636:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2637:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2638:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2639:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2640:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2641:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3758              		.loc 1 2641 0 is_stmt 1
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
 3762              		@ link register save eliminated.
 3763              	.LVL390:
2642:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 125


2644:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2646:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3764              		.loc 1 2647 0
 3765 0000 0023     		movs	r3, #0
 3766 0002 0AE0     		b	.L322
 3767              	.LVL391:
 3768              	.L325:
2648:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3769              		.loc 1 2649 0
 3770 0004 074A     		ldr	r2, .L326
 3771 0006 02EBC302 		add	r2, r2, r3, lsl #3
 3772 000a 5268     		ldr	r2, [r2, #4]
 3773 000c 8242     		cmp	r2, r0
 3774 000e 03D1     		bne	.L323
2650:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2651:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3775              		.loc 1 2651 0
 3776 0010 044A     		ldr	r2, .L326
 3777 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3778              	.LVL392:
2652:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
 3779              		.loc 1 2652 0
 3780 0016 7047     		bx	lr
 3781              	.LVL393:
 3782              	.L323:
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3783              		.loc 1 2647 0 discriminator 2
 3784 0018 0133     		adds	r3, r3, #1
 3785              	.LVL394:
 3786              	.L322:
2647:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3787              		.loc 1 2647 0 is_stmt 0 discriminator 1
 3788 001a 072B     		cmp	r3, #7
 3789 001c F2D9     		bls	.L325
2643:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
 3790              		.loc 1 2643 0 is_stmt 1
 3791 001e 0020     		movs	r0, #0
 3792              	.LVL395:
2653:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2654:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			else
2655:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2656:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2657:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			}
2658:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
2659:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2660:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		return pcReturn;
2661:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3793              		.loc 1 2661 0
 3794 0020 7047     		bx	lr
 3795              	.L327:
 3796 0022 00BF     		.align	2
 3797              	.L326:
 3798 0024 00000000 		.word	xQueueRegistry
 3799              		.cfi_endproc
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 126


 3800              	.LFE37:
 3802              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3803              		.align	2
 3804              		.global	vQueueUnregisterQueue
 3805              		.thumb
 3806              		.thumb_func
 3808              	vQueueUnregisterQueue:
 3809              	.LFB38:
2662:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2663:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2664:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2665:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2666:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2667:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2669:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	{
 3810              		.loc 1 2669 0
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 0
 3813              		@ frame_needed = 0, uses_anonymous_args = 0
 3814              		@ link register save eliminated.
 3815              	.LVL396:
2670:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2671:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2673:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		registry. */
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3816              		.loc 1 2674 0
 3817 0000 0023     		movs	r3, #0
 3818 0002 0EE0     		b	.L329
 3819              	.LVL397:
 3820              	.L332:
2675:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
2676:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3821              		.loc 1 2676 0
 3822 0004 084A     		ldr	r2, .L333
 3823 0006 02EBC302 		add	r2, r2, r3, lsl #3
 3824 000a 5268     		ldr	r2, [r2, #4]
 3825 000c 8242     		cmp	r2, r0
 3826 000e 07D1     		bne	.L330
2677:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 			{
2678:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2679:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3827              		.loc 1 2679 0
 3828 0010 054A     		ldr	r2, .L333
 3829 0012 0021     		movs	r1, #0
 3830 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2680:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2682:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2683:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				added again. */
2684:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3831              		.loc 1 2684 0
 3832 0018 02EBC303 		add	r3, r2, r3, lsl #3
 3833              	.LVL398:
 3834 001c 5960     		str	r1, [r3, #4]
2685:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 				break;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 127


 3835              		.loc 1 2685 0
 3836 001e 7047     		bx	lr
 3837              	.LVL399:
 3838              	.L330:
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3839              		.loc 1 2674 0 discriminator 2
 3840 0020 0133     		adds	r3, r3, #1
 3841              	.LVL400:
 3842              	.L329:
2674:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3843              		.loc 1 2674 0 is_stmt 0 discriminator 1
 3844 0022 072B     		cmp	r3, #7
 3845 0024 EED9     		bls	.L332
 3846 0026 7047     		bx	lr
 3847              	.L334:
 3848              		.align	2
 3849              	.L333:
 3850 0028 00000000 		.word	xQueueRegistry
 3851              		.cfi_endproc
 3852              	.LFE38:
 3854              		.section	.text.vQueueDelete,"ax",%progbits
 3855              		.align	2
 3856              		.global	vQueueDelete
 3857              		.thumb
 3858              		.thumb_func
 3860              	vQueueDelete:
 3861              	.LFB27:
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3862              		.loc 1 1941 0 is_stmt 1
 3863              		.cfi_startproc
 3864              		@ args = 0, pretend = 0, frame = 0
 3865              		@ frame_needed = 0, uses_anonymous_args = 0
 3866              	.LVL401:
1944:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3867              		.loc 1 1944 0
 3868 0000 40B9     		cbnz	r0, .L336
 3869              	.LBB233:
 3870              	.LBB234:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3871              		.loc 2 195 0
 3872              		.syntax unified
 3873              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3874 0002 4FF05003 			mov r3, #80												
 3875 0006 83F31188 		msr basepri, r3											
 3876 000a BFF36F8F 		isb														
 3877 000e BFF34F8F 		dsb														
 3878              	
 3879              	@ 0 "" 2
 3880              	.LVL402:
 3881              		.thumb
 3882              		.syntax unified
 3883              	.L337:
 3884 0012 FEE7     		b	.L337
 3885              	.L336:
 3886              	.LBE234:
 3887              	.LBE233:
1941:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 128


 3888              		.loc 1 1941 0
 3889 0014 10B5     		push	{r4, lr}
 3890              	.LCFI44:
 3891              		.cfi_def_cfa_offset 8
 3892              		.cfi_offset 4, -8
 3893              		.cfi_offset 14, -4
 3894 0016 0446     		mov	r4, r0
1949:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 	}
 3895              		.loc 1 1949 0
 3896 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3897              	.LVL403:
1963:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		{
 3898              		.loc 1 1963 0
 3899 001c 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 3900 0020 13B9     		cbnz	r3, .L335
1965:Middlewares/Third_Party/FreeRTOS/Source/queue.c **** 		}
 3901              		.loc 1 1965 0
 3902 0022 2046     		mov	r0, r4
 3903 0024 FFF7FEFF 		bl	vPortFree
 3904              	.LVL404:
 3905              	.L335:
 3906 0028 10BD     		pop	{r4, pc}
 3907              		.cfi_endproc
 3908              	.LFE27:
 3910              		.comm	xQueueRegistry,64,4
 3911 002a 00BF     		.text
 3912              	.Letext0:
 3913              		.file 3 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.4.1\\include\\s
 3914              		.file 4 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_
 3915              		.file 5 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 3916              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 3917              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 3918              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 3919              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 3920              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 129


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
C:\WINDOWS\TEMP\cc4fjiXf.s:22     .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:26     .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
C:\WINDOWS\TEMP\cc4fjiXf.s:56     .text.prvIsQueueFull:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:60     .text.prvIsQueueFull:00000000 prvIsQueueFull
C:\WINDOWS\TEMP\cc4fjiXf.s:101    .text.prvIsQueueEmpty:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:105    .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
C:\WINDOWS\TEMP\cc4fjiXf.s:144    .text.prvCopyDataToQueue:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:148    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
C:\WINDOWS\TEMP\cc4fjiXf.s:267    .text.prvCopyDataFromQueue:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:271    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
C:\WINDOWS\TEMP\cc4fjiXf.s:319    .text.prvUnlockQueue:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:323    .text.prvUnlockQueue:00000000 prvUnlockQueue
C:\WINDOWS\TEMP\cc4fjiXf.s:424    .text.xQueueGenericReset:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:429    .text.xQueueGenericReset:00000000 xQueueGenericReset
C:\WINDOWS\TEMP\cc4fjiXf.s:535    .text.xQueueGenericReset:0000007c $d
C:\WINDOWS\TEMP\cc4fjiXf.s:540    .text.prvInitialiseNewQueue:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:544    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
C:\WINDOWS\TEMP\cc4fjiXf.s:584    .text.xQueueGenericCreateStatic:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:589    .text.xQueueGenericCreateStatic:00000000 xQueueGenericCreateStatic
C:\WINDOWS\TEMP\cc4fjiXf.s:781    .text.xQueueGenericCreate:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:786    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
C:\WINDOWS\TEMP\cc4fjiXf.s:877    .text.xQueueCreateCountingSemaphoreStatic:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:882    .text.xQueueCreateCountingSemaphoreStatic:00000000 xQueueCreateCountingSemaphoreStatic
C:\WINDOWS\TEMP\cc4fjiXf.s:970    .text.xQueueCreateCountingSemaphore:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:975    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
C:\WINDOWS\TEMP\cc4fjiXf.s:1052   .text.xQueueGenericSend:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1057   .text.xQueueGenericSend:00000000 xQueueGenericSend
C:\WINDOWS\TEMP\cc4fjiXf.s:1404   .text.xQueueGenericSend:0000018c $d
C:\WINDOWS\TEMP\cc4fjiXf.s:1409   .text.prvInitialiseMutex:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1413   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
C:\WINDOWS\TEMP\cc4fjiXf.s:1452   .text.xQueueCreateMutex:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1457   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
C:\WINDOWS\TEMP\cc4fjiXf.s:1489   .text.xQueueCreateMutexStatic:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1494   .text.xQueueCreateMutexStatic:00000000 xQueueCreateMutexStatic
C:\WINDOWS\TEMP\cc4fjiXf.s:1536   .text.xQueueGiveMutexRecursive:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1541   .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
C:\WINDOWS\TEMP\cc4fjiXf.s:1615   .text.xQueueGenericSendFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1620   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
C:\WINDOWS\TEMP\cc4fjiXf.s:1844   .text.xQueueGiveFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:1849   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
C:\WINDOWS\TEMP\cc4fjiXf.s:2050   .text.xQueueReceive:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:2055   .text.xQueueReceive:00000000 xQueueReceive
C:\WINDOWS\TEMP\cc4fjiXf.s:2348   .text.xQueueReceive:00000154 $d
C:\WINDOWS\TEMP\cc4fjiXf.s:2353   .text.xQueueSemaphoreTake:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:2358   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
C:\WINDOWS\TEMP\cc4fjiXf.s:2701   .text.xQueueSemaphoreTake:0000018c $d
C:\WINDOWS\TEMP\cc4fjiXf.s:2706   .text.xQueueTakeMutexRecursive:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:2711   .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
C:\WINDOWS\TEMP\cc4fjiXf.s:2786   .text.xQueuePeek:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:2791   .text.xQueuePeek:00000000 xQueuePeek
C:\WINDOWS\TEMP\cc4fjiXf.s:3085   .text.xQueuePeek:00000154 $d
C:\WINDOWS\TEMP\cc4fjiXf.s:3090   .text.xQueueReceiveFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3095   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
C:\WINDOWS\TEMP\cc4fjiXf.s:3276   .text.xQueuePeekFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3281   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
ARM GAS  C:\WINDOWS\TEMP\cc4fjiXf.s 			page 130


C:\WINDOWS\TEMP\cc4fjiXf.s:3438   .text.uxQueueMessagesWaiting:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3443   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
C:\WINDOWS\TEMP\cc4fjiXf.s:3494   .text.uxQueueSpacesAvailable:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3499   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
C:\WINDOWS\TEMP\cc4fjiXf.s:3553   .text.uxQueueMessagesWaitingFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3558   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
C:\WINDOWS\TEMP\cc4fjiXf.s:3596   .text.xQueueIsQueueEmptyFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3601   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
C:\WINDOWS\TEMP\cc4fjiXf.s:3648   .text.xQueueIsQueueFullFromISR:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3653   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
C:\WINDOWS\TEMP\cc4fjiXf.s:3702   .text.vQueueAddToRegistry:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3707   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
C:\WINDOWS\TEMP\cc4fjiXf.s:3746   .text.vQueueAddToRegistry:00000024 $d
                            *COM*:00000040 xQueueRegistry
C:\WINDOWS\TEMP\cc4fjiXf.s:3751   .text.pcQueueGetName:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3756   .text.pcQueueGetName:00000000 pcQueueGetName
C:\WINDOWS\TEMP\cc4fjiXf.s:3798   .text.pcQueueGetName:00000024 $d
C:\WINDOWS\TEMP\cc4fjiXf.s:3803   .text.vQueueUnregisterQueue:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3808   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
C:\WINDOWS\TEMP\cc4fjiXf.s:3850   .text.vQueueUnregisterQueue:00000028 $d
C:\WINDOWS\TEMP\cc4fjiXf.s:3855   .text.vQueueDelete:00000000 $t
C:\WINDOWS\TEMP\cc4fjiXf.s:3860   .text.vQueueDelete:00000000 vQueueDelete
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
