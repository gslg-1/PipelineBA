ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"tasks.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	prvTaskIsTaskSuspended:
  27              	.LFB15:
  28              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 2


  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 3


  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 4


 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 5


 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 6


 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 7


 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 8


 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 9


 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 10


 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 11


 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 12


 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 13


 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 14


 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 15


 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 16


 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 17


 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 18


 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 19


1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 20


1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 21


1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 22


1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 23


1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 24


1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 25


1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 26


1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 27


1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 28


1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 29


1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 30


1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 31


1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  29              		.loc 1 1726 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 32


  35              		.loc 1 1734 0
  36 0000 0246     		mov	r2, r0
  37 0002 40B9     		cbnz	r0, .L2
  38              	.LBB105:
  39              	.LBB106:
  40              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 33


  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 34


 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 35


 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  41              		.loc 2 195 0
  42              		.syntax unified
  43              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  44 0004 4FF05003 			mov r3, #80												
  45 0008 83F31188 		msr basepri, r3											
  46 000c BFF36F8F 		isb														
  47 0010 BFF34F8F 		dsb														
  48              	
  49              	@ 0 "" 2
  50              	.LVL1:
  51              		.thumb
  52              		.syntax unified
  53              	.L3:
  54 0014 FEE7     		b	.L3
  55              	.L2:
  56              	.LBE106:
  57              	.LBE105:
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  58              		.loc 1 1737 0
  59 0016 4169     		ldr	r1, [r0, #20]
  60 0018 0A4B     		ldr	r3, .L12
  61 001a 9942     		cmp	r1, r3
  62 001c 01D1     		bne	.L7
  63 001e 0123     		movs	r3, #1
  64 0020 00E0     		b	.L4
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 36


  65              	.L7:
  66 0022 0023     		movs	r3, #0
  67              	.L4:
  68              		.loc 1 1737 0 is_stmt 0 discriminator 4
  69 0024 43B1     		cbz	r3, .L8
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  70              		.loc 1 1740 0 is_stmt 1
  71 0026 926A     		ldr	r2, [r2, #40]
  72 0028 0749     		ldr	r1, .L12+4
  73 002a 8A42     		cmp	r2, r1
  74 002c 06D0     		beq	.L9
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  75              		.loc 1 1744 0
  76 002e 02B1     		cbz	r2, .L6
  77 0030 0023     		movs	r3, #0
  78              	.L6:
  79              		.loc 1 1744 0 is_stmt 0 discriminator 4
  80 0032 2BB9     		cbnz	r3, .L11
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  81              		.loc 1 1727 0 is_stmt 1
  82 0034 0020     		movs	r0, #0
  83              	.LVL2:
  84 0036 7047     		bx	lr
  85              	.LVL3:
  86              	.L8:
  87 0038 0020     		movs	r0, #0
  88              	.LVL4:
  89 003a 7047     		bx	lr
  90              	.LVL5:
  91              	.L9:
  92 003c 0020     		movs	r0, #0
  93              	.LVL6:
  94 003e 7047     		bx	lr
  95              	.LVL7:
  96              	.L11:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  97              		.loc 1 1746 0
  98 0040 0120     		movs	r0, #1
  99              	.LVL8:
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 37


1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 100              		.loc 1 1764 0
 101 0042 7047     		bx	lr
 102              	.L13:
 103              		.align	2
 104              	.L12:
 105 0044 00000000 		.word	.LANCHOR0
 106 0048 00000000 		.word	.LANCHOR1
 107              		.cfi_endproc
 108              	.LFE15:
 110              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 111              		.align	2
 112              		.thumb
 113              		.thumb_func
 115              	prvResetNextTaskUnblockTime:
 116              	.LFB43:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 38


1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 39


1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 40


1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 41


1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 42


2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 43


2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 44


2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 45


2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 46


2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 47


2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 48


2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 49


2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 50


2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 51


2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 52


2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 53


2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 54


2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 55


2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 56


2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 57


2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 58


2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 59


2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 60


3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 61


3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 62


3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 63


3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 64


3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 65


3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 66


3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 67


3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 68


3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 69


3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 70


3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 71


3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 117              		.loc 1 3725 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 122              		.loc 1 3728 0
 123 0000 0A4B     		ldr	r3, .L19
 124 0002 1B68     		ldr	r3, [r3]
 125 0004 1B68     		ldr	r3, [r3]
 126 0006 0BB9     		cbnz	r3, .L18
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 72


 127 0008 0123     		movs	r3, #1
 128 000a 00E0     		b	.L15
 129              	.L18:
 130 000c 0023     		movs	r3, #0
 131              	.L15:
 132              		.loc 1 3728 0 is_stmt 0 discriminator 4
 133 000e 23B1     		cbz	r3, .L16
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 134              		.loc 1 3734 0 is_stmt 1
 135 0010 4FF0FF32 		mov	r2, #-1
 136 0014 064B     		ldr	r3, .L19+4
 137 0016 1A60     		str	r2, [r3]
 138 0018 7047     		bx	lr
 139              	.L16:
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 140              		.loc 1 3742 0
 141 001a 044B     		ldr	r3, .L19
 142 001c 1B68     		ldr	r3, [r3]
 143 001e DB68     		ldr	r3, [r3, #12]
 144 0020 DB68     		ldr	r3, [r3, #12]
 145              	.LVL9:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 146              		.loc 1 3743 0
 147 0022 5A68     		ldr	r2, [r3, #4]
 148 0024 024B     		ldr	r3, .L19+4
 149              	.LVL10:
 150 0026 1A60     		str	r2, [r3]
 151 0028 7047     		bx	lr
 152              	.L20:
 153 002a 00BF     		.align	2
 154              	.L19:
 155 002c 00000000 		.word	.LANCHOR2
 156 0030 00000000 		.word	.LANCHOR3
 157              		.cfi_endproc
 158              	.LFE43:
 160              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 161              		.align	2
 162              		.thumb
 163              		.thumb_func
 165              	prvInitialiseNewTask:
 166              	.LFB7:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 167              		.loc 1 825 0
 168              		.cfi_startproc
 169              		@ args = 16, pretend = 0, frame = 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 73


 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              	.LVL11:
 172 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 32
 175              		.cfi_offset 4, -32
 176              		.cfi_offset 5, -28
 177              		.cfi_offset 6, -24
 178              		.cfi_offset 7, -20
 179              		.cfi_offset 8, -16
 180              		.cfi_offset 9, -12
 181              		.cfi_offset 10, -8
 182              		.cfi_offset 14, -4
 183 0004 8146     		mov	r9, r0
 184 0006 0D46     		mov	r5, r1
 185 0008 1746     		mov	r7, r2
 186 000a 9A46     		mov	r10, r3
 187 000c 089E     		ldr	r6, [sp, #32]
 188 000e DDF82480 		ldr	r8, [sp, #36]
 189 0012 0A9C     		ldr	r4, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 190              		.loc 1 847 0
 191 0014 9200     		lsls	r2, r2, #2
 192              	.LVL12:
 193 0016 A521     		movs	r1, #165
 194              	.LVL13:
 195 0018 206B     		ldr	r0, [r4, #48]
 196              	.LVL14:
 197 001a FFF7FEFF 		bl	memset
 198              	.LVL15:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 199              		.loc 1 857 0
 200 001e 236B     		ldr	r3, [r4, #48]
 201 0020 07F18042 		add	r2, r7, #1073741824
 202 0024 013A     		subs	r2, r2, #1
 203 0026 03EB8207 		add	r7, r3, r2, lsl #2
 204              	.LVL16:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205              		.loc 1 858 0
 206 002a 27F00707 		bic	r7, r7, #7
 207              	.LVL17:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 208              		.loc 1 885 0
 209 002e 0023     		movs	r3, #0
 210 0030 06E0     		b	.L22
 211              	.LVL18:
 212              	.L24:
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213              		.loc 1 887 0
 214 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 215 0034 E218     		adds	r2, r4, r3
 216 0036 82F83410 		strb	r1, [r2, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 217              		.loc 1 892 0
 218 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 219 003c 12B1     		cbz	r2, .L23
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 74


 220              		.loc 1 885 0 discriminator 2
 221 003e 0133     		adds	r3, r3, #1
 222              	.LVL19:
 223              	.L22:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 224              		.loc 1 885 0 is_stmt 0 discriminator 1
 225 0040 0F2B     		cmp	r3, #15
 226 0042 F6D9     		bls	.L24
 227              	.L23:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 228              		.loc 1 904 0 is_stmt 1
 229 0044 0023     		movs	r3, #0
 230              	.LVL20:
 231 0046 84F84330 		strb	r3, [r4, #67]
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 232              		.loc 1 908 0
 233 004a 062E     		cmp	r6, #6
 234 004c 00D9     		bls	.L25
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 235              		.loc 1 910 0
 236 004e 0626     		movs	r6, #6
 237              	.L25:
 238              	.LVL21:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 239              		.loc 1 917 0
 240 0050 E662     		str	r6, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 241              		.loc 1 920 0
 242 0052 6664     		str	r6, [r4, #68]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 243              		.loc 1 921 0
 244 0054 0025     		movs	r5, #0
 245              	.LVL22:
 246 0056 A564     		str	r5, [r4, #72]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 247              		.loc 1 925 0
 248 0058 201D     		adds	r0, r4, #4
 249 005a FFF7FEFF 		bl	vListInitialiseItem
 250              	.LVL23:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 251              		.loc 1 926 0
 252 005e 04F11800 		add	r0, r4, #24
 253 0062 FFF7FEFF 		bl	vListInitialiseItem
 254              	.LVL24:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255              		.loc 1 930 0
 256 0066 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 257              		.loc 1 933 0
 258 0068 C6F10706 		rsb	r6, r6, #7
 259              	.LVL25:
 260 006c A661     		str	r6, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 261              		.loc 1 934 0
 262 006e 6462     		str	r4, [r4, #36]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 263              		.loc 1 944 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 75


 264 0070 E564     		str	r5, [r4, #76]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 265              		.loc 1 976 0
 266 0072 2565     		str	r5, [r4, #80]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 267              		.loc 1 977 0
 268 0074 84F85450 		strb	r5, [r4, #84]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 269              		.loc 1 1004 0
 270 0078 5246     		mov	r2, r10
 271 007a 4946     		mov	r1, r9
 272 007c 3846     		mov	r0, r7
 273 007e FFF7FEFF 		bl	pxPortInitialiseStack
 274              	.LVL26:
 275 0082 2060     		str	r0, [r4]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 276              		.loc 1 1008 0
 277 0084 B8F1000F 		cmp	r8, #0
 278 0088 01D0     		beq	.L21
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 279              		.loc 1 1012 0
 280 008a C8F80040 		str	r4, [r8]
 281              	.L21:
 282 008e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 283              		.cfi_endproc
 284              	.LFE7:
 286 0092 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 287              		.align	2
 288              		.thumb
 289              		.thumb_func
 291              	prvInitialiseTaskLists:
 292              	.LFB40:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 293              		.loc 1 3431 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 38B5     		push	{r3, r4, r5, lr}
 298              	.LCFI1:
 299              		.cfi_def_cfa_offset 16
 300              		.cfi_offset 3, -16
 301              		.cfi_offset 4, -12
 302              		.cfi_offset 5, -8
 303              		.cfi_offset 14, -4
 304              	.LVL27:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 305              		.loc 1 3434 0
 306 0002 0024     		movs	r4, #0
 307 0004 07E0     		b	.L30
 308              	.LVL28:
 309              	.L31:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 310              		.loc 1 3436 0 discriminator 3
 311 0006 04EB8402 		add	r2, r4, r4, lsl #2
 312 000a 9300     		lsls	r3, r2, #2
 313 000c 0E48     		ldr	r0, .L33
 314 000e 1844     		add	r0, r0, r3
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 76


 315 0010 FFF7FEFF 		bl	vListInitialise
 316              	.LVL29:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 317              		.loc 1 3434 0 discriminator 3
 318 0014 0134     		adds	r4, r4, #1
 319              	.LVL30:
 320              	.L30:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 321              		.loc 1 3434 0 is_stmt 0 discriminator 1
 322 0016 062C     		cmp	r4, #6
 323 0018 F5D9     		bls	.L31
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 324              		.loc 1 3439 0 is_stmt 1
 325 001a 0C4D     		ldr	r5, .L33+4
 326 001c 2846     		mov	r0, r5
 327 001e FFF7FEFF 		bl	vListInitialise
 328              	.LVL31:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 329              		.loc 1 3440 0
 330 0022 0B4C     		ldr	r4, .L33+8
 331              	.LVL32:
 332 0024 2046     		mov	r0, r4
 333 0026 FFF7FEFF 		bl	vListInitialise
 334              	.LVL33:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335              		.loc 1 3441 0
 336 002a 0A48     		ldr	r0, .L33+12
 337 002c FFF7FEFF 		bl	vListInitialise
 338              	.LVL34:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 339              		.loc 1 3445 0
 340 0030 0948     		ldr	r0, .L33+16
 341 0032 FFF7FEFF 		bl	vListInitialise
 342              	.LVL35:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 343              		.loc 1 3451 0
 344 0036 0948     		ldr	r0, .L33+20
 345 0038 FFF7FEFF 		bl	vListInitialise
 346              	.LVL36:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 347              		.loc 1 3457 0
 348 003c 084B     		ldr	r3, .L33+24
 349 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 350              		.loc 1 3458 0
 351 0040 084B     		ldr	r3, .L33+28
 352 0042 1C60     		str	r4, [r3]
 353 0044 38BD     		pop	{r3, r4, r5, pc}
 354              	.L34:
 355 0046 00BF     		.align	2
 356              	.L33:
 357 0048 00000000 		.word	.LANCHOR4
 358 004c 00000000 		.word	.LANCHOR5
 359 0050 00000000 		.word	.LANCHOR6
 360 0054 00000000 		.word	.LANCHOR1
 361 0058 00000000 		.word	.LANCHOR7
 362 005c 00000000 		.word	.LANCHOR0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 77


 363 0060 00000000 		.word	.LANCHOR2
 364 0064 00000000 		.word	.LANCHOR8
 365              		.cfi_endproc
 366              	.LFE40:
 368              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 369              		.align	2
 370              		.thumb
 371              		.thumb_func
 373              	prvAddNewTaskToReadyList:
 374              	.LFB8:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 375              		.loc 1 1022 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              	.LVL37:
 380 0000 10B5     		push	{r4, lr}
 381              	.LCFI2:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 4, -8
 384              		.cfi_offset 14, -4
 385 0002 0446     		mov	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 386              		.loc 1 1025 0
 387 0004 FFF7FEFF 		bl	vPortEnterCritical
 388              	.LVL38:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 389              		.loc 1 1027 0
 390 0008 204A     		ldr	r2, .L40
 391 000a 1368     		ldr	r3, [r2]
 392 000c 0133     		adds	r3, r3, #1
 393 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 394              		.loc 1 1028 0
 395 0010 1F4B     		ldr	r3, .L40+4
 396 0012 1B68     		ldr	r3, [r3]
 397 0014 3BB9     		cbnz	r3, .L36
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398              		.loc 1 1032 0
 399 0016 1E4B     		ldr	r3, .L40+4
 400 0018 1C60     		str	r4, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 401              		.loc 1 1034 0
 402 001a 1368     		ldr	r3, [r2]
 403 001c 012B     		cmp	r3, #1
 404 001e 0DD1     		bne	.L37
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 405              		.loc 1 1039 0
 406 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 407              	.LVL39:
 408 0024 0AE0     		b	.L37
 409              	.L36:
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 410              		.loc 1 1051 0
 411 0026 1B4B     		ldr	r3, .L40+8
 412 0028 1B68     		ldr	r3, [r3]
 413 002a 3BB9     		cbnz	r3, .L37
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 78


1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 414              		.loc 1 1053 0
 415 002c 184B     		ldr	r3, .L40+4
 416 002e 1B68     		ldr	r3, [r3]
 417 0030 DA6A     		ldr	r2, [r3, #44]
 418 0032 E36A     		ldr	r3, [r4, #44]
 419 0034 9A42     		cmp	r2, r3
 420 0036 01D8     		bhi	.L37
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 421              		.loc 1 1055 0
 422 0038 154B     		ldr	r3, .L40+4
 423 003a 1C60     		str	r4, [r3]
 424              	.L37:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425              		.loc 1 1068 0
 426 003c 164A     		ldr	r2, .L40+12
 427 003e 1368     		ldr	r3, [r2]
 428 0040 0133     		adds	r3, r3, #1
 429 0042 1360     		str	r3, [r2]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430              		.loc 1 1078 0
 431 0044 E36A     		ldr	r3, [r4, #44]
 432 0046 0122     		movs	r2, #1
 433 0048 02FA03F1 		lsl	r1, r2, r3
 434 004c 1348     		ldr	r0, .L40+16
 435 004e 0268     		ldr	r2, [r0]
 436 0050 0A43     		orrs	r2, r2, r1
 437 0052 0260     		str	r2, [r0]
 438 0054 03EB8303 		add	r3, r3, r3, lsl #2
 439 0058 9A00     		lsls	r2, r3, #2
 440 005a 211D     		adds	r1, r4, #4
 441 005c 1048     		ldr	r0, .L40+20
 442 005e 1044     		add	r0, r0, r2
 443 0060 FFF7FEFF 		bl	vListInsertEnd
 444              	.LVL40:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 445              		.loc 1 1082 0
 446 0064 FFF7FEFF 		bl	vPortExitCritical
 447              	.LVL41:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 448              		.loc 1 1084 0
 449 0068 0A4B     		ldr	r3, .L40+8
 450 006a 1B68     		ldr	r3, [r3]
 451 006c 6BB1     		cbz	r3, .L35
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 452              		.loc 1 1088 0
 453 006e 084B     		ldr	r3, .L40+4
 454 0070 1B68     		ldr	r3, [r3]
 455 0072 DA6A     		ldr	r2, [r3, #44]
 456 0074 E36A     		ldr	r3, [r4, #44]
 457 0076 9A42     		cmp	r2, r3
 458 0078 07D2     		bcs	.L35
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 459              		.loc 1 1090 0
 460 007a 4FF08052 		mov	r2, #268435456
 461 007e 094B     		ldr	r3, .L40+24
 462 0080 1A60     		str	r2, [r3]
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 79


 463              		.syntax unified
 464              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 465 0082 BFF34F8F 		dsb
 466              	@ 0 "" 2
 467              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 468 0086 BFF36F8F 		isb
 469              	@ 0 "" 2
 470              		.thumb
 471              		.syntax unified
 472              	.L35:
 473 008a 10BD     		pop	{r4, pc}
 474              	.LVL42:
 475              	.L41:
 476              		.align	2
 477              	.L40:
 478 008c 00000000 		.word	.LANCHOR9
 479 0090 00000000 		.word	.LANCHOR10
 480 0094 00000000 		.word	.LANCHOR11
 481 0098 00000000 		.word	.LANCHOR12
 482 009c 00000000 		.word	.LANCHOR13
 483 00a0 00000000 		.word	.LANCHOR4
 484 00a4 04ED00E0 		.word	-536810236
 485              		.cfi_endproc
 486              	.LFE8:
 488              		.section	.text.prvDeleteTCB,"ax",%progbits
 489              		.align	2
 490              		.thumb
 491              		.thumb_func
 493              	prvDeleteTCB:
 494              	.LFB42:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 495              		.loc 1 3671 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              	.LVL43:
 500 0000 10B5     		push	{r4, lr}
 501              	.LCFI3:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 505 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 506              		.loc 1 3697 0
 507 0004 90F85530 		ldrb	r3, [r0, #85]	@ zero_extendqisi2
 508 0008 33B9     		cbnz	r3, .L43
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 509              		.loc 1 3701 0
 510 000a 006B     		ldr	r0, [r0, #48]
 511              	.LVL44:
 512 000c FFF7FEFF 		bl	vPortFree
 513              	.LVL45:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 514              		.loc 1 3702 0
 515 0010 2046     		mov	r0, r4
 516 0012 FFF7FEFF 		bl	vPortFree
 517              	.LVL46:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 80


 518 0016 10BD     		pop	{r4, pc}
 519              	.LVL47:
 520              	.L43:
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 521              		.loc 1 3704 0
 522 0018 012B     		cmp	r3, #1
 523 001a 02D1     		bne	.L45
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 524              		.loc 1 3708 0
 525 001c FFF7FEFF 		bl	vPortFree
 526              	.LVL48:
 527 0020 10BD     		pop	{r4, pc}
 528              	.LVL49:
 529              	.L45:
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 530              		.loc 1 3714 0
 531 0022 022B     		cmp	r3, #2
 532 0024 08D0     		beq	.L42
 533              	.LBB107:
 534              	.LBB108:
 535              		.loc 2 195 0
 536              		.syntax unified
 537              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 538 0026 4FF05003 			mov r3, #80												
 539 002a 83F31188 		msr basepri, r3											
 540 002e BFF36F8F 		isb														
 541 0032 BFF34F8F 		dsb														
 542              	
 543              	@ 0 "" 2
 544              	.LVL50:
 545              		.thumb
 546              		.syntax unified
 547              	.L46:
 548 0036 FEE7     		b	.L46
 549              	.L42:
 550 0038 10BD     		pop	{r4, pc}
 551              	.LBE108:
 552              	.LBE107:
 553              		.cfi_endproc
 554              	.LFE42:
 556 003a 00BF     		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 557              		.align	2
 558              		.thumb
 559              		.thumb_func
 561              	prvCheckTasksWaitingTermination:
 562              	.LFB41:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563              		.loc 1 3463 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 0
 566              		@ frame_needed = 0, uses_anonymous_args = 0
 567 0000 10B5     		push	{r4, lr}
 568              	.LCFI4:
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 4, -8
 571              		.cfi_offset 14, -4
 572              	.LBB109:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 81


3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 573              		.loc 1 3473 0
 574 0002 14E0     		b	.L49
 575              	.L50:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 576              		.loc 1 3475 0
 577 0004 FFF7FEFF 		bl	vPortEnterCritical
 578              	.LVL51:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 579              		.loc 1 3477 0
 580 0008 0B4B     		ldr	r3, .L52
 581 000a DB68     		ldr	r3, [r3, #12]
 582 000c DC68     		ldr	r4, [r3, #12]
 583              	.LVL52:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 584              		.loc 1 3478 0
 585 000e 201D     		adds	r0, r4, #4
 586 0010 FFF7FEFF 		bl	uxListRemove
 587              	.LVL53:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 588              		.loc 1 3479 0
 589 0014 094A     		ldr	r2, .L52+4
 590 0016 1368     		ldr	r3, [r2]
 591 0018 013B     		subs	r3, r3, #1
 592 001a 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 593              		.loc 1 3480 0
 594 001c 084A     		ldr	r2, .L52+8
 595 001e 1368     		ldr	r3, [r2]
 596 0020 013B     		subs	r3, r3, #1
 597 0022 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 598              		.loc 1 3482 0
 599 0024 FFF7FEFF 		bl	vPortExitCritical
 600              	.LVL54:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601              		.loc 1 3484 0
 602 0028 2046     		mov	r0, r4
 603 002a FFF7FEFF 		bl	prvDeleteTCB
 604              	.LVL55:
 605              	.L49:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606              		.loc 1 3473 0
 607 002e 044B     		ldr	r3, .L52+8
 608 0030 1B68     		ldr	r3, [r3]
 609 0032 002B     		cmp	r3, #0
 610 0034 E6D1     		bne	.L50
 611              	.LBE109:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 612              		.loc 1 3488 0
 613 0036 10BD     		pop	{r4, pc}
 614              	.L53:
 615              		.align	2
 616              	.L52:
 617 0038 00000000 		.word	.LANCHOR7
 618 003c 00000000 		.word	.LANCHOR9
 619 0040 00000000 		.word	.LANCHOR14
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 82


 620              		.cfi_endproc
 621              	.LFE41:
 623              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 624              		.align	2
 625              		.thumb
 626              		.thumb_func
 628              	prvAddCurrentTaskToDelayedList:
 629              	.LFB57:
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 83


3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 84


3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 85


3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 86


3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 87


4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 88


4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 89


4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 90


4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 91


4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 92


4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 93


4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 94


4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 95


4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 96


4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 97


4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 98


4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 99


4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 100


4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 101


4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 102


4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 630              		.loc 1 4907 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              	.LVL56:
 635 0000 70B5     		push	{r4, r5, r6, lr}
 636              	.LCFI5:
 637              		.cfi_def_cfa_offset 16
 638              		.cfi_offset 4, -16
 639              		.cfi_offset 5, -12
 640              		.cfi_offset 6, -8
 641              		.cfi_offset 14, -4
 642 0002 0446     		mov	r4, r0
 643 0004 0E46     		mov	r6, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 644              		.loc 1 4909 0
 645 0006 1D4B     		ldr	r3, .L60
 646 0008 1D68     		ldr	r5, [r3]
 647              	.LVL57:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 103


4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 648              		.loc 1 4922 0
 649 000a 1D4B     		ldr	r3, .L60+4
 650 000c 1868     		ldr	r0, [r3]
 651              	.LVL58:
 652 000e 0430     		adds	r0, r0, #4
 653 0010 FFF7FEFF 		bl	uxListRemove
 654              	.LVL59:
 655 0014 50B9     		cbnz	r0, .L55
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 656              		.loc 1 4926 0
 657 0016 1A4B     		ldr	r3, .L60+4
 658 0018 1B68     		ldr	r3, [r3]
 659 001a DA6A     		ldr	r2, [r3, #44]
 660 001c 0123     		movs	r3, #1
 661 001e 03FA02F2 		lsl	r2, r3, r2
 662 0022 1849     		ldr	r1, .L60+8
 663 0024 0B68     		ldr	r3, [r1]
 664 0026 23EA0203 		bic	r3, r3, r2
 665 002a 0B60     		str	r3, [r1]
 666              	.L55:
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 667              		.loc 1 4935 0
 668 002c B4F1FF3F 		cmp	r4, #-1
 669 0030 07D1     		bne	.L56
 670              		.loc 1 4935 0 is_stmt 0 discriminator 1
 671 0032 36B1     		cbz	r6, .L56
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 672              		.loc 1 4940 0 is_stmt 1
 673 0034 124B     		ldr	r3, .L60+4
 674 0036 1968     		ldr	r1, [r3]
 675 0038 0431     		adds	r1, r1, #4
 676 003a 1348     		ldr	r0, .L60+12
 677 003c FFF7FEFF 		bl	vListInsertEnd
 678              	.LVL60:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 104


 679 0040 70BD     		pop	{r4, r5, r6, pc}
 680              	.LVL61:
 681              	.L56:
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 682              		.loc 1 4947 0
 683 0042 2C44     		add	r4, r4, r5
 684              	.LVL62:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 685              		.loc 1 4950 0
 686 0044 0E4B     		ldr	r3, .L60+4
 687 0046 1B68     		ldr	r3, [r3]
 688 0048 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 689              		.loc 1 4952 0
 690 004a A542     		cmp	r5, r4
 691 004c 07D9     		bls	.L58
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 692              		.loc 1 4956 0
 693 004e 0F4B     		ldr	r3, .L60+16
 694 0050 1868     		ldr	r0, [r3]
 695 0052 0B4B     		ldr	r3, .L60+4
 696 0054 1968     		ldr	r1, [r3]
 697 0056 0431     		adds	r1, r1, #4
 698 0058 FFF7FEFF 		bl	vListInsert
 699              	.LVL63:
 700 005c 70BD     		pop	{r4, r5, r6, pc}
 701              	.LVL64:
 702              	.L58:
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 703              		.loc 1 4962 0
 704 005e 0C4B     		ldr	r3, .L60+20
 705 0060 1868     		ldr	r0, [r3]
 706 0062 074B     		ldr	r3, .L60+4
 707 0064 1968     		ldr	r1, [r3]
 708 0066 0431     		adds	r1, r1, #4
 709 0068 FFF7FEFF 		bl	vListInsert
 710              	.LVL65:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 105


4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 711              		.loc 1 4967 0
 712 006c 094B     		ldr	r3, .L60+24
 713 006e 1B68     		ldr	r3, [r3]
 714 0070 9C42     		cmp	r4, r3
 715 0072 01D2     		bcs	.L54
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 716              		.loc 1 4969 0
 717 0074 074B     		ldr	r3, .L60+24
 718 0076 1C60     		str	r4, [r3]
 719              	.L54:
 720 0078 70BD     		pop	{r4, r5, r6, pc}
 721              	.LVL66:
 722              	.L61:
 723 007a 00BF     		.align	2
 724              	.L60:
 725 007c 00000000 		.word	.LANCHOR15
 726 0080 00000000 		.word	.LANCHOR10
 727 0084 00000000 		.word	.LANCHOR13
 728 0088 00000000 		.word	.LANCHOR0
 729 008c 00000000 		.word	.LANCHOR8
 730 0090 00000000 		.word	.LANCHOR2
 731 0094 00000000 		.word	.LANCHOR3
 732              		.cfi_endproc
 733              	.LFE57:
 735              		.section	.text.prvIdleTask,"ax",%progbits
 736              		.align	2
 737              		.thumb
 738              		.thumb_func
 740              	prvIdleTask:
 741              	.LFB39:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 742              		.loc 1 3219 0
 743              		.cfi_startproc
 744              		@ Volatile: function does not return.
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              	.LVL67:
 748 0000 08B5     		push	{r3, lr}
 749              	.LCFI6:
 750              		.cfi_def_cfa_offset 8
 751              		.cfi_offset 3, -8
 752              		.cfi_offset 14, -4
 753              	.LVL68:
 754              	.L64:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 755              		.loc 1 3235 0
 756 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 757              	.LVL69:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 758              		.loc 1 3258 0
 759 0006 074B     		ldr	r3, .L66
 760 0008 1B68     		ldr	r3, [r3]
 761 000a 012B     		cmp	r3, #1
 762 000c 07D9     		bls	.L63
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 106


3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 763              		.loc 1 3260 0
 764 000e 4FF08052 		mov	r2, #268435456
 765 0012 054B     		ldr	r3, .L66+4
 766 0014 1A60     		str	r2, [r3]
 767              		.syntax unified
 768              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 769 0016 BFF34F8F 		dsb
 770              	@ 0 "" 2
 771              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 772 001a BFF36F8F 		isb
 773              	@ 0 "" 2
 774              		.thumb
 775              		.syntax unified
 776              	.L63:
 777              	.LBB110:
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 778              		.loc 1 3278 0
 779 001e FFF7FEFF 		bl	vApplicationIdleHook
 780              	.LVL70:
 781              	.LBE110:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 782              		.loc 1 3331 0
 783 0022 EEE7     		b	.L64
 784              	.L67:
 785              		.align	2
 786              	.L66:
 787 0024 00000000 		.word	.LANCHOR4
 788 0028 04ED00E0 		.word	-536810236
 789              		.cfi_endproc
 790              	.LFE39:
 792              		.section	.text.xTaskCreateStatic,"ax",%progbits
 793              		.align	2
 794              		.global	xTaskCreateStatic
 795              		.thumb
 796              		.thumb_func
 798              	xTaskCreateStatic:
 799              	.LFB5:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 800              		.loc 1 582 0
 801              		.cfi_startproc
 802              		@ args = 12, pretend = 0, frame = 8
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              	.LVL71:
 805 0000 70B5     		push	{r4, r5, r6, lr}
 806              	.LCFI7:
 807              		.cfi_def_cfa_offset 16
 808              		.cfi_offset 4, -16
 809              		.cfi_offset 5, -12
 810              		.cfi_offset 6, -8
 811              		.cfi_offset 14, -4
 812 0002 86B0     		sub	sp, sp, #24
 813              	.LCFI8:
 814              		.cfi_def_cfa_offset 40
 815 0004 0B9D     		ldr	r5, [sp, #44]
 816 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 107


 817              		.loc 1 586 0
 818 0008 45B9     		cbnz	r5, .L69
 819              	.LBB111:
 820              	.LBB112:
 821              		.loc 2 195 0
 822              		.syntax unified
 823              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 824 000a 4FF05003 			mov r3, #80												
 825 000e 83F31188 		msr basepri, r3											
 826 0012 BFF36F8F 		isb														
 827 0016 BFF34F8F 		dsb														
 828              	
 829              	@ 0 "" 2
 830              	.LVL72:
 831              		.thumb
 832              		.syntax unified
 833              	.L70:
 834 001a FEE7     		b	.L70
 835              	.LVL73:
 836              	.L69:
 837              	.LBE112:
 838              	.LBE111:
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 839              		.loc 1 587 0
 840 001c 44B9     		cbnz	r4, .L71
 841              	.LBB113:
 842              	.LBB114:
 843              		.loc 2 195 0
 844              		.syntax unified
 845              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 846 001e 4FF05003 			mov r3, #80												
 847 0022 83F31188 		msr basepri, r3											
 848 0026 BFF36F8F 		isb														
 849 002a BFF34F8F 		dsb														
 850              	
 851              	@ 0 "" 2
 852              	.LVL74:
 853              		.thumb
 854              		.syntax unified
 855              	.L72:
 856 002e FEE7     		b	.L72
 857              	.LVL75:
 858              	.L71:
 859              	.LBE114:
 860              	.LBE113:
 861              	.LBB115:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 862              		.loc 1 594 0
 863 0030 5826     		movs	r6, #88
 864 0032 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 865              		.loc 1 595 0
 866 0034 049E     		ldr	r6, [sp, #16]
 867 0036 582E     		cmp	r6, #88
 868 0038 08D0     		beq	.L73
 869              	.LBB116:
 870              	.LBB117:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 108


 871              		.loc 2 195 0
 872              		.syntax unified
 873              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 874 003a 4FF05003 			mov r3, #80												
 875 003e 83F31188 		msr basepri, r3											
 876 0042 BFF36F8F 		isb														
 877 0046 BFF34F8F 		dsb														
 878              	
 879              	@ 0 "" 2
 880              	.LVL76:
 881              		.thumb
 882              		.syntax unified
 883              	.L74:
 884 004a FEE7     		b	.L74
 885              	.LVL77:
 886              	.L73:
 887              	.LBE117:
 888              	.LBE116:
 889              	.LBE115:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 890              		.loc 1 600 0
 891 004c 8CB1     		cbz	r4, .L75
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 892              		.loc 1 600 0 is_stmt 0 discriminator 1
 893 004e 85B1     		cbz	r5, .L75
 894              	.LVL78:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895              		.loc 1 605 0 is_stmt 1
 896 0050 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 897              		.loc 1 611 0
 898 0052 0225     		movs	r5, #2
 899 0054 84F85550 		strb	r5, [r4, #85]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 900              		.loc 1 615 0
 901 0058 0025     		movs	r5, #0
 902 005a 0395     		str	r5, [sp, #12]
 903 005c 0294     		str	r4, [sp, #8]
 904 005e 05AD     		add	r5, sp, #20
 905 0060 0195     		str	r5, [sp, #4]
 906 0062 0A9D     		ldr	r5, [sp, #40]
 907 0064 0095     		str	r5, [sp]
 908 0066 FFF7FEFF 		bl	prvInitialiseNewTask
 909              	.LVL79:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910              		.loc 1 616 0
 911 006a 2046     		mov	r0, r4
 912 006c FFF7FEFF 		bl	prvAddNewTaskToReadyList
 913              	.LVL80:
 914 0070 01E0     		b	.L76
 915              	.LVL81:
 916              	.L75:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 917              		.loc 1 620 0
 918 0072 0023     		movs	r3, #0
 919              	.LVL82:
 920 0074 0593     		str	r3, [sp, #20]
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 109


 921              	.LVL83:
 922              	.L76:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923              		.loc 1 624 0
 924 0076 0598     		ldr	r0, [sp, #20]
 925 0078 06B0     		add	sp, sp, #24
 926              	.LCFI9:
 927              		.cfi_def_cfa_offset 16
 928              		@ sp needed
 929 007a 70BD     		pop	{r4, r5, r6, pc}
 930              		.cfi_endproc
 931              	.LFE5:
 933              		.section	.text.xTaskCreate,"ax",%progbits
 934              		.align	2
 935              		.global	xTaskCreate
 936              		.thumb
 937              		.thumb_func
 939              	xTaskCreate:
 940              	.LFB6:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 941              		.loc 1 732 0
 942              		.cfi_startproc
 943              		@ args = 8, pretend = 0, frame = 0
 944              		@ frame_needed = 0, uses_anonymous_args = 0
 945              	.LVL84:
 946 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 947              	.LCFI10:
 948              		.cfi_def_cfa_offset 28
 949              		.cfi_offset 4, -28
 950              		.cfi_offset 5, -24
 951              		.cfi_offset 6, -20
 952              		.cfi_offset 7, -16
 953              		.cfi_offset 8, -12
 954              		.cfi_offset 9, -8
 955              		.cfi_offset 14, -4
 956 0004 85B0     		sub	sp, sp, #20
 957              	.LCFI11:
 958              		.cfi_def_cfa_offset 48
 959 0006 0646     		mov	r6, r0
 960 0008 0F46     		mov	r7, r1
 961 000a 1546     		mov	r5, r2
 962 000c 9846     		mov	r8, r3
 963              	.LBB118:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964              		.loc 1 766 0
 965 000e 9000     		lsls	r0, r2, #2
 966              	.LVL85:
 967 0010 FFF7FEFF 		bl	pvPortMalloc
 968              	.LVL86:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 969              		.loc 1 768 0
 970 0014 60B1     		cbz	r0, .L82
 971 0016 8146     		mov	r9, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 972              		.loc 1 771 0
 973 0018 5820     		movs	r0, #88
 974              	.LVL87:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 110


 975 001a FFF7FEFF 		bl	pvPortMalloc
 976              	.LVL88:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 977              		.loc 1 773 0
 978 001e 0446     		mov	r4, r0
 979 0020 10B1     		cbz	r0, .L80
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 980              		.loc 1 776 0
 981 0022 C0F83090 		str	r9, [r0, #48]
 982 0026 04E0     		b	.L79
 983              	.L80:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 984              		.loc 1 782 0
 985 0028 4846     		mov	r0, r9
 986              	.LVL89:
 987 002a FFF7FEFF 		bl	vPortFree
 988              	.LVL90:
 989 002e 00E0     		b	.L79
 990              	.LVL91:
 991              	.L82:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 992              		.loc 1 787 0
 993 0030 0024     		movs	r4, #0
 994              	.LVL92:
 995              	.L79:
 996              	.LBE118:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 997              		.loc 1 792 0
 998 0032 9CB1     		cbz	r4, .L83
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 999              		.loc 1 798 0
 1000 0034 0023     		movs	r3, #0
 1001 0036 84F85530 		strb	r3, [r4, #85]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1002              		.loc 1 802 0
 1003 003a 0393     		str	r3, [sp, #12]
 1004 003c 0294     		str	r4, [sp, #8]
 1005 003e 0D9B     		ldr	r3, [sp, #52]
 1006 0040 0193     		str	r3, [sp, #4]
 1007 0042 0C9B     		ldr	r3, [sp, #48]
 1008 0044 0093     		str	r3, [sp]
 1009 0046 4346     		mov	r3, r8
 1010 0048 2A46     		mov	r2, r5
 1011 004a 3946     		mov	r1, r7
 1012 004c 3046     		mov	r0, r6
 1013 004e FFF7FEFF 		bl	prvInitialiseNewTask
 1014              	.LVL93:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1015              		.loc 1 803 0
 1016 0052 2046     		mov	r0, r4
 1017 0054 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1018              	.LVL94:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1019              		.loc 1 804 0
 1020 0058 0120     		movs	r0, #1
 1021 005a 01E0     		b	.L81
 1022              	.LVL95:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 111


 1023              	.L83:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1024              		.loc 1 808 0
 1025 005c 4FF0FF30 		mov	r0, #-1
 1026              	.L81:
 1027              	.LVL96:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1028              		.loc 1 812 0
 1029 0060 05B0     		add	sp, sp, #20
 1030              	.LCFI12:
 1031              		.cfi_def_cfa_offset 28
 1032              		@ sp needed
 1033 0062 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1034              		.cfi_endproc
 1035              	.LFE6:
 1037 0066 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 1038              		.align	2
 1039              		.global	vTaskDelete
 1040              		.thumb
 1041              		.thumb_func
 1043              	vTaskDelete:
 1044              	.LFB9:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1045              		.loc 1 1107 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 0
 1048              		@ frame_needed = 0, uses_anonymous_args = 0
 1049              	.LVL97:
 1050 0000 38B5     		push	{r3, r4, r5, lr}
 1051              	.LCFI13:
 1052              		.cfi_def_cfa_offset 16
 1053              		.cfi_offset 3, -16
 1054              		.cfi_offset 4, -12
 1055              		.cfi_offset 5, -8
 1056              		.cfi_offset 14, -4
 1057 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1058              		.loc 1 1110 0
 1059 0004 FFF7FEFF 		bl	vPortEnterCritical
 1060              	.LVL98:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1061              		.loc 1 1114 0
 1062 0008 0CB9     		cbnz	r4, .L86
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1063              		.loc 1 1114 0 is_stmt 0 discriminator 1
 1064 000a 2A4B     		ldr	r3, .L95
 1065 000c 1C68     		ldr	r4, [r3]
 1066              	.LVL99:
 1067              	.L86:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1068              		.loc 1 1117 0 is_stmt 1 discriminator 4
 1069 000e 251D     		adds	r5, r4, #4
 1070 0010 2846     		mov	r0, r5
 1071 0012 FFF7FEFF 		bl	uxListRemove
 1072              	.LVL100:
 1073 0016 70B9     		cbnz	r0, .L87
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 112


 1074              		.loc 1 1119 0
 1075 0018 E26A     		ldr	r2, [r4, #44]
 1076 001a 02EB8201 		add	r1, r2, r2, lsl #2
 1077 001e 8B00     		lsls	r3, r1, #2
 1078 0020 2549     		ldr	r1, .L95+4
 1079 0022 CB58     		ldr	r3, [r1, r3]
 1080 0024 3BB9     		cbnz	r3, .L87
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1081              		.loc 1 1119 0 is_stmt 0 discriminator 1
 1082 0026 0123     		movs	r3, #1
 1083 0028 03FA02F2 		lsl	r2, r3, r2
 1084 002c 2349     		ldr	r1, .L95+8
 1085 002e 0B68     		ldr	r3, [r1]
 1086 0030 23EA0203 		bic	r3, r3, r2
 1087 0034 0B60     		str	r3, [r1]
 1088              	.L87:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1089              		.loc 1 1127 0 is_stmt 1
 1090 0036 A36A     		ldr	r3, [r4, #40]
 1091 0038 1BB1     		cbz	r3, .L88
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1092              		.loc 1 1129 0
 1093 003a 04F11800 		add	r0, r4, #24
 1094 003e FFF7FEFF 		bl	uxListRemove
 1095              	.LVL101:
 1096              	.L88:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1097              		.loc 1 1140 0
 1098 0042 1F4A     		ldr	r2, .L95+12
 1099 0044 1368     		ldr	r3, [r2]
 1100 0046 0133     		adds	r3, r3, #1
 1101 0048 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1102              		.loc 1 1142 0
 1103 004a 1A4B     		ldr	r3, .L95
 1104 004c 1B68     		ldr	r3, [r3]
 1105 004e 9C42     		cmp	r4, r3
 1106 0050 08D1     		bne	.L89
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1107              		.loc 1 1149 0
 1108 0052 2946     		mov	r1, r5
 1109 0054 1B48     		ldr	r0, .L95+16
 1110 0056 FFF7FEFF 		bl	vListInsertEnd
 1111              	.LVL102:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1112              		.loc 1 1154 0
 1113 005a 1B4A     		ldr	r2, .L95+20
 1114 005c 1368     		ldr	r3, [r2]
 1115 005e 0133     		adds	r3, r3, #1
 1116 0060 1360     		str	r3, [r2]
 1117 0062 08E0     		b	.L90
 1118              	.L89:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1119              		.loc 1 1165 0
 1120 0064 194A     		ldr	r2, .L95+24
 1121 0066 1368     		ldr	r3, [r2]
 1122 0068 013B     		subs	r3, r3, #1
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 113


 1123 006a 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1124              		.loc 1 1166 0
 1125 006c 2046     		mov	r0, r4
 1126 006e FFF7FEFF 		bl	prvDeleteTCB
 1127              	.LVL103:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1128              		.loc 1 1170 0
 1129 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1130              	.LVL104:
 1131              	.L90:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1132              		.loc 1 1175 0
 1133 0076 FFF7FEFF 		bl	vPortExitCritical
 1134              	.LVL105:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1135              		.loc 1 1179 0
 1136 007a 154B     		ldr	r3, .L95+28
 1137 007c 1B68     		ldr	r3, [r3]
 1138 007e BBB1     		cbz	r3, .L85
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1139              		.loc 1 1181 0
 1140 0080 0C4B     		ldr	r3, .L95
 1141 0082 1B68     		ldr	r3, [r3]
 1142 0084 9C42     		cmp	r4, r3
 1143 0086 13D1     		bne	.L85
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1144              		.loc 1 1183 0
 1145 0088 124B     		ldr	r3, .L95+32
 1146 008a 1B68     		ldr	r3, [r3]
 1147 008c 43B1     		cbz	r3, .L92
 1148              	.LBB119:
 1149              	.LBB120:
 1150              		.loc 2 195 0
 1151              		.syntax unified
 1152              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1153 008e 4FF05003 			mov r3, #80												
 1154 0092 83F31188 		msr basepri, r3											
 1155 0096 BFF36F8F 		isb														
 1156 009a BFF34F8F 		dsb														
 1157              	
 1158              	@ 0 "" 2
 1159              	.LVL106:
 1160              		.thumb
 1161              		.syntax unified
 1162              	.L93:
 1163 009e FEE7     		b	.L93
 1164              	.L92:
 1165              	.LBE120:
 1166              	.LBE119:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1167              		.loc 1 1184 0
 1168 00a0 4FF08052 		mov	r2, #268435456
 1169 00a4 0C4B     		ldr	r3, .L95+36
 1170 00a6 1A60     		str	r2, [r3]
 1171              		.syntax unified
 1172              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 114


 1173 00a8 BFF34F8F 		dsb
 1174              	@ 0 "" 2
 1175              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1176 00ac BFF36F8F 		isb
 1177              	@ 0 "" 2
 1178              		.thumb
 1179              		.syntax unified
 1180              	.L85:
 1181 00b0 38BD     		pop	{r3, r4, r5, pc}
 1182              	.LVL107:
 1183              	.L96:
 1184 00b2 00BF     		.align	2
 1185              	.L95:
 1186 00b4 00000000 		.word	.LANCHOR10
 1187 00b8 00000000 		.word	.LANCHOR4
 1188 00bc 00000000 		.word	.LANCHOR13
 1189 00c0 00000000 		.word	.LANCHOR12
 1190 00c4 00000000 		.word	.LANCHOR7
 1191 00c8 00000000 		.word	.LANCHOR14
 1192 00cc 00000000 		.word	.LANCHOR9
 1193 00d0 00000000 		.word	.LANCHOR11
 1194 00d4 00000000 		.word	.LANCHOR16
 1195 00d8 04ED00E0 		.word	-536810236
 1196              		.cfi_endproc
 1197              	.LFE9:
 1199              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1200              		.align	2
 1201              		.global	uxTaskPriorityGet
 1202              		.thumb
 1203              		.thumb_func
 1205              	uxTaskPriorityGet:
 1206              	.LFB11:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1207              		.loc 1 1399 0
 1208              		.cfi_startproc
 1209              		@ args = 0, pretend = 0, frame = 0
 1210              		@ frame_needed = 0, uses_anonymous_args = 0
 1211              	.LVL108:
 1212 0000 10B5     		push	{r4, lr}
 1213              	.LCFI14:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 4, -8
 1216              		.cfi_offset 14, -4
 1217 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1218              		.loc 1 1403 0
 1219 0004 FFF7FEFF 		bl	vPortEnterCritical
 1220              	.LVL109:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1221              		.loc 1 1407 0
 1222 0008 0CB9     		cbnz	r4, .L98
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1223              		.loc 1 1407 0 is_stmt 0 discriminator 1
 1224 000a 034B     		ldr	r3, .L100
 1225 000c 1C68     		ldr	r4, [r3]
 1226              	.LVL110:
 1227              	.L98:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 115


1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1228              		.loc 1 1408 0 is_stmt 1 discriminator 4
 1229 000e E46A     		ldr	r4, [r4, #44]
 1230              	.LVL111:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1231              		.loc 1 1410 0 discriminator 4
 1232 0010 FFF7FEFF 		bl	vPortExitCritical
 1233              	.LVL112:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1234              		.loc 1 1413 0 discriminator 4
 1235 0014 2046     		mov	r0, r4
 1236 0016 10BD     		pop	{r4, pc}
 1237              	.LVL113:
 1238              	.L101:
 1239              		.align	2
 1240              	.L100:
 1241 0018 00000000 		.word	.LANCHOR10
 1242              		.cfi_endproc
 1243              	.LFE11:
 1245              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1246              		.align	2
 1247              		.global	uxTaskPriorityGetFromISR
 1248              		.thumb
 1249              		.thumb_func
 1251              	uxTaskPriorityGetFromISR:
 1252              	.LFB12:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1253              		.loc 1 1421 0
 1254              		.cfi_startproc
 1255              		@ args = 0, pretend = 0, frame = 0
 1256              		@ frame_needed = 0, uses_anonymous_args = 0
 1257              	.LVL114:
 1258 0000 10B5     		push	{r4, lr}
 1259              	.LCFI15:
 1260              		.cfi_def_cfa_offset 8
 1261              		.cfi_offset 4, -8
 1262              		.cfi_offset 14, -4
 1263 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1264              		.loc 1 1441 0
 1265 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1266              	.LVL115:
 1267              	.LBB121:
 1268              	.LBB122:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 116


 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1269              		.loc 2 211 0
 1270              		.syntax unified
 1271              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1272 0008 EFF31183 			mrs r3, basepri											
 1273 000c 4FF05002 		mov r2, #80												
 1274 0010 82F31188 		msr basepri, r2											
 1275 0014 BFF36F8F 		isb														
 1276 0018 BFF34F8F 		dsb														
 1277              	
 1278              	@ 0 "" 2
 1279              		.thumb
 1280              		.syntax unified
 1281              	.LBE122:
 1282              	.LBE121:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1283              		.loc 1 1447 0
 1284 001c 0CB9     		cbnz	r4, .L103
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1285              		.loc 1 1447 0 is_stmt 0 discriminator 1
 1286 001e 034A     		ldr	r2, .L105
 1287 0020 1468     		ldr	r4, [r2]
 1288              	.LVL116:
 1289              	.L103:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1290              		.loc 1 1448 0 is_stmt 1 discriminator 4
 1291 0022 E06A     		ldr	r0, [r4, #44]
 1292              	.LVL117:
 1293              	.LBB123:
 1294              	.LBB124:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1295              		.loc 2 229 0 discriminator 4
 1296              		.syntax unified
 1297              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1298 0024 83F31188 			msr basepri, r3	
 1299              	@ 0 "" 2
 1300              	.LVL118:
 1301              		.thumb
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 117


 1302              		.syntax unified
 1303              	.LBE124:
 1304              	.LBE123:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1305              		.loc 1 1453 0 discriminator 4
 1306 0028 10BD     		pop	{r4, pc}
 1307              	.LVL119:
 1308              	.L106:
 1309 002a 00BF     		.align	2
 1310              	.L105:
 1311 002c 00000000 		.word	.LANCHOR10
 1312              		.cfi_endproc
 1313              	.LFE12:
 1315              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1316              		.align	2
 1317              		.global	vTaskPrioritySet
 1318              		.thumb
 1319              		.thumb_func
 1321              	vTaskPrioritySet:
 1322              	.LFB13:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1323              		.loc 1 1461 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327              	.LVL120:
 1328 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1329              	.LCFI16:
 1330              		.cfi_def_cfa_offset 24
 1331              		.cfi_offset 3, -24
 1332              		.cfi_offset 4, -20
 1333              		.cfi_offset 5, -16
 1334              		.cfi_offset 6, -12
 1335              		.cfi_offset 7, -8
 1336              		.cfi_offset 14, -4
 1337              	.LVL121:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1338              		.loc 1 1466 0
 1339 0002 0629     		cmp	r1, #6
 1340 0004 08D9     		bls	.L108
 1341              	.LBB125:
 1342              	.LBB126:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1343              		.loc 2 195 0
 1344              		.syntax unified
 1345              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1346 0006 4FF05003 			mov r3, #80												
 1347 000a 83F31188 		msr basepri, r3											
 1348 000e BFF36F8F 		isb														
 1349 0012 BFF34F8F 		dsb														
 1350              	
 1351              	@ 0 "" 2
 1352              	.LVL122:
 1353              		.thumb
 1354              		.syntax unified
 1355              	.L109:
 1356 0016 FEE7     		b	.L109
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 118


 1357              	.L108:
 1358 0018 0446     		mov	r4, r0
 1359 001a 0D46     		mov	r5, r1
 1360              	.LBE126:
 1361              	.LBE125:
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1362              		.loc 1 1469 0
 1363 001c 0629     		cmp	r1, #6
 1364 001e 00D9     		bls	.L110
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1365              		.loc 1 1471 0
 1366 0020 0625     		movs	r5, #6
 1367              	.L110:
 1368              	.LVL123:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1369              		.loc 1 1478 0
 1370 0022 FFF7FEFF 		bl	vPortEnterCritical
 1371              	.LVL124:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1372              		.loc 1 1482 0
 1373 0026 0CB9     		cbnz	r4, .L111
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1374              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1375 0028 2D4B     		ldr	r3, .L126
 1376 002a 1C68     		ldr	r4, [r3]
 1377              	.LVL125:
 1378              	.L111:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1379              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1380 002c 636C     		ldr	r3, [r4, #68]
 1381              	.LVL126:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1382              		.loc 1 1496 0 discriminator 4
 1383 002e 9D42     		cmp	r5, r3
 1384 0030 53D0     		beq	.L112
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1385              		.loc 1 1500 0
 1386 0032 0AD9     		bls	.L113
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1387              		.loc 1 1502 0
 1388 0034 2A4A     		ldr	r2, .L126
 1389 0036 1268     		ldr	r2, [r2]
 1390 0038 9442     		cmp	r4, r2
 1391 003a 0CD0     		beq	.L121
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1392              		.loc 1 1507 0
 1393 003c 284A     		ldr	r2, .L126
 1394 003e 1268     		ldr	r2, [r2]
 1395 0040 D26A     		ldr	r2, [r2, #44]
 1396 0042 9542     		cmp	r5, r2
 1397 0044 09D2     		bcs	.L122
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1398              		.loc 1 1464 0
 1399 0046 0026     		movs	r6, #0
 1400 0048 0AE0     		b	.L114
 1401              	.L113:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 119


 1402              		.loc 1 1523 0
 1403 004a 254A     		ldr	r2, .L126
 1404 004c 1268     		ldr	r2, [r2]
 1405 004e 9442     		cmp	r4, r2
 1406 0050 05D0     		beq	.L123
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1407              		.loc 1 1464 0
 1408 0052 0026     		movs	r6, #0
 1409 0054 04E0     		b	.L114
 1410              	.L121:
 1411 0056 0026     		movs	r6, #0
 1412 0058 02E0     		b	.L114
 1413              	.L122:
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1414              		.loc 1 1509 0
 1415 005a 0126     		movs	r6, #1
 1416 005c 00E0     		b	.L114
 1417              	.L123:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1418              		.loc 1 1528 0
 1419 005e 0126     		movs	r6, #1
 1420              	.L114:
 1421              	.LVL127:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1422              		.loc 1 1540 0
 1423 0060 E76A     		ldr	r7, [r4, #44]
 1424              	.LVL128:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1425              		.loc 1 1546 0
 1426 0062 BB42     		cmp	r3, r7
 1427 0064 00D1     		bne	.L115
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1428              		.loc 1 1548 0
 1429 0066 E562     		str	r5, [r4, #44]
 1430              	.L115:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1431              		.loc 1 1556 0
 1432 0068 6564     		str	r5, [r4, #68]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1433              		.loc 1 1566 0
 1434 006a A369     		ldr	r3, [r4, #24]
 1435              	.LVL129:
 1436 006c 002B     		cmp	r3, #0
 1437 006e 02DB     		blt	.L116
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1438              		.loc 1 1568 0
 1439 0070 C5F10705 		rsb	r5, r5, #7
 1440              	.LVL130:
 1441 0074 A561     		str	r5, [r4, #24]
 1442              	.L116:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1443              		.loc 1 1579 0
 1444 0076 6169     		ldr	r1, [r4, #20]
 1445 0078 07EB8702 		add	r2, r7, r7, lsl #2
 1446 007c 9300     		lsls	r3, r2, #2
 1447 007e 194A     		ldr	r2, .L126+4
 1448 0080 1344     		add	r3, r3, r2
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 120


 1449 0082 9942     		cmp	r1, r3
 1450 0084 01D1     		bne	.L124
 1451 0086 0123     		movs	r3, #1
 1452 0088 00E0     		b	.L117
 1453              	.L124:
 1454 008a 0023     		movs	r3, #0
 1455              	.L117:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1456              		.loc 1 1579 0 is_stmt 0 discriminator 4
 1457 008c E3B1     		cbz	r3, .L118
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1458              		.loc 1 1584 0 is_stmt 1
 1459 008e 251D     		adds	r5, r4, #4
 1460 0090 2846     		mov	r0, r5
 1461 0092 FFF7FEFF 		bl	uxListRemove
 1462              	.LVL131:
 1463 0096 38B9     		cbnz	r0, .L119
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1464              		.loc 1 1589 0
 1465 0098 0123     		movs	r3, #1
 1466 009a 03FA07F7 		lsl	r7, r3, r7
 1467              	.LVL132:
 1468 009e 124A     		ldr	r2, .L126+8
 1469 00a0 1368     		ldr	r3, [r2]
 1470 00a2 23EA0703 		bic	r3, r3, r7
 1471 00a6 1360     		str	r3, [r2]
 1472              	.L119:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1473              		.loc 1 1595 0
 1474 00a8 E36A     		ldr	r3, [r4, #44]
 1475 00aa 0122     		movs	r2, #1
 1476 00ac 02FA03F1 		lsl	r1, r2, r3
 1477 00b0 0D48     		ldr	r0, .L126+8
 1478 00b2 0268     		ldr	r2, [r0]
 1479 00b4 0A43     		orrs	r2, r2, r1
 1480 00b6 0260     		str	r2, [r0]
 1481 00b8 03EB8303 		add	r3, r3, r3, lsl #2
 1482 00bc 9A00     		lsls	r2, r3, #2
 1483 00be 2946     		mov	r1, r5
 1484 00c0 0848     		ldr	r0, .L126+4
 1485 00c2 1044     		add	r0, r0, r2
 1486 00c4 FFF7FEFF 		bl	vListInsertEnd
 1487              	.LVL133:
 1488              	.L118:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1489              		.loc 1 1602 0
 1490 00c8 3EB1     		cbz	r6, .L112
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1491              		.loc 1 1604 0
 1492 00ca 4FF08052 		mov	r2, #268435456
 1493 00ce 074B     		ldr	r3, .L126+12
 1494 00d0 1A60     		str	r2, [r3]
 1495              		.syntax unified
 1496              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1497 00d2 BFF34F8F 		dsb
 1498              	@ 0 "" 2
 1499              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 121


 1500 00d6 BFF36F8F 		isb
 1501              	@ 0 "" 2
 1502              	.LVL134:
 1503              		.thumb
 1504              		.syntax unified
 1505              	.L112:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1506              		.loc 1 1616 0
 1507 00da FFF7FEFF 		bl	vPortExitCritical
 1508              	.LVL135:
 1509 00de F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1510              	.LVL136:
 1511              	.L127:
 1512              		.align	2
 1513              	.L126:
 1514 00e0 00000000 		.word	.LANCHOR10
 1515 00e4 00000000 		.word	.LANCHOR4
 1516 00e8 00000000 		.word	.LANCHOR13
 1517 00ec 04ED00E0 		.word	-536810236
 1518              		.cfi_endproc
 1519              	.LFE13:
 1521              		.section	.text.vTaskResume,"ax",%progbits
 1522              		.align	2
 1523              		.global	vTaskResume
 1524              		.thumb
 1525              		.thumb_func
 1527              	vTaskResume:
 1528              	.LFB16:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1529              		.loc 1 1772 0
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 0
 1532              		@ frame_needed = 0, uses_anonymous_args = 0
 1533              	.LVL137:
 1534 0000 38B5     		push	{r3, r4, r5, lr}
 1535              	.LCFI17:
 1536              		.cfi_def_cfa_offset 16
 1537              		.cfi_offset 3, -16
 1538              		.cfi_offset 4, -12
 1539              		.cfi_offset 5, -8
 1540              		.cfi_offset 14, -4
 1541              	.LVL138:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1542              		.loc 1 1776 0
 1543 0002 40B9     		cbnz	r0, .L129
 1544              	.LBB127:
 1545              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1546              		.loc 2 195 0
 1547              		.syntax unified
 1548              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1549 0004 4FF05003 			mov r3, #80												
 1550 0008 83F31188 		msr basepri, r3											
 1551 000c BFF36F8F 		isb														
 1552 0010 BFF34F8F 		dsb														
 1553              	
 1554              	@ 0 "" 2
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 122


 1555              	.LVL139:
 1556              		.thumb
 1557              		.syntax unified
 1558              	.L130:
 1559 0014 FEE7     		b	.L130
 1560              	.L129:
 1561 0016 0446     		mov	r4, r0
 1562              	.LBE128:
 1563              	.LBE127:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1564              		.loc 1 1780 0
 1565 0018 68B3     		cbz	r0, .L128
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1566              		.loc 1 1780 0 is_stmt 0 discriminator 1
 1567 001a 174B     		ldr	r3, .L134
 1568 001c 1B68     		ldr	r3, [r3]
 1569 001e 9842     		cmp	r0, r3
 1570 0020 29D0     		beq	.L128
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1571              		.loc 1 1782 0 is_stmt 1
 1572 0022 FFF7FEFF 		bl	vPortEnterCritical
 1573              	.LVL140:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1574              		.loc 1 1784 0
 1575 0026 2046     		mov	r0, r4
 1576 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1577              	.LVL141:
 1578 002c 08B3     		cbz	r0, .L132
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1579              		.loc 1 1790 0
 1580 002e 251D     		adds	r5, r4, #4
 1581 0030 2846     		mov	r0, r5
 1582 0032 FFF7FEFF 		bl	uxListRemove
 1583              	.LVL142:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1584              		.loc 1 1791 0
 1585 0036 E36A     		ldr	r3, [r4, #44]
 1586 0038 0122     		movs	r2, #1
 1587 003a 02FA03F1 		lsl	r1, r2, r3
 1588 003e 0F48     		ldr	r0, .L134+4
 1589 0040 0268     		ldr	r2, [r0]
 1590 0042 0A43     		orrs	r2, r2, r1
 1591 0044 0260     		str	r2, [r0]
 1592 0046 03EB8303 		add	r3, r3, r3, lsl #2
 1593 004a 9A00     		lsls	r2, r3, #2
 1594 004c 2946     		mov	r1, r5
 1595 004e 0C48     		ldr	r0, .L134+8
 1596 0050 1044     		add	r0, r0, r2
 1597 0052 FFF7FEFF 		bl	vListInsertEnd
 1598              	.LVL143:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1599              		.loc 1 1794 0
 1600 0056 E26A     		ldr	r2, [r4, #44]
 1601 0058 074B     		ldr	r3, .L134
 1602 005a 1B68     		ldr	r3, [r3]
 1603 005c DB6A     		ldr	r3, [r3, #44]
 1604 005e 9A42     		cmp	r2, r3
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 123


 1605 0060 07D3     		bcc	.L132
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1606              		.loc 1 1799 0
 1607 0062 4FF08052 		mov	r2, #268435456
 1608 0066 074B     		ldr	r3, .L134+12
 1609 0068 1A60     		str	r2, [r3]
 1610              		.syntax unified
 1611              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1612 006a BFF34F8F 		dsb
 1613              	@ 0 "" 2
 1614              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1615 006e BFF36F8F 		isb
 1616              	@ 0 "" 2
 1617              		.thumb
 1618              		.syntax unified
 1619              	.L132:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1620              		.loc 1 1811 0
 1621 0072 FFF7FEFF 		bl	vPortExitCritical
 1622              	.LVL144:
 1623              	.L128:
 1624 0076 38BD     		pop	{r3, r4, r5, pc}
 1625              	.LVL145:
 1626              	.L135:
 1627              		.align	2
 1628              	.L134:
 1629 0078 00000000 		.word	.LANCHOR10
 1630 007c 00000000 		.word	.LANCHOR13
 1631 0080 00000000 		.word	.LANCHOR4
 1632 0084 04ED00E0 		.word	-536810236
 1633              		.cfi_endproc
 1634              	.LFE16:
 1636              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1637              		.align	2
 1638              		.global	xTaskResumeFromISR
 1639              		.thumb
 1640              		.thumb_func
 1642              	xTaskResumeFromISR:
 1643              	.LFB17:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1644              		.loc 1 1826 0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              	.LVL146:
 1649 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1650              	.LCFI18:
 1651              		.cfi_def_cfa_offset 24
 1652              		.cfi_offset 3, -24
 1653              		.cfi_offset 4, -20
 1654              		.cfi_offset 5, -16
 1655              		.cfi_offset 6, -12
 1656              		.cfi_offset 7, -8
 1657              		.cfi_offset 14, -4
 1658              	.LVL147:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1659              		.loc 1 1831 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 124


 1660 0002 40B9     		cbnz	r0, .L137
 1661              	.LBB129:
 1662              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1663              		.loc 2 195 0
 1664              		.syntax unified
 1665              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1666 0004 4FF05003 			mov r3, #80												
 1667 0008 83F31188 		msr basepri, r3											
 1668 000c BFF36F8F 		isb														
 1669 0010 BFF34F8F 		dsb														
 1670              	
 1671              	@ 0 "" 2
 1672              	.LVL148:
 1673              		.thumb
 1674              		.syntax unified
 1675              	.L138:
 1676 0014 FEE7     		b	.L138
 1677              	.L137:
 1678 0016 0446     		mov	r4, r0
 1679              	.LBE130:
 1680              	.LBE129:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1681              		.loc 1 1849 0
 1682 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1683              	.LVL149:
 1684              	.LBB131:
 1685              	.LBB132:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1686              		.loc 2 211 0
 1687              		.syntax unified
 1688              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1689 001c EFF31187 			mrs r7, basepri											
 1690 0020 4FF05003 		mov r3, #80												
 1691 0024 83F31188 		msr basepri, r3											
 1692 0028 BFF36F8F 		isb														
 1693 002c BFF34F8F 		dsb														
 1694              	
 1695              	@ 0 "" 2
 1696              		.thumb
 1697              		.syntax unified
 1698              	.LBE132:
 1699              	.LBE131:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1700              		.loc 1 1853 0
 1701 0030 2046     		mov	r0, r4
 1702 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1703              	.LVL150:
 1704 0036 38B3     		cbz	r0, .L142
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1705              		.loc 1 1858 0
 1706 0038 164B     		ldr	r3, .L145
 1707 003a 1B68     		ldr	r3, [r3]
 1708 003c EBB9     		cbnz	r3, .L140
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1709              		.loc 1 1862 0
 1710 003e E26A     		ldr	r2, [r4, #44]
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 125


 1711 0040 154B     		ldr	r3, .L145+4
 1712 0042 1B68     		ldr	r3, [r3]
 1713 0044 DB6A     		ldr	r3, [r3, #44]
 1714 0046 9A42     		cmp	r2, r3
 1715 0048 01D2     		bcs	.L143
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1716              		.loc 1 1827 0
 1717 004a 0025     		movs	r5, #0
 1718 004c 00E0     		b	.L141
 1719              	.L143:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1720              		.loc 1 1864 0
 1721 004e 0125     		movs	r5, #1
 1722              	.L141:
 1723              	.LVL151:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1724              		.loc 1 1871 0
 1725 0050 261D     		adds	r6, r4, #4
 1726 0052 3046     		mov	r0, r6
 1727 0054 FFF7FEFF 		bl	uxListRemove
 1728              	.LVL152:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1729              		.loc 1 1872 0
 1730 0058 E36A     		ldr	r3, [r4, #44]
 1731 005a 0122     		movs	r2, #1
 1732 005c 02FA03F1 		lsl	r1, r2, r3
 1733 0060 0E48     		ldr	r0, .L145+8
 1734 0062 0268     		ldr	r2, [r0]
 1735 0064 0A43     		orrs	r2, r2, r1
 1736 0066 0260     		str	r2, [r0]
 1737 0068 03EB8303 		add	r3, r3, r3, lsl #2
 1738 006c 9A00     		lsls	r2, r3, #2
 1739 006e 3146     		mov	r1, r6
 1740 0070 0B48     		ldr	r0, .L145+12
 1741 0072 1044     		add	r0, r0, r2
 1742 0074 FFF7FEFF 		bl	vListInsertEnd
 1743              	.LVL153:
 1744 0078 07E0     		b	.L139
 1745              	.LVL154:
 1746              	.L140:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1747              		.loc 1 1879 0
 1748 007a 04F11801 		add	r1, r4, #24
 1749 007e 0948     		ldr	r0, .L145+16
 1750 0080 FFF7FEFF 		bl	vListInsertEnd
 1751              	.LVL155:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1752              		.loc 1 1827 0
 1753 0084 0025     		movs	r5, #0
 1754 0086 00E0     		b	.L139
 1755              	.L142:
 1756 0088 0025     		movs	r5, #0
 1757              	.LVL156:
 1758              	.L139:
 1759              	.LBB133:
 1760              	.LBB134:
 1761              		.loc 2 229 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 126


 1762              		.syntax unified
 1763              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1764 008a 87F31188 			msr basepri, r7	
 1765              	@ 0 "" 2
 1766              	.LVL157:
 1767              		.thumb
 1768              		.syntax unified
 1769              	.LBE134:
 1770              	.LBE133:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1771              		.loc 1 1890 0
 1772 008e 2846     		mov	r0, r5
 1773 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1774              	.LVL158:
 1775              	.L146:
 1776 0092 00BF     		.align	2
 1777              	.L145:
 1778 0094 00000000 		.word	.LANCHOR16
 1779 0098 00000000 		.word	.LANCHOR10
 1780 009c 00000000 		.word	.LANCHOR13
 1781 00a0 00000000 		.word	.LANCHOR4
 1782 00a4 00000000 		.word	.LANCHOR1
 1783              		.cfi_endproc
 1784              	.LFE17:
 1786              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1787              		.align	2
 1788              		.global	vTaskStartScheduler
 1789              		.thumb
 1790              		.thumb_func
 1792              	vTaskStartScheduler:
 1793              	.LFB18:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1794              		.loc 1 1896 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 16
 1797              		@ frame_needed = 0, uses_anonymous_args = 0
 1798 0000 10B5     		push	{r4, lr}
 1799              	.LCFI19:
 1800              		.cfi_def_cfa_offset 8
 1801              		.cfi_offset 4, -8
 1802              		.cfi_offset 14, -4
 1803 0002 88B0     		sub	sp, sp, #32
 1804              	.LCFI20:
 1805              		.cfi_def_cfa_offset 40
 1806              	.LBB135:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1807              		.loc 1 1902 0
 1808 0004 0024     		movs	r4, #0
 1809 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1810              		.loc 1 1903 0
 1811 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1812              		.loc 1 1908 0
 1813 000a 07AA     		add	r2, sp, #28
 1814 000c 06A9     		add	r1, sp, #24
 1815 000e 05A8     		add	r0, sp, #20
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 127


 1816 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1817              	.LVL159:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1818              		.loc 1 1909 0
 1819 0014 059B     		ldr	r3, [sp, #20]
 1820 0016 0293     		str	r3, [sp, #8]
 1821 0018 069B     		ldr	r3, [sp, #24]
 1822 001a 0193     		str	r3, [sp, #4]
 1823 001c 0094     		str	r4, [sp]
 1824 001e 2346     		mov	r3, r4
 1825 0020 079A     		ldr	r2, [sp, #28]
 1826 0022 0F49     		ldr	r1, .L154
 1827 0024 0F48     		ldr	r0, .L154+4
 1828 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1829              	.LVL160:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1830              		.loc 1 1917 0
 1831 002a 08B1     		cbz	r0, .L152
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1832              		.loc 1 1919 0
 1833 002c 0123     		movs	r3, #1
 1834 002e 00E0     		b	.L148
 1835              	.L152:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1836              		.loc 1 1923 0
 1837 0030 0023     		movs	r3, #0
 1838              	.L148:
 1839              	.LVL161:
 1840              	.LBE135:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1841              		.loc 1 1951 0
 1842 0032 9BB1     		cbz	r3, .L147
 1843              	.LBB136:
 1844              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1845              		.loc 2 195 0
 1846              		.syntax unified
 1847              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1848 0034 4FF05003 			mov r3, #80												
 1849 0038 83F31188 		msr basepri, r3											
 1850 003c BFF36F8F 		isb														
 1851 0040 BFF34F8F 		dsb														
 1852              	
 1853              	@ 0 "" 2
 1854              	.LVL162:
 1855              		.thumb
 1856              		.syntax unified
 1857              	.LBE137:
 1858              	.LBE136:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1859              		.loc 1 1977 0
 1860 0044 4FF0FF32 		mov	r2, #-1
 1861 0048 074B     		ldr	r3, .L154+8
 1862 004a 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1863              		.loc 1 1978 0
 1864 004c 0122     		movs	r2, #1
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 128


 1865 004e 074B     		ldr	r3, .L154+12
 1866 0050 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1867              		.loc 1 1979 0
 1868 0052 0022     		movs	r2, #0
 1869 0054 064B     		ldr	r3, .L154+16
 1870 0056 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1871              		.loc 1 1991 0
 1872 0058 FFF7FEFF 		bl	xPortStartScheduler
 1873              	.LVL163:
 1874              	.L147:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1875              		.loc 1 2012 0
 1876 005c 08B0     		add	sp, sp, #32
 1877              	.LCFI21:
 1878              		.cfi_def_cfa_offset 8
 1879              		@ sp needed
 1880 005e 10BD     		pop	{r4, pc}
 1881              	.L155:
 1882              		.align	2
 1883              	.L154:
 1884 0060 00000000 		.word	.LC0
 1885 0064 00000000 		.word	prvIdleTask
 1886 0068 00000000 		.word	.LANCHOR3
 1887 006c 00000000 		.word	.LANCHOR11
 1888 0070 00000000 		.word	.LANCHOR15
 1889              		.cfi_endproc
 1890              	.LFE18:
 1892              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1893              		.align	2
 1894              		.global	vTaskEndScheduler
 1895              		.thumb
 1896              		.thumb_func
 1898              	vTaskEndScheduler:
 1899              	.LFB19:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1900              		.loc 1 2016 0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 0
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 1904 0000 08B5     		push	{r3, lr}
 1905              	.LCFI22:
 1906              		.cfi_def_cfa_offset 8
 1907              		.cfi_offset 3, -8
 1908              		.cfi_offset 14, -4
 1909              	.LBB138:
 1910              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1911              		.loc 2 195 0
 1912              		.syntax unified
 1913              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1914 0002 4FF05003 			mov r3, #80												
 1915 0006 83F31188 		msr basepri, r3											
 1916 000a BFF36F8F 		isb														
 1917 000e BFF34F8F 		dsb														
 1918              	
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 129


 1919              	@ 0 "" 2
 1920              		.thumb
 1921              		.syntax unified
 1922              	.LBE139:
 1923              	.LBE138:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1924              		.loc 1 2021 0
 1925 0012 0022     		movs	r2, #0
 1926 0014 024B     		ldr	r3, .L158
 1927 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1928              		.loc 1 2022 0
 1929 0018 FFF7FEFF 		bl	vPortEndScheduler
 1930              	.LVL164:
 1931 001c 08BD     		pop	{r3, pc}
 1932              	.L159:
 1933 001e 00BF     		.align	2
 1934              	.L158:
 1935 0020 00000000 		.word	.LANCHOR11
 1936              		.cfi_endproc
 1937              	.LFE19:
 1939              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1940              		.align	2
 1941              		.global	vTaskSuspendAll
 1942              		.thumb
 1943              		.thumb_func
 1945              	vTaskSuspendAll:
 1946              	.LFB20:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1947              		.loc 1 2027 0
 1948              		.cfi_startproc
 1949              		@ args = 0, pretend = 0, frame = 0
 1950              		@ frame_needed = 0, uses_anonymous_args = 0
 1951              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1952              		.loc 1 2032 0
 1953 0000 024A     		ldr	r2, .L161
 1954 0002 1368     		ldr	r3, [r2]
 1955 0004 0133     		adds	r3, r3, #1
 1956 0006 1360     		str	r3, [r2]
 1957 0008 7047     		bx	lr
 1958              	.L162:
 1959 000a 00BF     		.align	2
 1960              	.L161:
 1961 000c 00000000 		.word	.LANCHOR16
 1962              		.cfi_endproc
 1963              	.LFE20:
 1965              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1966              		.align	2
 1967              		.global	xTaskGetTickCount
 1968              		.thumb
 1969              		.thumb_func
 1971              	xTaskGetTickCount:
 1972              	.LFB22:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1973              		.loc 1 2210 0
 1974              		.cfi_startproc
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 130


 1975              		@ args = 0, pretend = 0, frame = 0
 1976              		@ frame_needed = 0, uses_anonymous_args = 0
 1977              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1978              		.loc 1 2216 0
 1979 0000 014B     		ldr	r3, .L164
 1980 0002 1868     		ldr	r0, [r3]
 1981              	.LVL165:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1982              		.loc 1 2221 0
 1983 0004 7047     		bx	lr
 1984              	.L165:
 1985 0006 00BF     		.align	2
 1986              	.L164:
 1987 0008 00000000 		.word	.LANCHOR15
 1988              		.cfi_endproc
 1989              	.LFE22:
 1991              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1992              		.align	2
 1993              		.global	xTaskGetTickCountFromISR
 1994              		.thumb
 1995              		.thumb_func
 1997              	xTaskGetTickCountFromISR:
 1998              	.LFB23:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1999              		.loc 1 2225 0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 0
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 2003 0000 08B5     		push	{r3, lr}
 2004              	.LCFI23:
 2005              		.cfi_def_cfa_offset 8
 2006              		.cfi_offset 3, -8
 2007              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2008              		.loc 1 2243 0
 2009 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2010              	.LVL166:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2011              		.loc 1 2247 0
 2012 0006 014B     		ldr	r3, .L168
 2013 0008 1868     		ldr	r0, [r3]
 2014              	.LVL167:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2015              		.loc 1 2252 0
 2016 000a 08BD     		pop	{r3, pc}
 2017              	.L169:
 2018              		.align	2
 2019              	.L168:
 2020 000c 00000000 		.word	.LANCHOR15
 2021              		.cfi_endproc
 2022              	.LFE23:
 2024              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2025              		.align	2
 2026              		.global	uxTaskGetNumberOfTasks
 2027              		.thumb
 2028              		.thumb_func
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 131


 2030              	uxTaskGetNumberOfTasks:
 2031              	.LFB24:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2032              		.loc 1 2256 0
 2033              		.cfi_startproc
 2034              		@ args = 0, pretend = 0, frame = 0
 2035              		@ frame_needed = 0, uses_anonymous_args = 0
 2036              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2037              		.loc 1 2259 0
 2038 0000 014B     		ldr	r3, .L171
 2039 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2040              		.loc 1 2260 0
 2041 0004 7047     		bx	lr
 2042              	.L172:
 2043 0006 00BF     		.align	2
 2044              	.L171:
 2045 0008 00000000 		.word	.LANCHOR9
 2046              		.cfi_endproc
 2047              	.LFE24:
 2049              		.section	.text.pcTaskGetName,"ax",%progbits
 2050              		.align	2
 2051              		.global	pcTaskGetName
 2052              		.thumb
 2053              		.thumb_func
 2055              	pcTaskGetName:
 2056              	.LFB25:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2057              		.loc 1 2264 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 0
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061              		@ link register save eliminated.
 2062              	.LVL168:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2063              		.loc 1 2269 0
 2064 0000 0346     		mov	r3, r0
 2065 0002 08B9     		cbnz	r0, .L174
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2066              		.loc 1 2269 0 is_stmt 0 discriminator 1
 2067 0004 074B     		ldr	r3, .L177
 2068 0006 1B68     		ldr	r3, [r3]
 2069              	.LVL169:
 2070              	.L174:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2071              		.loc 1 2270 0 is_stmt 1 discriminator 4
 2072 0008 43B9     		cbnz	r3, .L175
 2073              	.LBB140:
 2074              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2075              		.loc 2 195 0
 2076              		.syntax unified
 2077              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2078 000a 4FF05003 			mov r3, #80												
 2079 000e 83F31188 		msr basepri, r3											
 2080 0012 BFF36F8F 		isb														
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 132


 2081 0016 BFF34F8F 		dsb														
 2082              	
 2083              	@ 0 "" 2
 2084              	.LVL170:
 2085              		.thumb
 2086              		.syntax unified
 2087              	.L176:
 2088 001a FEE7     		b	.L176
 2089              	.LVL171:
 2090              	.L175:
 2091              	.LBE141:
 2092              	.LBE140:
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2093              		.loc 1 2272 0
 2094 001c 03F13400 		add	r0, r3, #52
 2095 0020 7047     		bx	lr
 2096              	.L178:
 2097 0022 00BF     		.align	2
 2098              	.L177:
 2099 0024 00000000 		.word	.LANCHOR10
 2100              		.cfi_endproc
 2101              	.LFE25:
 2103              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2104              		.align	2
 2105              		.global	xTaskIncrementTick
 2106              		.thumb
 2107              		.thumb_func
 2109              	xTaskIncrementTick:
 2110              	.LFB26:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2111              		.loc 1 2584 0
 2112              		.cfi_startproc
 2113              		@ args = 0, pretend = 0, frame = 0
 2114              		@ frame_needed = 0, uses_anonymous_args = 0
 2115 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2116              	.LCFI24:
 2117              		.cfi_def_cfa_offset 24
 2118              		.cfi_offset 3, -24
 2119              		.cfi_offset 4, -20
 2120              		.cfi_offset 5, -16
 2121              		.cfi_offset 6, -12
 2122              		.cfi_offset 7, -8
 2123              		.cfi_offset 14, -4
 2124              	.LVL172:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2125              		.loc 1 2593 0
 2126 0002 3D4B     		ldr	r3, .L200
 2127 0004 1B68     		ldr	r3, [r3]
 2128 0006 002B     		cmp	r3, #0
 2129 0008 69D1     		bne	.L180
 2130              	.LBB142:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2131              		.loc 1 2597 0
 2132 000a 3C4B     		ldr	r3, .L200+4
 2133 000c 1D68     		ldr	r5, [r3]
 2134 000e 0135     		adds	r5, r5, #1
 2135              	.LVL173:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 133


2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2136              		.loc 1 2601 0
 2137 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2138              		.loc 1 2603 0
 2139 0012 C5B9     		cbnz	r5, .L181
 2140              	.LBB143:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2141              		.loc 1 2605 0
 2142 0014 3A4B     		ldr	r3, .L200+8
 2143 0016 1B68     		ldr	r3, [r3]
 2144 0018 1B68     		ldr	r3, [r3]
 2145 001a 43B1     		cbz	r3, .L182
 2146              	.LBB144:
 2147              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2148              		.loc 2 195 0
 2149              		.syntax unified
 2150              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2151 001c 4FF05003 			mov r3, #80												
 2152 0020 83F31188 		msr basepri, r3											
 2153 0024 BFF36F8F 		isb														
 2154 0028 BFF34F8F 		dsb														
 2155              	
 2156              	@ 0 "" 2
 2157              	.LVL174:
 2158              		.thumb
 2159              		.syntax unified
 2160              	.L183:
 2161 002c FEE7     		b	.L183
 2162              	.L182:
 2163              	.LBE145:
 2164              	.LBE144:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2165              		.loc 1 2605 0 discriminator 2
 2166 002e 344A     		ldr	r2, .L200+8
 2167 0030 1168     		ldr	r1, [r2]
 2168              	.LVL175:
 2169 0032 344B     		ldr	r3, .L200+12
 2170 0034 1868     		ldr	r0, [r3]
 2171 0036 1060     		str	r0, [r2]
 2172 0038 1960     		str	r1, [r3]
 2173 003a 334A     		ldr	r2, .L200+16
 2174 003c 1368     		ldr	r3, [r2]
 2175 003e 0133     		adds	r3, r3, #1
 2176 0040 1360     		str	r3, [r2]
 2177 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2178              	.LVL176:
 2179              	.L181:
 2180              	.LBE143:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2181              		.loc 1 2616 0
 2182 0046 314B     		ldr	r3, .L200+20
 2183 0048 1B68     		ldr	r3, [r3]
 2184 004a 9D42     		cmp	r5, r3
 2185 004c 03D2     		bcs	.L194
 2186              	.LBE142:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 134


2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2187              		.loc 1 2587 0
 2188 004e 0024     		movs	r4, #0
 2189 0050 3AE0     		b	.L185
 2190              	.LVL177:
 2191              	.L196:
 2192              	.LBB146:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2193              		.loc 1 2682 0
 2194 0052 0124     		movs	r4, #1
 2195              	.LVL178:
 2196 0054 00E0     		b	.L184
 2197              	.LVL179:
 2198              	.L194:
 2199 0056 0024     		movs	r4, #0
 2200              	.LVL180:
 2201              	.L184:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2202              		.loc 1 2620 0
 2203 0058 294B     		ldr	r3, .L200+8
 2204 005a 1B68     		ldr	r3, [r3]
 2205 005c 1B68     		ldr	r3, [r3]
 2206 005e 0BB9     		cbnz	r3, .L195
 2207 0060 0123     		movs	r3, #1
 2208 0062 00E0     		b	.L186
 2209              	.L195:
 2210 0064 0023     		movs	r3, #0
 2211              	.L186:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2212              		.loc 1 2620 0 is_stmt 0 discriminator 4
 2213 0066 23B1     		cbz	r3, .L187
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2214              		.loc 1 2627 0 is_stmt 1
 2215 0068 4FF0FF32 		mov	r2, #-1
 2216 006c 274B     		ldr	r3, .L200+20
 2217 006e 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2218              		.loc 1 2628 0
 2219 0070 2AE0     		b	.L185
 2220              	.L187:
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2221              		.loc 1 2636 0
 2222 0072 234B     		ldr	r3, .L200+8
 2223 0074 1B68     		ldr	r3, [r3]
 2224 0076 DB68     		ldr	r3, [r3, #12]
 2225 0078 DE68     		ldr	r6, [r3, #12]
 2226              	.LVL181:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2227              		.loc 1 2637 0
 2228 007a 7368     		ldr	r3, [r6, #4]
 2229              	.LVL182:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2230              		.loc 1 2639 0
 2231 007c 9D42     		cmp	r5, r3
 2232 007e 02D2     		bcs	.L188
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2233              		.loc 1 2646 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 135


 2234 0080 224A     		ldr	r2, .L200+20
 2235 0082 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2236              		.loc 1 2647 0
 2237 0084 20E0     		b	.L185
 2238              	.L188:
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2239              		.loc 1 2655 0
 2240 0086 371D     		adds	r7, r6, #4
 2241 0088 3846     		mov	r0, r7
 2242 008a FFF7FEFF 		bl	uxListRemove
 2243              	.LVL183:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2244              		.loc 1 2659 0
 2245 008e B36A     		ldr	r3, [r6, #40]
 2246 0090 1BB1     		cbz	r3, .L189
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2247              		.loc 1 2661 0
 2248 0092 06F11800 		add	r0, r6, #24
 2249 0096 FFF7FEFF 		bl	uxListRemove
 2250              	.LVL184:
 2251              	.L189:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2252              		.loc 1 2670 0
 2253 009a F36A     		ldr	r3, [r6, #44]
 2254 009c 0122     		movs	r2, #1
 2255 009e 02FA03F1 		lsl	r1, r2, r3
 2256 00a2 1B48     		ldr	r0, .L200+24
 2257 00a4 0268     		ldr	r2, [r0]
 2258 00a6 0A43     		orrs	r2, r2, r1
 2259 00a8 0260     		str	r2, [r0]
 2260 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 2261 00ae 9A00     		lsls	r2, r3, #2
 2262 00b0 3946     		mov	r1, r7
 2263 00b2 1848     		ldr	r0, .L200+28
 2264 00b4 1044     		add	r0, r0, r2
 2265 00b6 FFF7FEFF 		bl	vListInsertEnd
 2266              	.LVL185:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2267              		.loc 1 2680 0
 2268 00ba F26A     		ldr	r2, [r6, #44]
 2269 00bc 164B     		ldr	r3, .L200+32
 2270 00be 1B68     		ldr	r3, [r3]
 2271 00c0 DB6A     		ldr	r3, [r3, #44]
 2272 00c2 9A42     		cmp	r2, r3
 2273 00c4 C5D2     		bcs	.L196
 2274 00c6 C7E7     		b	.L184
 2275              	.LVL186:
 2276              	.L185:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2277              		.loc 1 2699 0
 2278 00c8 134B     		ldr	r3, .L200+32
 2279 00ca 1B68     		ldr	r3, [r3]
 2280 00cc DB6A     		ldr	r3, [r3, #44]
 2281 00ce 03EB8303 		add	r3, r3, r3, lsl #2
 2282 00d2 9A00     		lsls	r2, r3, #2
 2283 00d4 0F4B     		ldr	r3, .L200+28
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 136


 2284 00d6 9B58     		ldr	r3, [r3, r2]
 2285 00d8 012B     		cmp	r3, #1
 2286 00da 06D8     		bhi	.L197
 2287 00dc 06E0     		b	.L192
 2288              	.LVL187:
 2289              	.L180:
 2290              	.LBE146:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2291              		.loc 1 2727 0
 2292 00de 0F4A     		ldr	r2, .L200+36
 2293 00e0 1368     		ldr	r3, [r2]
 2294 00e2 0133     		adds	r3, r3, #1
 2295 00e4 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2296              		.loc 1 2587 0
 2297 00e6 0024     		movs	r4, #0
 2298 00e8 00E0     		b	.L192
 2299              	.LVL188:
 2300              	.L197:
 2301              	.LBB147:
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2302              		.loc 1 2701 0
 2303 00ea 0124     		movs	r4, #1
 2304              	.LVL189:
 2305              	.L192:
 2306              	.LBE147:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2307              		.loc 1 2740 0
 2308 00ec 0C4B     		ldr	r3, .L200+40
 2309 00ee 1B68     		ldr	r3, [r3]
 2310 00f0 03B1     		cbz	r3, .L193
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2311              		.loc 1 2742 0
 2312 00f2 0124     		movs	r4, #1
 2313              	.LVL190:
 2314              	.L193:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2315              		.loc 1 2752 0
 2316 00f4 2046     		mov	r0, r4
 2317 00f6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2318              	.LVL191:
 2319              	.L201:
 2320              		.align	2
 2321              	.L200:
 2322 00f8 00000000 		.word	.LANCHOR16
 2323 00fc 00000000 		.word	.LANCHOR15
 2324 0100 00000000 		.word	.LANCHOR2
 2325 0104 00000000 		.word	.LANCHOR8
 2326 0108 00000000 		.word	.LANCHOR17
 2327 010c 00000000 		.word	.LANCHOR3
 2328 0110 00000000 		.word	.LANCHOR13
 2329 0114 00000000 		.word	.LANCHOR4
 2330 0118 00000000 		.word	.LANCHOR10
 2331 011c 00000000 		.word	.LANCHOR18
 2332 0120 00000000 		.word	.LANCHOR19
 2333              		.cfi_endproc
 2334              	.LFE26:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 137


 2336              		.section	.text.xTaskResumeAll,"ax",%progbits
 2337              		.align	2
 2338              		.global	xTaskResumeAll
 2339              		.thumb
 2340              		.thumb_func
 2342              	xTaskResumeAll:
 2343              	.LFB21:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2344              		.loc 1 2100 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348 0000 38B5     		push	{r3, r4, r5, lr}
 2349              	.LCFI25:
 2350              		.cfi_def_cfa_offset 16
 2351              		.cfi_offset 3, -16
 2352              		.cfi_offset 4, -12
 2353              		.cfi_offset 5, -8
 2354              		.cfi_offset 14, -4
 2355              	.LVL192:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2356              		.loc 1 2106 0
 2357 0002 344B     		ldr	r3, .L217
 2358 0004 1B68     		ldr	r3, [r3]
 2359 0006 43B9     		cbnz	r3, .L203
 2360              	.LBB148:
 2361              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2362              		.loc 2 195 0
 2363              		.syntax unified
 2364              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2365 0008 4FF05003 			mov r3, #80												
 2366 000c 83F31188 		msr basepri, r3											
 2367 0010 BFF36F8F 		isb														
 2368 0014 BFF34F8F 		dsb														
 2369              	
 2370              	@ 0 "" 2
 2371              	.LVL193:
 2372              		.thumb
 2373              		.syntax unified
 2374              	.L204:
 2375 0018 FEE7     		b	.L204
 2376              	.L203:
 2377              	.LBE149:
 2378              	.LBE148:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2379              		.loc 1 2113 0
 2380 001a FFF7FEFF 		bl	vPortEnterCritical
 2381              	.LVL194:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2382              		.loc 1 2115 0
 2383 001e 2D4B     		ldr	r3, .L217
 2384 0020 1A68     		ldr	r2, [r3]
 2385 0022 013A     		subs	r2, r2, #1
 2386 0024 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2387              		.loc 1 2117 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 138


 2388 0026 1B68     		ldr	r3, [r3]
 2389 0028 002B     		cmp	r3, #0
 2390 002a 4CD1     		bne	.L213
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2391              		.loc 1 2119 0
 2392 002c 2A4B     		ldr	r3, .L217+4
 2393 002e 1B68     		ldr	r3, [r3]
 2394 0030 33BB     		cbnz	r3, .L214
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2395              		.loc 1 2102 0
 2396 0032 0024     		movs	r4, #0
 2397 0034 4AE0     		b	.L205
 2398              	.LVL195:
 2399              	.L208:
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2400              		.loc 1 2125 0
 2401 0036 294B     		ldr	r3, .L217+8
 2402 0038 DB68     		ldr	r3, [r3, #12]
 2403 003a DC68     		ldr	r4, [r3, #12]
 2404              	.LVL196:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2405              		.loc 1 2126 0
 2406 003c 04F11800 		add	r0, r4, #24
 2407 0040 FFF7FEFF 		bl	uxListRemove
 2408              	.LVL197:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2409              		.loc 1 2127 0
 2410 0044 251D     		adds	r5, r4, #4
 2411 0046 2846     		mov	r0, r5
 2412 0048 FFF7FEFF 		bl	uxListRemove
 2413              	.LVL198:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2414              		.loc 1 2128 0
 2415 004c E36A     		ldr	r3, [r4, #44]
 2416 004e 0122     		movs	r2, #1
 2417 0050 02FA03F1 		lsl	r1, r2, r3
 2418 0054 2248     		ldr	r0, .L217+12
 2419 0056 0268     		ldr	r2, [r0]
 2420 0058 0A43     		orrs	r2, r2, r1
 2421 005a 0260     		str	r2, [r0]
 2422 005c 03EB8303 		add	r3, r3, r3, lsl #2
 2423 0060 9A00     		lsls	r2, r3, #2
 2424 0062 2946     		mov	r1, r5
 2425 0064 1F48     		ldr	r0, .L217+16
 2426 0066 1044     		add	r0, r0, r2
 2427 0068 FFF7FEFF 		bl	vListInsertEnd
 2428              	.LVL199:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2429              		.loc 1 2132 0
 2430 006c E26A     		ldr	r2, [r4, #44]
 2431 006e 1E4B     		ldr	r3, .L217+20
 2432 0070 1B68     		ldr	r3, [r3]
 2433 0072 DB6A     		ldr	r3, [r3, #44]
 2434 0074 9A42     		cmp	r2, r3
 2435 0076 04D3     		bcc	.L206
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2436              		.loc 1 2134 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 139


 2437 0078 0122     		movs	r2, #1
 2438 007a 1C4B     		ldr	r3, .L217+24
 2439 007c 1A60     		str	r2, [r3]
 2440 007e 00E0     		b	.L206
 2441              	.LVL200:
 2442              	.L214:
 2443 0080 0024     		movs	r4, #0
 2444              	.LVL201:
 2445              	.L206:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2446              		.loc 1 2123 0
 2447 0082 164B     		ldr	r3, .L217+8
 2448 0084 1B68     		ldr	r3, [r3]
 2449 0086 002B     		cmp	r3, #0
 2450 0088 D5D1     		bne	.L208
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2451              		.loc 1 2142 0
 2452 008a 0CB1     		cbz	r4, .L209
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2453              		.loc 1 2150 0
 2454 008c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2455              	.LVL202:
 2456              	.L209:
 2457              	.LBB150:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2458              		.loc 1 2158 0
 2459 0090 174B     		ldr	r3, .L217+28
 2460 0092 1C68     		ldr	r4, [r3]
 2461              	.LVL203:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2462              		.loc 1 2160 0
 2463 0094 54B1     		cbz	r4, .L210
 2464              	.L212:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2465              		.loc 1 2164 0
 2466 0096 FFF7FEFF 		bl	xTaskIncrementTick
 2467              	.LVL204:
 2468 009a 10B1     		cbz	r0, .L211
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2469              		.loc 1 2166 0
 2470 009c 0122     		movs	r2, #1
 2471 009e 134B     		ldr	r3, .L217+24
 2472 00a0 1A60     		str	r2, [r3]
 2473              	.L211:
 2474              	.LVL205:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2475              		.loc 1 2173 0
 2476 00a2 013C     		subs	r4, r4, #1
 2477              	.LVL206:
 2478 00a4 F7D1     		bne	.L212
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2479              		.loc 1 2175 0
 2480 00a6 0022     		movs	r2, #0
 2481 00a8 114B     		ldr	r3, .L217+28
 2482 00aa 1A60     		str	r2, [r3]
 2483              	.L210:
 2484              	.LBE150:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 140


2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2485              		.loc 1 2183 0
 2486 00ac 0F4B     		ldr	r3, .L217+24
 2487 00ae 1B68     		ldr	r3, [r3]
 2488 00b0 5BB1     		cbz	r3, .L215
 2489              	.LVL207:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2490              		.loc 1 2190 0
 2491 00b2 4FF08052 		mov	r2, #268435456
 2492 00b6 0F4B     		ldr	r3, .L217+32
 2493 00b8 1A60     		str	r2, [r3]
 2494              		.syntax unified
 2495              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2496 00ba BFF34F8F 		dsb
 2497              	@ 0 "" 2
 2498              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2499 00be BFF36F8F 		isb
 2500              	@ 0 "" 2
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2501              		.loc 1 2187 0
 2502              		.thumb
 2503              		.syntax unified
 2504 00c2 0124     		movs	r4, #1
 2505              	.LVL208:
 2506 00c4 02E0     		b	.L205
 2507              	.LVL209:
 2508              	.L213:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2509              		.loc 1 2102 0
 2510 00c6 0024     		movs	r4, #0
 2511 00c8 00E0     		b	.L205
 2512              	.LVL210:
 2513              	.L215:
 2514 00ca 0024     		movs	r4, #0
 2515              	.LVL211:
 2516              	.L205:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2517              		.loc 1 2203 0
 2518 00cc FFF7FEFF 		bl	vPortExitCritical
 2519              	.LVL212:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2520              		.loc 1 2206 0
 2521 00d0 2046     		mov	r0, r4
 2522 00d2 38BD     		pop	{r3, r4, r5, pc}
 2523              	.LVL213:
 2524              	.L218:
 2525              		.align	2
 2526              	.L217:
 2527 00d4 00000000 		.word	.LANCHOR16
 2528 00d8 00000000 		.word	.LANCHOR9
 2529 00dc 00000000 		.word	.LANCHOR1
 2530 00e0 00000000 		.word	.LANCHOR13
 2531 00e4 00000000 		.word	.LANCHOR4
 2532 00e8 00000000 		.word	.LANCHOR10
 2533 00ec 00000000 		.word	.LANCHOR19
 2534 00f0 00000000 		.word	.LANCHOR18
 2535 00f4 04ED00E0 		.word	-536810236
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 141


 2536              		.cfi_endproc
 2537              	.LFE21:
 2539              		.section	.text.vTaskDelay,"ax",%progbits
 2540              		.align	2
 2541              		.global	vTaskDelay
 2542              		.thumb
 2543              		.thumb_func
 2545              	vTaskDelay:
 2546              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2547              		.loc 1 1283 0
 2548              		.cfi_startproc
 2549              		@ args = 0, pretend = 0, frame = 0
 2550              		@ frame_needed = 0, uses_anonymous_args = 0
 2551              	.LVL214:
 2552 0000 10B5     		push	{r4, lr}
 2553              	.LCFI26:
 2554              		.cfi_def_cfa_offset 8
 2555              		.cfi_offset 4, -8
 2556              		.cfi_offset 14, -4
 2557              	.LVL215:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2558              		.loc 1 1287 0
 2559 0002 A8B1     		cbz	r0, .L224
 2560 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2561              		.loc 1 1289 0
 2562 0006 104B     		ldr	r3, .L226
 2563 0008 1B68     		ldr	r3, [r3]
 2564 000a 43B1     		cbz	r3, .L221
 2565              	.LBB151:
 2566              	.LBB152:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2567              		.loc 2 195 0
 2568              		.syntax unified
 2569              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2570 000c 4FF05003 			mov r3, #80												
 2571 0010 83F31188 		msr basepri, r3											
 2572 0014 BFF36F8F 		isb														
 2573 0018 BFF34F8F 		dsb														
 2574              	
 2575              	@ 0 "" 2
 2576              	.LVL216:
 2577              		.thumb
 2578              		.syntax unified
 2579              	.L222:
 2580 001c FEE7     		b	.L222
 2581              	.L221:
 2582              	.LBE152:
 2583              	.LBE151:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2584              		.loc 1 1290 0
 2585 001e FFF7FEFF 		bl	vTaskSuspendAll
 2586              	.LVL217:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2587              		.loc 1 1301 0
 2588 0022 0021     		movs	r1, #0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 142


 2589 0024 2046     		mov	r0, r4
 2590 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2591              	.LVL218:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2592              		.loc 1 1303 0
 2593 002a FFF7FEFF 		bl	xTaskResumeAll
 2594              	.LVL219:
 2595 002e 00E0     		b	.L220
 2596              	.LVL220:
 2597              	.L224:
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2598              		.loc 1 1284 0
 2599 0030 0020     		movs	r0, #0
 2600              	.LVL221:
 2601              	.L220:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2602              		.loc 1 1312 0
 2603 0032 38B9     		cbnz	r0, .L219
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2604              		.loc 1 1314 0
 2605 0034 4FF08052 		mov	r2, #268435456
 2606 0038 044B     		ldr	r3, .L226+4
 2607 003a 1A60     		str	r2, [r3]
 2608              		.syntax unified
 2609              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2610 003c BFF34F8F 		dsb
 2611              	@ 0 "" 2
 2612              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2613 0040 BFF36F8F 		isb
 2614              	@ 0 "" 2
 2615              		.thumb
 2616              		.syntax unified
 2617              	.L219:
 2618 0044 10BD     		pop	{r4, pc}
 2619              	.L227:
 2620 0046 00BF     		.align	2
 2621              	.L226:
 2622 0048 00000000 		.word	.LANCHOR16
 2623 004c 04ED00E0 		.word	-536810236
 2624              		.cfi_endproc
 2625              	.LFE10:
 2627              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 2628              		.align	2
 2629              		.global	vTaskSetApplicationTaskTag
 2630              		.thumb
 2631              		.thumb_func
 2633              	vTaskSetApplicationTaskTag:
 2634              	.LFB27:
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2635              		.loc 1 2758 0
 2636              		.cfi_startproc
 2637              		@ args = 0, pretend = 0, frame = 0
 2638              		@ frame_needed = 0, uses_anonymous_args = 0
 2639              	.LVL222:
 2640 0000 38B5     		push	{r3, r4, r5, lr}
 2641              	.LCFI27:
 2642              		.cfi_def_cfa_offset 16
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 143


 2643              		.cfi_offset 3, -16
 2644              		.cfi_offset 4, -12
 2645              		.cfi_offset 5, -8
 2646              		.cfi_offset 14, -4
 2647 0002 0D46     		mov	r5, r1
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2648              		.loc 1 2763 0
 2649 0004 0446     		mov	r4, r0
 2650 0006 08B9     		cbnz	r0, .L229
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2651              		.loc 1 2765 0
 2652 0008 034B     		ldr	r3, .L231
 2653 000a 1C68     		ldr	r4, [r3]
 2654              	.LVL223:
 2655              	.L229:
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2656              		.loc 1 2774 0
 2657 000c FFF7FEFF 		bl	vPortEnterCritical
 2658              	.LVL224:
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2659              		.loc 1 2775 0
 2660 0010 E564     		str	r5, [r4, #76]
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2661              		.loc 1 2776 0
 2662 0012 FFF7FEFF 		bl	vPortExitCritical
 2663              	.LVL225:
 2664 0016 38BD     		pop	{r3, r4, r5, pc}
 2665              	.LVL226:
 2666              	.L232:
 2667              		.align	2
 2668              	.L231:
 2669 0018 00000000 		.word	.LANCHOR10
 2670              		.cfi_endproc
 2671              	.LFE27:
 2673              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2674              		.align	2
 2675              		.global	xTaskGetApplicationTaskTag
 2676              		.thumb
 2677              		.thumb_func
 2679              	xTaskGetApplicationTaskTag:
 2680              	.LFB28:
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2681              		.loc 1 2785 0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 0
 2684              		@ frame_needed = 0, uses_anonymous_args = 0
 2685              	.LVL227:
 2686 0000 10B5     		push	{r4, lr}
 2687              	.LCFI28:
 2688              		.cfi_def_cfa_offset 8
 2689              		.cfi_offset 4, -8
 2690              		.cfi_offset 14, -4
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2691              		.loc 1 2790 0
 2692 0002 0446     		mov	r4, r0
 2693 0004 08B9     		cbnz	r0, .L234
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 144


 2694              		.loc 1 2792 0
 2695 0006 044B     		ldr	r3, .L236
 2696 0008 1C68     		ldr	r4, [r3]
 2697              	.LVL228:
 2698              	.L234:
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2699              		.loc 1 2801 0
 2700 000a FFF7FEFF 		bl	vPortEnterCritical
 2701              	.LVL229:
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2702              		.loc 1 2803 0
 2703 000e E46C     		ldr	r4, [r4, #76]
 2704              	.LVL230:
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2705              		.loc 1 2805 0
 2706 0010 FFF7FEFF 		bl	vPortExitCritical
 2707              	.LVL231:
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2708              		.loc 1 2808 0
 2709 0014 2046     		mov	r0, r4
 2710 0016 10BD     		pop	{r4, pc}
 2711              	.LVL232:
 2712              	.L237:
 2713              		.align	2
 2714              	.L236:
 2715 0018 00000000 		.word	.LANCHOR10
 2716              		.cfi_endproc
 2717              	.LFE28:
 2719              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2720              		.align	2
 2721              		.global	xTaskCallApplicationTaskHook
 2722              		.thumb
 2723              		.thumb_func
 2725              	xTaskCallApplicationTaskHook:
 2726              	.LFB29:
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2727              		.loc 1 2816 0
 2728              		.cfi_startproc
 2729              		@ args = 0, pretend = 0, frame = 0
 2730              		@ frame_needed = 0, uses_anonymous_args = 0
 2731              	.LVL233:
 2732 0000 08B5     		push	{r3, lr}
 2733              	.LCFI29:
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 3, -8
 2736              		.cfi_offset 14, -4
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2737              		.loc 1 2821 0
 2738 0002 0346     		mov	r3, r0
 2739 0004 08B9     		cbnz	r0, .L239
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2740              		.loc 1 2823 0
 2741 0006 044B     		ldr	r3, .L243
 2742 0008 1B68     		ldr	r3, [r3]
 2743              	.LVL234:
 2744              	.L239:
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 145


 2745              		.loc 1 2830 0
 2746 000a DB6C     		ldr	r3, [r3, #76]
 2747              	.LVL235:
 2748 000c 13B1     		cbz	r3, .L241
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2749              		.loc 1 2832 0
 2750 000e 0846     		mov	r0, r1
 2751 0010 9847     		blx	r3
 2752              	.LVL236:
 2753 0012 08BD     		pop	{r3, pc}
 2754              	.LVL237:
 2755              	.L241:
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2756              		.loc 1 2836 0
 2757 0014 0020     		movs	r0, #0
 2758              	.LVL238:
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2759              		.loc 1 2840 0
 2760 0016 08BD     		pop	{r3, pc}
 2761              	.L244:
 2762              		.align	2
 2763              	.L243:
 2764 0018 00000000 		.word	.LANCHOR10
 2765              		.cfi_endproc
 2766              	.LFE29:
 2768              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2769              		.align	2
 2770              		.global	vTaskSwitchContext
 2771              		.thumb
 2772              		.thumb_func
 2774              	vTaskSwitchContext:
 2775              	.LFB30:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2776              		.loc 1 2846 0
 2777              		.cfi_startproc
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 0, uses_anonymous_args = 0
 2780 0000 38B5     		push	{r3, r4, r5, lr}
 2781              	.LCFI30:
 2782              		.cfi_def_cfa_offset 16
 2783              		.cfi_offset 3, -16
 2784              		.cfi_offset 4, -12
 2785              		.cfi_offset 5, -8
 2786              		.cfi_offset 14, -4
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2787              		.loc 1 2847 0
 2788 0002 2B4B     		ldr	r3, .L254
 2789 0004 1B68     		ldr	r3, [r3]
 2790 0006 1BB1     		cbz	r3, .L246
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2791              		.loc 1 2851 0
 2792 0008 0122     		movs	r2, #1
 2793 000a 2A4B     		ldr	r3, .L254+4
 2794 000c 1A60     		str	r2, [r3]
 2795 000e 38BD     		pop	{r3, r4, r5, pc}
 2796              	.L246:
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 146


 2797              		.loc 1 2855 0
 2798 0010 0022     		movs	r2, #0
 2799 0012 284B     		ldr	r3, .L254+4
 2800 0014 1A60     		str	r2, [r3]
 2801              	.LBB153:
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2802              		.loc 1 2886 0
 2803 0016 284B     		ldr	r3, .L254+8
 2804 0018 1B68     		ldr	r3, [r3]
 2805 001a 1B6B     		ldr	r3, [r3, #48]
 2806              	.LVL239:
 2807 001c 1A68     		ldr	r2, [r3]
 2808 001e B2F1A53F 		cmp	r2, #-1515870811
 2809 0022 0BD1     		bne	.L248
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2810              		.loc 1 2886 0 is_stmt 0 discriminator 2
 2811 0024 5A68     		ldr	r2, [r3, #4]
 2812 0026 B2F1A53F 		cmp	r2, #-1515870811
 2813 002a 07D1     		bne	.L248
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2814              		.loc 1 2886 0 discriminator 4
 2815 002c 9A68     		ldr	r2, [r3, #8]
 2816 002e B2F1A53F 		cmp	r2, #-1515870811
 2817 0032 03D1     		bne	.L248
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2818              		.loc 1 2886 0 discriminator 6
 2819 0034 DB68     		ldr	r3, [r3, #12]
 2820              	.LVL240:
 2821 0036 B3F1A53F 		cmp	r3, #-1515870811
 2822 003a 05D0     		beq	.L249
 2823              	.L248:
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2824              		.loc 1 2886 0 discriminator 7
 2825 003c 1E4B     		ldr	r3, .L254+8
 2826 003e 1868     		ldr	r0, [r3]
 2827 0040 1968     		ldr	r1, [r3]
 2828 0042 3431     		adds	r1, r1, #52
 2829 0044 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2830              	.LVL241:
 2831              	.L249:
 2832              	.LBE153:
 2833              	.LBB154:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2834              		.loc 1 2890 0 is_stmt 1
 2835 0048 1C4B     		ldr	r3, .L254+12
 2836 004a 1B68     		ldr	r3, [r3]
 2837              	.LVL242:
 2838              	.LBB155:
 2839              	.LBB156:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2840              		.loc 2 134 0
 2841              		.syntax unified
 2842              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2843 004c B3FA83F3 		clz r3, r3
 2844              	@ 0 "" 2
 2845              	.LVL243:
 2846              		.thumb
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 147


 2847              		.syntax unified
 2848 0050 DBB2     		uxtb	r3, r3
 2849              	.LBE156:
 2850              	.LBE155:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2851              		.loc 1 2890 0
 2852 0052 C3F11F03 		rsb	r3, r3, #31
 2853              	.LVL244:
 2854 0056 03EB8301 		add	r1, r3, r3, lsl #2
 2855 005a 8A00     		lsls	r2, r1, #2
 2856 005c 1849     		ldr	r1, .L254+16
 2857 005e 8A58     		ldr	r2, [r1, r2]
 2858 0060 42B9     		cbnz	r2, .L250
 2859              	.LBB157:
 2860              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2861              		.loc 2 195 0
 2862              		.syntax unified
 2863              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2864 0062 4FF05003 			mov r3, #80												
 2865 0066 83F31188 		msr basepri, r3											
 2866 006a BFF36F8F 		isb														
 2867 006e BFF34F8F 		dsb														
 2868              	
 2869              	@ 0 "" 2
 2870              	.LVL245:
 2871              		.thumb
 2872              		.syntax unified
 2873              	.L251:
 2874 0072 FEE7     		b	.L251
 2875              	.LVL246:
 2876              	.L250:
 2877              	.LBE158:
 2878              	.LBE157:
 2879              	.LBB159:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2880              		.loc 1 2890 0 discriminator 2
 2881 0074 124D     		ldr	r5, .L254+16
 2882 0076 9900     		lsls	r1, r3, #2
 2883 0078 CA18     		adds	r2, r1, r3
 2884 007a 9000     		lsls	r0, r2, #2
 2885 007c 2844     		add	r0, r0, r5
 2886 007e 4268     		ldr	r2, [r0, #4]
 2887 0080 5468     		ldr	r4, [r2, #4]
 2888 0082 4460     		str	r4, [r0, #4]
 2889 0084 1944     		add	r1, r1, r3
 2890 0086 8A00     		lsls	r2, r1, #2
 2891 0088 0832     		adds	r2, r2, #8
 2892 008a 2A44     		add	r2, r2, r5
 2893 008c 9442     		cmp	r4, r2
 2894 008e 05D1     		bne	.L252
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2895              		.loc 1 2890 0 is_stmt 0 discriminator 3
 2896 0090 6068     		ldr	r0, [r4, #4]
 2897 0092 03EB8301 		add	r1, r3, r3, lsl #2
 2898 0096 8A00     		lsls	r2, r1, #2
 2899 0098 2A44     		add	r2, r2, r5
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 148


 2900 009a 5060     		str	r0, [r2, #4]
 2901              	.L252:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2902              		.loc 1 2890 0 discriminator 5
 2903 009c 03EB8303 		add	r3, r3, r3, lsl #2
 2904              	.LVL247:
 2905 00a0 9A00     		lsls	r2, r3, #2
 2906 00a2 074B     		ldr	r3, .L254+16
 2907 00a4 1A44     		add	r2, r2, r3
 2908 00a6 5368     		ldr	r3, [r2, #4]
 2909 00a8 DA68     		ldr	r2, [r3, #12]
 2910 00aa 034B     		ldr	r3, .L254+8
 2911 00ac 1A60     		str	r2, [r3]
 2912 00ae 38BD     		pop	{r3, r4, r5, pc}
 2913              	.L255:
 2914              		.align	2
 2915              	.L254:
 2916 00b0 00000000 		.word	.LANCHOR16
 2917 00b4 00000000 		.word	.LANCHOR19
 2918 00b8 00000000 		.word	.LANCHOR10
 2919 00bc 00000000 		.word	.LANCHOR13
 2920 00c0 00000000 		.word	.LANCHOR4
 2921              	.LBE159:
 2922              	.LBE154:
 2923              		.cfi_endproc
 2924              	.LFE30:
 2926              		.section	.text.vTaskSuspend,"ax",%progbits
 2927              		.align	2
 2928              		.global	vTaskSuspend
 2929              		.thumb
 2930              		.thumb_func
 2932              	vTaskSuspend:
 2933              	.LFB14:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2934              		.loc 1 1625 0 is_stmt 1
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 0
 2937              		@ frame_needed = 0, uses_anonymous_args = 0
 2938              	.LVL248:
 2939 0000 38B5     		push	{r3, r4, r5, lr}
 2940              	.LCFI31:
 2941              		.cfi_def_cfa_offset 16
 2942              		.cfi_offset 3, -16
 2943              		.cfi_offset 4, -12
 2944              		.cfi_offset 5, -8
 2945              		.cfi_offset 14, -4
 2946 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2947              		.loc 1 1628 0
 2948 0004 FFF7FEFF 		bl	vPortEnterCritical
 2949              	.LVL249:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2950              		.loc 1 1632 0
 2951 0008 0CB9     		cbnz	r4, .L257
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2952              		.loc 1 1632 0 is_stmt 0 discriminator 1
 2953 000a 2E4B     		ldr	r3, .L268
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 149


 2954 000c 1C68     		ldr	r4, [r3]
 2955              	.LVL250:
 2956              	.L257:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2957              		.loc 1 1638 0 is_stmt 1 discriminator 4
 2958 000e 251D     		adds	r5, r4, #4
 2959 0010 2846     		mov	r0, r5
 2960 0012 FFF7FEFF 		bl	uxListRemove
 2961              	.LVL251:
 2962 0016 70B9     		cbnz	r0, .L258
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2963              		.loc 1 1640 0
 2964 0018 E26A     		ldr	r2, [r4, #44]
 2965 001a 02EB8201 		add	r1, r2, r2, lsl #2
 2966 001e 8B00     		lsls	r3, r1, #2
 2967 0020 2949     		ldr	r1, .L268+4
 2968 0022 CB58     		ldr	r3, [r1, r3]
 2969 0024 3BB9     		cbnz	r3, .L258
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2970              		.loc 1 1640 0 is_stmt 0 discriminator 1
 2971 0026 0123     		movs	r3, #1
 2972 0028 03FA02F2 		lsl	r2, r3, r2
 2973 002c 2749     		ldr	r1, .L268+8
 2974 002e 0B68     		ldr	r3, [r1]
 2975 0030 23EA0203 		bic	r3, r3, r2
 2976 0034 0B60     		str	r3, [r1]
 2977              	.L258:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2978              		.loc 1 1648 0 is_stmt 1
 2979 0036 A36A     		ldr	r3, [r4, #40]
 2980 0038 1BB1     		cbz	r3, .L259
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2981              		.loc 1 1650 0
 2982 003a 04F11800 		add	r0, r4, #24
 2983 003e FFF7FEFF 		bl	uxListRemove
 2984              	.LVL252:
 2985              	.L259:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2986              		.loc 1 1657 0
 2987 0042 2946     		mov	r1, r5
 2988 0044 2248     		ldr	r0, .L268+12
 2989 0046 FFF7FEFF 		bl	vListInsertEnd
 2990              	.LVL253:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2991              		.loc 1 1661 0
 2992 004a 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 2993 004e DBB2     		uxtb	r3, r3
 2994 0050 012B     		cmp	r3, #1
 2995 0052 02D1     		bne	.L260
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2996              		.loc 1 1665 0
 2997 0054 0023     		movs	r3, #0
 2998 0056 84F85430 		strb	r3, [r4, #84]
 2999              	.L260:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3000              		.loc 1 1670 0
 3001 005a FFF7FEFF 		bl	vPortExitCritical
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 150


 3002              	.LVL254:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3003              		.loc 1 1672 0
 3004 005e 1D4B     		ldr	r3, .L268+16
 3005 0060 1B68     		ldr	r3, [r3]
 3006 0062 2BB1     		cbz	r3, .L261
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3007              		.loc 1 1676 0
 3008 0064 FFF7FEFF 		bl	vPortEnterCritical
 3009              	.LVL255:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3010              		.loc 1 1678 0
 3011 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3012              	.LVL256:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3013              		.loc 1 1680 0
 3014 006c FFF7FEFF 		bl	vPortExitCritical
 3015              	.LVL257:
 3016              	.L261:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3017              		.loc 1 1687 0
 3018 0070 144B     		ldr	r3, .L268
 3019 0072 1B68     		ldr	r3, [r3]
 3020 0074 9C42     		cmp	r4, r3
 3021 0076 23D1     		bne	.L256
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3022              		.loc 1 1689 0
 3023 0078 164B     		ldr	r3, .L268+16
 3024 007a 1B68     		ldr	r3, [r3]
 3025 007c A3B1     		cbz	r3, .L263
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3026              		.loc 1 1692 0
 3027 007e 164B     		ldr	r3, .L268+20
 3028 0080 1B68     		ldr	r3, [r3]
 3029 0082 43B1     		cbz	r3, .L264
 3030              	.LBB160:
 3031              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3032              		.loc 2 195 0
 3033              		.syntax unified
 3034              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3035 0084 4FF05003 			mov r3, #80												
 3036 0088 83F31188 		msr basepri, r3											
 3037 008c BFF36F8F 		isb														
 3038 0090 BFF34F8F 		dsb														
 3039              	
 3040              	@ 0 "" 2
 3041              	.LVL258:
 3042              		.thumb
 3043              		.syntax unified
 3044              	.L265:
 3045 0094 FEE7     		b	.L265
 3046              	.L264:
 3047              	.LBE161:
 3048              	.LBE160:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3049              		.loc 1 1693 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 151


 3050 0096 4FF08052 		mov	r2, #268435456
 3051 009a 104B     		ldr	r3, .L268+24
 3052 009c 1A60     		str	r2, [r3]
 3053              		.syntax unified
 3054              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3055 009e BFF34F8F 		dsb
 3056              	@ 0 "" 2
 3057              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3058 00a2 BFF36F8F 		isb
 3059              	@ 0 "" 2
 3060              		.thumb
 3061              		.syntax unified
 3062 00a6 38BD     		pop	{r3, r4, r5, pc}
 3063              	.LVL259:
 3064              	.L263:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3065              		.loc 1 1700 0
 3066 00a8 094B     		ldr	r3, .L268+12
 3067 00aa 1A68     		ldr	r2, [r3]
 3068 00ac 0C4B     		ldr	r3, .L268+28
 3069 00ae 1B68     		ldr	r3, [r3]
 3070 00b0 9A42     		cmp	r2, r3
 3071 00b2 03D1     		bne	.L266
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3072              		.loc 1 1706 0
 3073 00b4 0022     		movs	r2, #0
 3074 00b6 034B     		ldr	r3, .L268
 3075 00b8 1A60     		str	r2, [r3]
 3076 00ba 38BD     		pop	{r3, r4, r5, pc}
 3077              	.LVL260:
 3078              	.L266:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3079              		.loc 1 1710 0
 3080 00bc FFF7FEFF 		bl	vTaskSwitchContext
 3081              	.LVL261:
 3082              	.L256:
 3083 00c0 38BD     		pop	{r3, r4, r5, pc}
 3084              	.LVL262:
 3085              	.L269:
 3086 00c2 00BF     		.align	2
 3087              	.L268:
 3088 00c4 00000000 		.word	.LANCHOR10
 3089 00c8 00000000 		.word	.LANCHOR4
 3090 00cc 00000000 		.word	.LANCHOR13
 3091 00d0 00000000 		.word	.LANCHOR0
 3092 00d4 00000000 		.word	.LANCHOR11
 3093 00d8 00000000 		.word	.LANCHOR16
 3094 00dc 04ED00E0 		.word	-536810236
 3095 00e0 00000000 		.word	.LANCHOR9
 3096              		.cfi_endproc
 3097              	.LFE14:
 3099              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3100              		.align	2
 3101              		.global	vTaskPlaceOnEventList
 3102              		.thumb
 3103              		.thumb_func
 3105              	vTaskPlaceOnEventList:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 152


 3106              	.LFB31:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3107              		.loc 1 2905 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 0
 3110              		@ frame_needed = 0, uses_anonymous_args = 0
 3111              	.LVL263:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3112              		.loc 1 2906 0
 3113 0000 40B9     		cbnz	r0, .L271
 3114              	.LBB162:
 3115              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3116              		.loc 2 195 0
 3117              		.syntax unified
 3118              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3119 0002 4FF05003 			mov r3, #80												
 3120 0006 83F31188 		msr basepri, r3											
 3121 000a BFF36F8F 		isb														
 3122 000e BFF34F8F 		dsb														
 3123              	
 3124              	@ 0 "" 2
 3125              	.LVL264:
 3126              		.thumb
 3127              		.syntax unified
 3128              	.L272:
 3129 0012 FEE7     		b	.L272
 3130              	.L271:
 3131              	.LBE163:
 3132              	.LBE162:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3133              		.loc 1 2905 0
 3134 0014 10B5     		push	{r4, lr}
 3135              	.LCFI32:
 3136              		.cfi_def_cfa_offset 8
 3137              		.cfi_offset 4, -8
 3138              		.cfi_offset 14, -4
 3139 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3140              		.loc 1 2915 0
 3141 0018 044B     		ldr	r3, .L274
 3142 001a 1968     		ldr	r1, [r3]
 3143              	.LVL265:
 3144 001c 1831     		adds	r1, r1, #24
 3145 001e FFF7FEFF 		bl	vListInsert
 3146              	.LVL266:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3147              		.loc 1 2917 0
 3148 0022 0121     		movs	r1, #1
 3149 0024 2046     		mov	r0, r4
 3150 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3151              	.LVL267:
 3152 002a 10BD     		pop	{r4, pc}
 3153              	.LVL268:
 3154              	.L275:
 3155              		.align	2
 3156              	.L274:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 153


 3157 002c 00000000 		.word	.LANCHOR10
 3158              		.cfi_endproc
 3159              	.LFE31:
 3161              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3162              		.align	2
 3163              		.global	vTaskPlaceOnUnorderedEventList
 3164              		.thumb
 3165              		.thumb_func
 3167              	vTaskPlaceOnUnorderedEventList:
 3168              	.LFB32:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3169              		.loc 1 2922 0
 3170              		.cfi_startproc
 3171              		@ args = 0, pretend = 0, frame = 0
 3172              		@ frame_needed = 0, uses_anonymous_args = 0
 3173              	.LVL269:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3174              		.loc 1 2923 0
 3175 0000 40B9     		cbnz	r0, .L277
 3176              	.LBB164:
 3177              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3178              		.loc 2 195 0
 3179              		.syntax unified
 3180              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3181 0002 4FF05003 			mov r3, #80												
 3182 0006 83F31188 		msr basepri, r3											
 3183 000a BFF36F8F 		isb														
 3184 000e BFF34F8F 		dsb														
 3185              	
 3186              	@ 0 "" 2
 3187              	.LVL270:
 3188              		.thumb
 3189              		.syntax unified
 3190              	.L278:
 3191 0012 FEE7     		b	.L278
 3192              	.L277:
 3193 0014 0346     		mov	r3, r0
 3194              	.LBE165:
 3195              	.LBE164:
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3196              		.loc 1 2927 0
 3197 0016 0F48     		ldr	r0, .L282
 3198              	.LVL271:
 3199 0018 0068     		ldr	r0, [r0]
 3200 001a 40B9     		cbnz	r0, .L279
 3201              	.LBB166:
 3202              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3203              		.loc 2 195 0
 3204              		.syntax unified
 3205              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3206 001c 4FF05003 			mov r3, #80												
 3207 0020 83F31188 		msr basepri, r3											
 3208 0024 BFF36F8F 		isb														
 3209 0028 BFF34F8F 		dsb														
 3210              	
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 154


 3211              	@ 0 "" 2
 3212              	.LVL272:
 3213              		.thumb
 3214              		.syntax unified
 3215              	.L280:
 3216 002c FEE7     		b	.L280
 3217              	.LVL273:
 3218              	.L279:
 3219              	.LBE167:
 3220              	.LBE166:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3221              		.loc 1 2922 0
 3222 002e 10B5     		push	{r4, lr}
 3223              	.LCFI33:
 3224              		.cfi_def_cfa_offset 8
 3225              		.cfi_offset 4, -8
 3226              		.cfi_offset 14, -4
 3227 0030 1846     		mov	r0, r3
 3228 0032 1446     		mov	r4, r2
 3229 0034 0B46     		mov	r3, r1
 3230              	.LVL274:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3231              		.loc 1 2932 0
 3232 0036 084A     		ldr	r2, .L282+4
 3233              	.LVL275:
 3234 0038 1168     		ldr	r1, [r2]
 3235              	.LVL276:
 3236 003a 43F00043 		orr	r3, r3, #-2147483648
 3237              	.LVL277:
 3238 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3239              		.loc 1 2939 0
 3240 0040 1168     		ldr	r1, [r2]
 3241 0042 1831     		adds	r1, r1, #24
 3242 0044 FFF7FEFF 		bl	vListInsertEnd
 3243              	.LVL278:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3244              		.loc 1 2941 0
 3245 0048 0121     		movs	r1, #1
 3246 004a 2046     		mov	r0, r4
 3247 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3248              	.LVL279:
 3249 0050 10BD     		pop	{r4, pc}
 3250              	.LVL280:
 3251              	.L283:
 3252 0052 00BF     		.align	2
 3253              	.L282:
 3254 0054 00000000 		.word	.LANCHOR16
 3255 0058 00000000 		.word	.LANCHOR10
 3256              		.cfi_endproc
 3257              	.LFE32:
 3259              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3260              		.align	2
 3261              		.global	xTaskRemoveFromEventList
 3262              		.thumb
 3263              		.thumb_func
 3265              	xTaskRemoveFromEventList:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 155


 3266              	.LFB33:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3267              		.loc 1 2979 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 0
 3270              		@ frame_needed = 0, uses_anonymous_args = 0
 3271              	.LVL281:
 3272 0000 38B5     		push	{r3, r4, r5, lr}
 3273              	.LCFI34:
 3274              		.cfi_def_cfa_offset 16
 3275              		.cfi_offset 3, -16
 3276              		.cfi_offset 4, -12
 3277              		.cfi_offset 5, -8
 3278              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3279              		.loc 1 2996 0
 3280 0002 C368     		ldr	r3, [r0, #12]
 3281 0004 DC68     		ldr	r4, [r3, #12]
 3282              	.LVL282:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3283              		.loc 1 2997 0
 3284 0006 44B9     		cbnz	r4, .L285
 3285              	.LBB168:
 3286              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3287              		.loc 2 195 0
 3288              		.syntax unified
 3289              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3290 0008 4FF05003 			mov r3, #80												
 3291 000c 83F31188 		msr basepri, r3											
 3292 0010 BFF36F8F 		isb														
 3293 0014 BFF34F8F 		dsb														
 3294              	
 3295              	@ 0 "" 2
 3296              	.LVL283:
 3297              		.thumb
 3298              		.syntax unified
 3299              	.L286:
 3300 0018 FEE7     		b	.L286
 3301              	.L285:
 3302              	.LBE169:
 3303              	.LBE168:
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3304              		.loc 1 2998 0
 3305 001a 04F11805 		add	r5, r4, #24
 3306 001e 2846     		mov	r0, r5
 3307              	.LVL284:
 3308 0020 FFF7FEFF 		bl	uxListRemove
 3309              	.LVL285:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3310              		.loc 1 3000 0
 3311 0024 134B     		ldr	r3, .L292
 3312 0026 1B68     		ldr	r3, [r3]
 3313 0028 A3B9     		cbnz	r3, .L287
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3314              		.loc 1 3002 0
 3315 002a 251D     		adds	r5, r4, #4
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 156


 3316 002c 2846     		mov	r0, r5
 3317 002e FFF7FEFF 		bl	uxListRemove
 3318              	.LVL286:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3319              		.loc 1 3003 0
 3320 0032 E36A     		ldr	r3, [r4, #44]
 3321 0034 0122     		movs	r2, #1
 3322 0036 02FA03F1 		lsl	r1, r2, r3
 3323 003a 0F48     		ldr	r0, .L292+4
 3324 003c 0268     		ldr	r2, [r0]
 3325 003e 0A43     		orrs	r2, r2, r1
 3326 0040 0260     		str	r2, [r0]
 3327 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3328 0046 9A00     		lsls	r2, r3, #2
 3329 0048 2946     		mov	r1, r5
 3330 004a 0C48     		ldr	r0, .L292+8
 3331 004c 1044     		add	r0, r0, r2
 3332 004e FFF7FEFF 		bl	vListInsertEnd
 3333              	.LVL287:
 3334 0052 03E0     		b	.L288
 3335              	.L287:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3336              		.loc 1 3009 0
 3337 0054 2946     		mov	r1, r5
 3338 0056 0A48     		ldr	r0, .L292+12
 3339 0058 FFF7FEFF 		bl	vListInsertEnd
 3340              	.LVL288:
 3341              	.L288:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3342              		.loc 1 3012 0
 3343 005c E26A     		ldr	r2, [r4, #44]
 3344 005e 094B     		ldr	r3, .L292+16
 3345 0060 1B68     		ldr	r3, [r3]
 3346 0062 DB6A     		ldr	r3, [r3, #44]
 3347 0064 9A42     		cmp	r2, r3
 3348 0066 03D9     		bls	.L290
 3349              	.LVL289:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3350              		.loc 1 3021 0
 3351 0068 0120     		movs	r0, #1
 3352 006a 074B     		ldr	r3, .L292+20
 3353 006c 1860     		str	r0, [r3]
 3354 006e 38BD     		pop	{r3, r4, r5, pc}
 3355              	.LVL290:
 3356              	.L290:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3357              		.loc 1 3025 0
 3358 0070 0020     		movs	r0, #0
 3359              	.LVL291:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3360              		.loc 1 3043 0
 3361 0072 38BD     		pop	{r3, r4, r5, pc}
 3362              	.LVL292:
 3363              	.L293:
 3364              		.align	2
 3365              	.L292:
 3366 0074 00000000 		.word	.LANCHOR16
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 157


 3367 0078 00000000 		.word	.LANCHOR13
 3368 007c 00000000 		.word	.LANCHOR4
 3369 0080 00000000 		.word	.LANCHOR1
 3370 0084 00000000 		.word	.LANCHOR10
 3371 0088 00000000 		.word	.LANCHOR19
 3372              		.cfi_endproc
 3373              	.LFE33:
 3375              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3376              		.align	2
 3377              		.global	vTaskRemoveFromUnorderedEventList
 3378              		.thumb
 3379              		.thumb_func
 3381              	vTaskRemoveFromUnorderedEventList:
 3382              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3383              		.loc 1 3047 0
 3384              		.cfi_startproc
 3385              		@ args = 0, pretend = 0, frame = 0
 3386              		@ frame_needed = 0, uses_anonymous_args = 0
 3387              	.LVL293:
 3388 0000 38B5     		push	{r3, r4, r5, lr}
 3389              	.LCFI35:
 3390              		.cfi_def_cfa_offset 16
 3391              		.cfi_offset 3, -16
 3392              		.cfi_offset 4, -12
 3393              		.cfi_offset 5, -8
 3394              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3395              		.loc 1 3052 0
 3396 0002 1D4B     		ldr	r3, .L301
 3397 0004 1B68     		ldr	r3, [r3]
 3398 0006 43B9     		cbnz	r3, .L295
 3399              	.LBB170:
 3400              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3401              		.loc 2 195 0
 3402              		.syntax unified
 3403              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3404 0008 4FF05003 			mov r3, #80												
 3405 000c 83F31188 		msr basepri, r3											
 3406 0010 BFF36F8F 		isb														
 3407 0014 BFF34F8F 		dsb														
 3408              	
 3409              	@ 0 "" 2
 3410              	.LVL294:
 3411              		.thumb
 3412              		.syntax unified
 3413              	.L296:
 3414 0018 FEE7     		b	.L296
 3415              	.L295:
 3416              	.LBE171:
 3417              	.LBE170:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3418              		.loc 1 3055 0
 3419 001a 41F00043 		orr	r3, r1, #-2147483648
 3420 001e 0360     		str	r3, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 158


 3421              		.loc 1 3059 0
 3422 0020 C468     		ldr	r4, [r0, #12]
 3423              	.LVL295:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3424              		.loc 1 3060 0
 3425 0022 44B9     		cbnz	r4, .L297
 3426              	.LBB172:
 3427              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3428              		.loc 2 195 0
 3429              		.syntax unified
 3430              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3431 0024 4FF05003 			mov r3, #80												
 3432 0028 83F31188 		msr basepri, r3											
 3433 002c BFF36F8F 		isb														
 3434 0030 BFF34F8F 		dsb														
 3435              	
 3436              	@ 0 "" 2
 3437              	.LVL296:
 3438              		.thumb
 3439              		.syntax unified
 3440              	.L298:
 3441 0034 FEE7     		b	.L298
 3442              	.L297:
 3443              	.LBE173:
 3444              	.LBE172:
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3445              		.loc 1 3061 0
 3446 0036 FFF7FEFF 		bl	uxListRemove
 3447              	.LVL297:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3448              		.loc 1 3066 0
 3449 003a 251D     		adds	r5, r4, #4
 3450 003c 2846     		mov	r0, r5
 3451 003e FFF7FEFF 		bl	uxListRemove
 3452              	.LVL298:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3453              		.loc 1 3067 0
 3454 0042 E36A     		ldr	r3, [r4, #44]
 3455 0044 0122     		movs	r2, #1
 3456 0046 02FA03F1 		lsl	r1, r2, r3
 3457 004a 0C48     		ldr	r0, .L301+4
 3458 004c 0268     		ldr	r2, [r0]
 3459 004e 0A43     		orrs	r2, r2, r1
 3460 0050 0260     		str	r2, [r0]
 3461 0052 03EB8303 		add	r3, r3, r3, lsl #2
 3462 0056 9A00     		lsls	r2, r3, #2
 3463 0058 2946     		mov	r1, r5
 3464 005a 0948     		ldr	r0, .L301+8
 3465 005c 1044     		add	r0, r0, r2
 3466 005e FFF7FEFF 		bl	vListInsertEnd
 3467              	.LVL299:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3468              		.loc 1 3069 0
 3469 0062 E26A     		ldr	r2, [r4, #44]
 3470 0064 074B     		ldr	r3, .L301+12
 3471 0066 1B68     		ldr	r3, [r3]
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 159


 3472 0068 DB6A     		ldr	r3, [r3, #44]
 3473 006a 9A42     		cmp	r2, r3
 3474 006c 02D9     		bls	.L294
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3475              		.loc 1 3075 0
 3476 006e 0122     		movs	r2, #1
 3477 0070 054B     		ldr	r3, .L301+16
 3478 0072 1A60     		str	r2, [r3]
 3479              	.L294:
 3480 0074 38BD     		pop	{r3, r4, r5, pc}
 3481              	.LVL300:
 3482              	.L302:
 3483 0076 00BF     		.align	2
 3484              	.L301:
 3485 0078 00000000 		.word	.LANCHOR16
 3486 007c 00000000 		.word	.LANCHOR13
 3487 0080 00000000 		.word	.LANCHOR4
 3488 0084 00000000 		.word	.LANCHOR10
 3489 0088 00000000 		.word	.LANCHOR19
 3490              		.cfi_endproc
 3491              	.LFE34:
 3493              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3494              		.align	2
 3495              		.global	vTaskSetTimeOutState
 3496              		.thumb
 3497              		.thumb_func
 3499              	vTaskSetTimeOutState:
 3500              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3501              		.loc 1 3081 0
 3502              		.cfi_startproc
 3503              		@ args = 0, pretend = 0, frame = 0
 3504              		@ frame_needed = 0, uses_anonymous_args = 0
 3505              	.LVL301:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3506              		.loc 1 3082 0
 3507 0000 40B9     		cbnz	r0, .L304
 3508              	.LBB174:
 3509              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3510              		.loc 2 195 0
 3511              		.syntax unified
 3512              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3513 0002 4FF05003 			mov r3, #80												
 3514 0006 83F31188 		msr basepri, r3											
 3515 000a BFF36F8F 		isb														
 3516 000e BFF34F8F 		dsb														
 3517              	
 3518              	@ 0 "" 2
 3519              	.LVL302:
 3520              		.thumb
 3521              		.syntax unified
 3522              	.L305:
 3523 0012 FEE7     		b	.L305
 3524              	.L304:
 3525              	.LBE175:
 3526              	.LBE174:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 160


3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3527              		.loc 1 3081 0
 3528 0014 10B5     		push	{r4, lr}
 3529              	.LCFI36:
 3530              		.cfi_def_cfa_offset 8
 3531              		.cfi_offset 4, -8
 3532              		.cfi_offset 14, -4
 3533 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3534              		.loc 1 3083 0
 3535 0018 FFF7FEFF 		bl	vPortEnterCritical
 3536              	.LVL303:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3537              		.loc 1 3085 0
 3538 001c 044B     		ldr	r3, .L307
 3539 001e 1B68     		ldr	r3, [r3]
 3540 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3541              		.loc 1 3086 0
 3542 0022 044B     		ldr	r3, .L307+4
 3543 0024 1B68     		ldr	r3, [r3]
 3544 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3545              		.loc 1 3088 0
 3546 0028 FFF7FEFF 		bl	vPortExitCritical
 3547              	.LVL304:
 3548 002c 10BD     		pop	{r4, pc}
 3549              	.LVL305:
 3550              	.L308:
 3551 002e 00BF     		.align	2
 3552              	.L307:
 3553 0030 00000000 		.word	.LANCHOR17
 3554 0034 00000000 		.word	.LANCHOR15
 3555              		.cfi_endproc
 3556              	.LFE35:
 3558              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3559              		.align	2
 3560              		.global	vTaskInternalSetTimeOutState
 3561              		.thumb
 3562              		.thumb_func
 3564              	vTaskInternalSetTimeOutState:
 3565              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3566              		.loc 1 3093 0
 3567              		.cfi_startproc
 3568              		@ args = 0, pretend = 0, frame = 0
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 3570              		@ link register save eliminated.
 3571              	.LVL306:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3572              		.loc 1 3095 0
 3573 0000 034B     		ldr	r3, .L310
 3574 0002 1B68     		ldr	r3, [r3]
 3575 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3576              		.loc 1 3096 0
 3577 0006 034B     		ldr	r3, .L310+4
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 161


 3578 0008 1B68     		ldr	r3, [r3]
 3579 000a 4360     		str	r3, [r0, #4]
 3580 000c 7047     		bx	lr
 3581              	.L311:
 3582 000e 00BF     		.align	2
 3583              	.L310:
 3584 0010 00000000 		.word	.LANCHOR17
 3585 0014 00000000 		.word	.LANCHOR15
 3586              		.cfi_endproc
 3587              	.LFE36:
 3589              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3590              		.align	2
 3591              		.global	xTaskCheckForTimeOut
 3592              		.thumb
 3593              		.thumb_func
 3595              	xTaskCheckForTimeOut:
 3596              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3597              		.loc 1 3101 0
 3598              		.cfi_startproc
 3599              		@ args = 0, pretend = 0, frame = 0
 3600              		@ frame_needed = 0, uses_anonymous_args = 0
 3601              	.LVL307:
 3602 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3603              	.LCFI37:
 3604              		.cfi_def_cfa_offset 24
 3605              		.cfi_offset 3, -24
 3606              		.cfi_offset 4, -20
 3607              		.cfi_offset 5, -16
 3608              		.cfi_offset 6, -12
 3609              		.cfi_offset 7, -8
 3610              		.cfi_offset 14, -4
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3611              		.loc 1 3104 0
 3612 0002 40B9     		cbnz	r0, .L313
 3613              	.LBB176:
 3614              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3615              		.loc 2 195 0
 3616              		.syntax unified
 3617              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3618 0004 4FF05003 			mov r3, #80												
 3619 0008 83F31188 		msr basepri, r3											
 3620 000c BFF36F8F 		isb														
 3621 0010 BFF34F8F 		dsb														
 3622              	
 3623              	@ 0 "" 2
 3624              	.LVL308:
 3625              		.thumb
 3626              		.syntax unified
 3627              	.L314:
 3628 0014 FEE7     		b	.L314
 3629              	.L313:
 3630 0016 0546     		mov	r5, r0
 3631              	.LBE177:
 3632              	.LBE176:
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 162


 3633              		.loc 1 3105 0
 3634 0018 41B9     		cbnz	r1, .L315
 3635              	.LBB178:
 3636              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3637              		.loc 2 195 0
 3638              		.syntax unified
 3639              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3640 001a 4FF05003 			mov r3, #80												
 3641 001e 83F31188 		msr basepri, r3											
 3642 0022 BFF36F8F 		isb														
 3643 0026 BFF34F8F 		dsb														
 3644              	
 3645              	@ 0 "" 2
 3646              	.LVL309:
 3647              		.thumb
 3648              		.syntax unified
 3649              	.L316:
 3650 002a FEE7     		b	.L316
 3651              	.L315:
 3652 002c 0C46     		mov	r4, r1
 3653              	.LBE179:
 3654              	.LBE178:
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3655              		.loc 1 3107 0
 3656 002e FFF7FEFF 		bl	vPortEnterCritical
 3657              	.LVL310:
 3658              	.LBB180:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3659              		.loc 1 3110 0
 3660 0032 114B     		ldr	r3, .L323
 3661 0034 1868     		ldr	r0, [r3]
 3662              	.LVL311:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3663              		.loc 1 3111 0
 3664 0036 6968     		ldr	r1, [r5, #4]
 3665 0038 421A     		subs	r2, r0, r1
 3666              	.LVL312:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3667              		.loc 1 3125 0
 3668 003a 2368     		ldr	r3, [r4]
 3669 003c B3F1FF3F 		cmp	r3, #-1
 3670 0040 13D0     		beq	.L320
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3671              		.loc 1 3135 0
 3672 0042 2F68     		ldr	r7, [r5]
 3673 0044 0D4E     		ldr	r6, .L323+4
 3674 0046 3668     		ldr	r6, [r6]
 3675 0048 B742     		cmp	r7, r6
 3676 004a 01D0     		beq	.L318
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3677              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3678 004c 8842     		cmp	r0, r1
 3679 004e 0ED2     		bcs	.L321
 3680              	.L318:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3681              		.loc 1 3144 0 is_stmt 1
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 163


 3682 0050 9A42     		cmp	r2, r3
 3683 0052 06D2     		bcs	.L319
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3684              		.loc 1 3147 0
 3685 0054 9B1A     		subs	r3, r3, r2
 3686 0056 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3687              		.loc 1 3148 0
 3688 0058 2846     		mov	r0, r5
 3689              	.LVL313:
 3690 005a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3691              	.LVL314:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3692              		.loc 1 3149 0
 3693 005e 0024     		movs	r4, #0
 3694              	.LVL315:
 3695 0060 06E0     		b	.L317
 3696              	.LVL316:
 3697              	.L319:
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3698              		.loc 1 3153 0
 3699 0062 0023     		movs	r3, #0
 3700 0064 2360     		str	r3, [r4]
 3701              	.LVL317:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3702              		.loc 1 3154 0
 3703 0066 0124     		movs	r4, #1
 3704              	.LVL318:
 3705 0068 02E0     		b	.L317
 3706              	.LVL319:
 3707              	.L320:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3708              		.loc 1 3130 0
 3709 006a 0024     		movs	r4, #0
 3710              	.LVL320:
 3711 006c 00E0     		b	.L317
 3712              	.LVL321:
 3713              	.L321:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3714              		.loc 1 3142 0
 3715 006e 0124     		movs	r4, #1
 3716              	.LVL322:
 3717              	.L317:
 3718              	.LBE180:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3719              		.loc 1 3157 0
 3720 0070 FFF7FEFF 		bl	vPortExitCritical
 3721              	.LVL323:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3722              		.loc 1 3160 0
 3723 0074 2046     		mov	r0, r4
 3724 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3725              	.LVL324:
 3726              	.L324:
 3727              		.align	2
 3728              	.L323:
 3729 0078 00000000 		.word	.LANCHOR15
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 164


 3730 007c 00000000 		.word	.LANCHOR17
 3731              		.cfi_endproc
 3732              	.LFE37:
 3734              		.section	.text.vTaskMissedYield,"ax",%progbits
 3735              		.align	2
 3736              		.global	vTaskMissedYield
 3737              		.thumb
 3738              		.thumb_func
 3740              	vTaskMissedYield:
 3741              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3742              		.loc 1 3164 0
 3743              		.cfi_startproc
 3744              		@ args = 0, pretend = 0, frame = 0
 3745              		@ frame_needed = 0, uses_anonymous_args = 0
 3746              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3747              		.loc 1 3165 0
 3748 0000 0122     		movs	r2, #1
 3749 0002 014B     		ldr	r3, .L326
 3750 0004 1A60     		str	r2, [r3]
 3751 0006 7047     		bx	lr
 3752              	.L327:
 3753              		.align	2
 3754              	.L326:
 3755 0008 00000000 		.word	.LANCHOR19
 3756              		.cfi_endproc
 3757              	.LFE38:
 3759              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3760              		.align	2
 3761              		.global	xTaskGetCurrentTaskHandle
 3762              		.thumb
 3763              		.thumb_func
 3765              	xTaskGetCurrentTaskHandle:
 3766              	.LFB44:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3767              		.loc 1 3751 0
 3768              		.cfi_startproc
 3769              		@ args = 0, pretend = 0, frame = 0
 3770              		@ frame_needed = 0, uses_anonymous_args = 0
 3771              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3772              		.loc 1 3757 0
 3773 0000 014B     		ldr	r3, .L329
 3774 0002 1868     		ldr	r0, [r3]
 3775              	.LVL325:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3776              		.loc 1 3760 0
 3777 0004 7047     		bx	lr
 3778              	.L330:
 3779 0006 00BF     		.align	2
 3780              	.L329:
 3781 0008 00000000 		.word	.LANCHOR10
 3782              		.cfi_endproc
 3783              	.LFE44:
 3785              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3786              		.align	2
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 165


 3787              		.global	xTaskGetSchedulerState
 3788              		.thumb
 3789              		.thumb_func
 3791              	xTaskGetSchedulerState:
 3792              	.LFB45:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3793              		.loc 1 3768 0
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 0
 3796              		@ frame_needed = 0, uses_anonymous_args = 0
 3797              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3798              		.loc 1 3771 0
 3799 0000 054B     		ldr	r3, .L335
 3800 0002 1B68     		ldr	r3, [r3]
 3801 0004 23B1     		cbz	r3, .L333
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3802              		.loc 1 3777 0
 3803 0006 054B     		ldr	r3, .L335+4
 3804 0008 1B68     		ldr	r3, [r3]
 3805 000a 1BB9     		cbnz	r3, .L334
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3806              		.loc 1 3779 0
 3807 000c 0220     		movs	r0, #2
 3808 000e 7047     		bx	lr
 3809              	.L333:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3810              		.loc 1 3773 0
 3811 0010 0120     		movs	r0, #1
 3812 0012 7047     		bx	lr
 3813              	.L334:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3814              		.loc 1 3783 0
 3815 0014 0020     		movs	r0, #0
 3816              	.LVL326:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3817              		.loc 1 3788 0
 3818 0016 7047     		bx	lr
 3819              	.L336:
 3820              		.align	2
 3821              	.L335:
 3822 0018 00000000 		.word	.LANCHOR11
 3823 001c 00000000 		.word	.LANCHOR16
 3824              		.cfi_endproc
 3825              	.LFE45:
 3827              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3828              		.align	2
 3829              		.global	xTaskPriorityInherit
 3830              		.thumb
 3831              		.thumb_func
 3833              	xTaskPriorityInherit:
 3834              	.LFB46:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3835              		.loc 1 3796 0
 3836              		.cfi_startproc
 3837              		@ args = 0, pretend = 0, frame = 0
 3838              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 166


 3839              	.LVL327:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3840              		.loc 1 3803 0
 3841 0000 0028     		cmp	r0, #0
 3842 0002 54D0     		beq	.L344
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 3843              		.loc 1 3796 0
 3844 0004 38B5     		push	{r3, r4, r5, lr}
 3845              	.LCFI38:
 3846              		.cfi_def_cfa_offset 16
 3847              		.cfi_offset 3, -16
 3848              		.cfi_offset 4, -12
 3849              		.cfi_offset 5, -8
 3850              		.cfi_offset 14, -4
 3851 0006 0346     		mov	r3, r0
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3852              		.loc 1 3808 0
 3853 0008 C26A     		ldr	r2, [r0, #44]
 3854 000a 2B49     		ldr	r1, .L348
 3855 000c 0968     		ldr	r1, [r1]
 3856 000e C96A     		ldr	r1, [r1, #44]
 3857 0010 8A42     		cmp	r2, r1
 3858 0012 44D2     		bcs	.L339
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3859              		.loc 1 3813 0
 3860 0014 8169     		ldr	r1, [r0, #24]
 3861 0016 0029     		cmp	r1, #0
 3862 0018 05DB     		blt	.L340
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3863              		.loc 1 3815 0
 3864 001a 2749     		ldr	r1, .L348
 3865 001c 0968     		ldr	r1, [r1]
 3866 001e C96A     		ldr	r1, [r1, #44]
 3867 0020 C1F10701 		rsb	r1, r1, #7
 3868 0024 8161     		str	r1, [r0, #24]
 3869              	.L340:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3870              		.loc 1 3824 0
 3871 0026 5869     		ldr	r0, [r3, #20]
 3872              	.LVL328:
 3873 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3874 002c 9100     		lsls	r1, r2, #2
 3875 002e 234A     		ldr	r2, .L348+4
 3876 0030 1144     		add	r1, r1, r2
 3877 0032 8842     		cmp	r0, r1
 3878 0034 01D1     		bne	.L345
 3879 0036 0122     		movs	r2, #1
 3880 0038 00E0     		b	.L341
 3881              	.L345:
 3882 003a 0022     		movs	r2, #0
 3883              	.L341:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3884              		.loc 1 3824 0 is_stmt 0 discriminator 4
 3885 003c 4AB3     		cbz	r2, .L342
 3886 003e 1C46     		mov	r4, r3
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3887              		.loc 1 3826 0 is_stmt 1
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 167


 3888 0040 1D1D     		adds	r5, r3, #4
 3889 0042 2846     		mov	r0, r5
 3890 0044 FFF7FEFF 		bl	uxListRemove
 3891              	.LVL329:
 3892 0048 70B9     		cbnz	r0, .L343
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3893              		.loc 1 3828 0
 3894 004a E36A     		ldr	r3, [r4, #44]
 3895 004c 03EB8301 		add	r1, r3, r3, lsl #2
 3896 0050 8A00     		lsls	r2, r1, #2
 3897 0052 1A49     		ldr	r1, .L348+4
 3898 0054 8A58     		ldr	r2, [r1, r2]
 3899 0056 3AB9     		cbnz	r2, .L343
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3900              		.loc 1 3828 0 is_stmt 0 discriminator 1
 3901 0058 0122     		movs	r2, #1
 3902 005a 02FA03F3 		lsl	r3, r2, r3
 3903 005e 1849     		ldr	r1, .L348+8
 3904 0060 0A68     		ldr	r2, [r1]
 3905 0062 22EA0303 		bic	r3, r2, r3
 3906 0066 0B60     		str	r3, [r1]
 3907              	.L343:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3908              		.loc 1 3836 0 is_stmt 1
 3909 0068 134B     		ldr	r3, .L348
 3910 006a 1B68     		ldr	r3, [r3]
 3911 006c DB6A     		ldr	r3, [r3, #44]
 3912 006e E362     		str	r3, [r4, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3913              		.loc 1 3837 0
 3914 0070 0124     		movs	r4, #1
 3915              	.LVL330:
 3916 0072 04FA03F0 		lsl	r0, r4, r3
 3917 0076 1249     		ldr	r1, .L348+8
 3918 0078 0A68     		ldr	r2, [r1]
 3919 007a 0243     		orrs	r2, r2, r0
 3920 007c 0A60     		str	r2, [r1]
 3921 007e 03EB8303 		add	r3, r3, r3, lsl #2
 3922 0082 9A00     		lsls	r2, r3, #2
 3923 0084 2946     		mov	r1, r5
 3924 0086 0D48     		ldr	r0, .L348+4
 3925 0088 1044     		add	r0, r0, r2
 3926 008a FFF7FEFF 		bl	vListInsertEnd
 3927              	.LVL331:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3928              		.loc 1 3848 0
 3929 008e 2046     		mov	r0, r4
 3930 0090 38BD     		pop	{r3, r4, r5, pc}
 3931              	.LVL332:
 3932              	.L342:
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3933              		.loc 1 3842 0
 3934 0092 094A     		ldr	r2, .L348
 3935 0094 1268     		ldr	r2, [r2]
 3936 0096 D26A     		ldr	r2, [r2, #44]
 3937 0098 DA62     		str	r2, [r3, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 168


 3938              		.loc 1 3848 0
 3939 009a 0120     		movs	r0, #1
 3940 009c 38BD     		pop	{r3, r4, r5, pc}
 3941              	.LVL333:
 3942              	.L339:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3943              		.loc 1 3852 0
 3944 009e 426C     		ldr	r2, [r0, #68]
 3945 00a0 054B     		ldr	r3, .L348
 3946 00a2 1B68     		ldr	r3, [r3]
 3947 00a4 DB6A     		ldr	r3, [r3, #44]
 3948 00a6 9A42     		cmp	r2, r3
 3949 00a8 03D3     		bcc	.L346
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3950              		.loc 1 3798 0
 3951 00aa 0020     		movs	r0, #0
 3952              	.LVL334:
 3953 00ac 38BD     		pop	{r3, r4, r5, pc}
 3954              	.LVL335:
 3955              	.L344:
 3956              	.LCFI39:
 3957              		.cfi_def_cfa_offset 0
 3958              		.cfi_restore 3
 3959              		.cfi_restore 4
 3960              		.cfi_restore 5
 3961              		.cfi_restore 14
 3962 00ae 0020     		movs	r0, #0
 3963              	.LVL336:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3964              		.loc 1 3875 0
 3965 00b0 7047     		bx	lr
 3966              	.LVL337:
 3967              	.L346:
 3968              	.LCFI40:
 3969              		.cfi_def_cfa_offset 16
 3970              		.cfi_offset 3, -16
 3971              		.cfi_offset 4, -12
 3972              		.cfi_offset 5, -8
 3973              		.cfi_offset 14, -4
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3974              		.loc 1 3861 0
 3975 00b2 0120     		movs	r0, #1
 3976              	.LVL338:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3977              		.loc 1 3875 0
 3978 00b4 38BD     		pop	{r3, r4, r5, pc}
 3979              	.L349:
 3980 00b6 00BF     		.align	2
 3981              	.L348:
 3982 00b8 00000000 		.word	.LANCHOR10
 3983 00bc 00000000 		.word	.LANCHOR4
 3984 00c0 00000000 		.word	.LANCHOR13
 3985              		.cfi_endproc
 3986              	.LFE46:
 3988              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3989              		.align	2
 3990              		.global	xTaskPriorityDisinherit
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 169


 3991              		.thumb
 3992              		.thumb_func
 3994              	xTaskPriorityDisinherit:
 3995              	.LFB47:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3996              		.loc 1 3883 0
 3997              		.cfi_startproc
 3998              		@ args = 0, pretend = 0, frame = 0
 3999              		@ frame_needed = 0, uses_anonymous_args = 0
 4000              	.LVL339:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4001              		.loc 1 3887 0
 4002 0000 0028     		cmp	r0, #0
 4003 0002 4BD0     		beq	.L357
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4004              		.loc 1 3883 0
 4005 0004 38B5     		push	{r3, r4, r5, lr}
 4006              	.LCFI41:
 4007              		.cfi_def_cfa_offset 16
 4008              		.cfi_offset 3, -16
 4009              		.cfi_offset 4, -12
 4010              		.cfi_offset 5, -8
 4011              		.cfi_offset 14, -4
 4012 0006 0346     		mov	r3, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4013              		.loc 1 3893 0
 4014 0008 274A     		ldr	r2, .L361
 4015 000a 1268     		ldr	r2, [r2]
 4016 000c 9042     		cmp	r0, r2
 4017 000e 08D0     		beq	.L352
 4018              	.LBB181:
 4019              	.LBB182:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4020              		.loc 2 195 0
 4021              		.syntax unified
 4022              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4023 0010 4FF05003 			mov r3, #80												
 4024 0014 83F31188 		msr basepri, r3											
 4025 0018 BFF36F8F 		isb														
 4026 001c BFF34F8F 		dsb														
 4027              	
 4028              	@ 0 "" 2
 4029              	.LVL340:
 4030              		.thumb
 4031              		.syntax unified
 4032              	.L353:
 4033 0020 FEE7     		b	.L353
 4034              	.L352:
 4035              	.LBE182:
 4036              	.LBE181:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4037              		.loc 1 3894 0
 4038 0022 826C     		ldr	r2, [r0, #72]
 4039 0024 42B9     		cbnz	r2, .L354
 4040              	.LBB183:
 4041              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 170


 4042              		.loc 2 195 0
 4043              		.syntax unified
 4044              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4045 0026 4FF05003 			mov r3, #80												
 4046 002a 83F31188 		msr basepri, r3											
 4047 002e BFF36F8F 		isb														
 4048 0032 BFF34F8F 		dsb														
 4049              	
 4050              	@ 0 "" 2
 4051              	.LVL341:
 4052              		.thumb
 4053              		.syntax unified
 4054              	.L355:
 4055 0036 FEE7     		b	.L355
 4056              	.L354:
 4057              	.LBE184:
 4058              	.LBE183:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4059              		.loc 1 3895 0
 4060 0038 013A     		subs	r2, r2, #1
 4061 003a 8264     		str	r2, [r0, #72]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4062              		.loc 1 3899 0
 4063 003c C06A     		ldr	r0, [r0, #44]
 4064              	.LVL342:
 4065 003e 596C     		ldr	r1, [r3, #68]
 4066 0040 8842     		cmp	r0, r1
 4067 0042 2DD0     		beq	.L358
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4068              		.loc 1 3902 0
 4069 0044 72BB     		cbnz	r2, .L359
 4070 0046 1C46     		mov	r4, r3
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4071              		.loc 1 3909 0
 4072 0048 1D1D     		adds	r5, r3, #4
 4073 004a 2846     		mov	r0, r5
 4074 004c FFF7FEFF 		bl	uxListRemove
 4075              	.LVL343:
 4076 0050 70B9     		cbnz	r0, .L356
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4077              		.loc 1 3911 0
 4078 0052 E26A     		ldr	r2, [r4, #44]
 4079 0054 02EB8201 		add	r1, r2, r2, lsl #2
 4080 0058 8B00     		lsls	r3, r1, #2
 4081 005a 1449     		ldr	r1, .L361+4
 4082 005c CB58     		ldr	r3, [r1, r3]
 4083 005e 3BB9     		cbnz	r3, .L356
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4084              		.loc 1 3911 0 is_stmt 0 discriminator 1
 4085 0060 0123     		movs	r3, #1
 4086 0062 03FA02F2 		lsl	r2, r3, r2
 4087 0066 1249     		ldr	r1, .L361+8
 4088 0068 0B68     		ldr	r3, [r1]
 4089 006a 23EA0203 		bic	r3, r3, r2
 4090 006e 0B60     		str	r3, [r1]
 4091              	.L356:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 171


 4092              		.loc 1 3921 0 is_stmt 1
 4093 0070 636C     		ldr	r3, [r4, #68]
 4094 0072 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4095              		.loc 1 3926 0
 4096 0074 C3F10702 		rsb	r2, r3, #7
 4097 0078 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4098              		.loc 1 3927 0
 4099 007a 0124     		movs	r4, #1
 4100              	.LVL344:
 4101 007c 04FA03F0 		lsl	r0, r4, r3
 4102 0080 0B49     		ldr	r1, .L361+8
 4103 0082 0A68     		ldr	r2, [r1]
 4104 0084 0243     		orrs	r2, r2, r0
 4105 0086 0A60     		str	r2, [r1]
 4106 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4107 008c 9A00     		lsls	r2, r3, #2
 4108 008e 2946     		mov	r1, r5
 4109 0090 0648     		ldr	r0, .L361+4
 4110 0092 1044     		add	r0, r0, r2
 4111 0094 FFF7FEFF 		bl	vListInsertEnd
 4112              	.LVL345:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4113              		.loc 1 3937 0
 4114 0098 2046     		mov	r0, r4
 4115 009a 38BD     		pop	{r3, r4, r5, pc}
 4116              	.LVL346:
 4117              	.L357:
 4118              	.LCFI42:
 4119              		.cfi_def_cfa_offset 0
 4120              		.cfi_restore 3
 4121              		.cfi_restore 4
 4122              		.cfi_restore 5
 4123              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 3885 0
 4125 009c 0020     		movs	r0, #0
 4126              	.LVL347:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4127              		.loc 1 3955 0
 4128 009e 7047     		bx	lr
 4129              	.LVL348:
 4130              	.L358:
 4131              	.LCFI43:
 4132              		.cfi_def_cfa_offset 16
 4133              		.cfi_offset 3, -16
 4134              		.cfi_offset 4, -12
 4135              		.cfi_offset 5, -8
 4136              		.cfi_offset 14, -4
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4137              		.loc 1 3885 0
 4138 00a0 0020     		movs	r0, #0
 4139 00a2 38BD     		pop	{r3, r4, r5, pc}
 4140              	.LVL349:
 4141              	.L359:
 4142 00a4 0020     		movs	r0, #0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 172


 4143              	.LVL350:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4144              		.loc 1 3955 0
 4145 00a6 38BD     		pop	{r3, r4, r5, pc}
 4146              	.LVL351:
 4147              	.L362:
 4148              		.align	2
 4149              	.L361:
 4150 00a8 00000000 		.word	.LANCHOR10
 4151 00ac 00000000 		.word	.LANCHOR4
 4152 00b0 00000000 		.word	.LANCHOR13
 4153              		.cfi_endproc
 4154              	.LFE47:
 4156              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4157              		.align	2
 4158              		.global	vTaskPriorityDisinheritAfterTimeout
 4159              		.thumb
 4160              		.thumb_func
 4162              	vTaskPriorityDisinheritAfterTimeout:
 4163              	.LFB48:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4164              		.loc 1 3963 0
 4165              		.cfi_startproc
 4166              		@ args = 0, pretend = 0, frame = 0
 4167              		@ frame_needed = 0, uses_anonymous_args = 0
 4168              	.LVL352:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4169              		.loc 1 3968 0
 4170 0000 0028     		cmp	r0, #0
 4171 0002 5BD0     		beq	.L375
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4172              		.loc 1 3963 0
 4173 0004 38B5     		push	{r3, r4, r5, lr}
 4174              	.LCFI44:
 4175              		.cfi_def_cfa_offset 16
 4176              		.cfi_offset 3, -16
 4177              		.cfi_offset 4, -12
 4178              		.cfi_offset 5, -8
 4179              		.cfi_offset 14, -4
 4180 0006 0346     		mov	r3, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4181              		.loc 1 3972 0
 4182 0008 806C     		ldr	r0, [r0, #72]
 4183              	.LVL353:
 4184 000a 40B9     		cbnz	r0, .L365
 4185              	.LBB185:
 4186              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4187              		.loc 2 195 0
 4188              		.syntax unified
 4189              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4190 000c 4FF05003 			mov r3, #80												
 4191 0010 83F31188 		msr basepri, r3											
 4192 0014 BFF36F8F 		isb														
 4193 0018 BFF34F8F 		dsb														
 4194              	
 4195              	@ 0 "" 2
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 173


 4196              	.LVL354:
 4197              		.thumb
 4198              		.syntax unified
 4199              	.L366:
 4200 001c FEE7     		b	.L366
 4201              	.LVL355:
 4202              	.L365:
 4203              	.LBE186:
 4204              	.LBE185:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4205              		.loc 1 3978 0
 4206 001e 5A6C     		ldr	r2, [r3, #68]
 4207 0020 8A42     		cmp	r2, r1
 4208 0022 00D2     		bcs	.L367
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4209              		.loc 1 3980 0
 4210 0024 0A46     		mov	r2, r1
 4211              	.L367:
 4212              	.LVL356:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4213              		.loc 1 3988 0
 4214 0026 D96A     		ldr	r1, [r3, #44]
 4215              	.LVL357:
 4216 0028 8A42     		cmp	r2, r1
 4217 002a 46D0     		beq	.L363
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4218              		.loc 1 3994 0
 4219 002c 0128     		cmp	r0, #1
 4220 002e 44D1     		bne	.L363
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4221              		.loc 1 3999 0
 4222 0030 2348     		ldr	r0, .L376
 4223 0032 0068     		ldr	r0, [r0]
 4224 0034 8342     		cmp	r3, r0
 4225 0036 08D1     		bne	.L368
 4226              	.LBB187:
 4227              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4228              		.loc 2 195 0
 4229              		.syntax unified
 4230              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4231 0038 4FF05003 			mov r3, #80												
 4232 003c 83F31188 		msr basepri, r3											
 4233 0040 BFF36F8F 		isb														
 4234 0044 BFF34F8F 		dsb														
 4235              	
 4236              	@ 0 "" 2
 4237              	.LVL358:
 4238              		.thumb
 4239              		.syntax unified
 4240              	.L369:
 4241 0048 FEE7     		b	.L369
 4242              	.LVL359:
 4243              	.L368:
 4244              	.LBE188:
 4245              	.LBE187:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 174


 4246              		.loc 1 4006 0
 4247 004a DA62     		str	r2, [r3, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4248              		.loc 1 4010 0
 4249 004c 9869     		ldr	r0, [r3, #24]
 4250 004e 0028     		cmp	r0, #0
 4251 0050 02DB     		blt	.L370
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4252              		.loc 1 4012 0
 4253 0052 C2F10702 		rsb	r2, r2, #7
 4254              	.LVL360:
 4255 0056 9A61     		str	r2, [r3, #24]
 4256              	.L370:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4257              		.loc 1 4025 0
 4258 0058 5869     		ldr	r0, [r3, #20]
 4259 005a 01EB8101 		add	r1, r1, r1, lsl #2
 4260              	.LVL361:
 4261 005e 8A00     		lsls	r2, r1, #2
 4262 0060 1849     		ldr	r1, .L376+4
 4263 0062 0A44     		add	r2, r2, r1
 4264 0064 9042     		cmp	r0, r2
 4265 0066 01D1     		bne	.L373
 4266 0068 0122     		movs	r2, #1
 4267 006a 00E0     		b	.L371
 4268              	.L373:
 4269 006c 0022     		movs	r2, #0
 4270              	.L371:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4271              		.loc 1 4025 0 is_stmt 0 discriminator 4
 4272 006e 22B3     		cbz	r2, .L363
 4273 0070 1C46     		mov	r4, r3
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4274              		.loc 1 4027 0 is_stmt 1
 4275 0072 1D1D     		adds	r5, r3, #4
 4276 0074 2846     		mov	r0, r5
 4277 0076 FFF7FEFF 		bl	uxListRemove
 4278              	.LVL362:
 4279 007a 70B9     		cbnz	r0, .L372
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4280              		.loc 1 4029 0
 4281 007c E26A     		ldr	r2, [r4, #44]
 4282 007e 02EB8201 		add	r1, r2, r2, lsl #2
 4283 0082 8B00     		lsls	r3, r1, #2
 4284 0084 0F49     		ldr	r1, .L376+4
 4285 0086 CB58     		ldr	r3, [r1, r3]
 4286 0088 3BB9     		cbnz	r3, .L372
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4287              		.loc 1 4029 0 is_stmt 0 discriminator 1
 4288 008a 0123     		movs	r3, #1
 4289 008c 03FA02F2 		lsl	r2, r3, r2
 4290 0090 0D49     		ldr	r1, .L376+8
 4291 0092 0B68     		ldr	r3, [r1]
 4292 0094 23EA0203 		bic	r3, r3, r2
 4293 0098 0B60     		str	r3, [r1]
 4294              	.L372:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 175


 4295              		.loc 1 4036 0 is_stmt 1
 4296 009a E36A     		ldr	r3, [r4, #44]
 4297 009c 0122     		movs	r2, #1
 4298 009e 02FA03F1 		lsl	r1, r2, r3
 4299 00a2 0948     		ldr	r0, .L376+8
 4300 00a4 0268     		ldr	r2, [r0]
 4301 00a6 0A43     		orrs	r2, r2, r1
 4302 00a8 0260     		str	r2, [r0]
 4303 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 4304 00ae 9A00     		lsls	r2, r3, #2
 4305 00b0 2946     		mov	r1, r5
 4306 00b2 0448     		ldr	r0, .L376+4
 4307 00b4 1044     		add	r0, r0, r2
 4308 00b6 FFF7FEFF 		bl	vListInsertEnd
 4309              	.LVL363:
 4310              	.L363:
 4311 00ba 38BD     		pop	{r3, r4, r5, pc}
 4312              	.LVL364:
 4313              	.L375:
 4314              	.LCFI45:
 4315              		.cfi_def_cfa_offset 0
 4316              		.cfi_restore 3
 4317              		.cfi_restore 4
 4318              		.cfi_restore 5
 4319              		.cfi_restore 14
 4320 00bc 7047     		bx	lr
 4321              	.L377:
 4322 00be 00BF     		.align	2
 4323              	.L376:
 4324 00c0 00000000 		.word	.LANCHOR10
 4325 00c4 00000000 		.word	.LANCHOR4
 4326 00c8 00000000 		.word	.LANCHOR13
 4327              		.cfi_endproc
 4328              	.LFE48:
 4330              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4331              		.align	2
 4332              		.global	uxTaskResetEventItemValue
 4333              		.thumb
 4334              		.thumb_func
 4336              	uxTaskResetEventItemValue:
 4337              	.LFB49:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4338              		.loc 1 4377 0
 4339              		.cfi_startproc
 4340              		@ args = 0, pretend = 0, frame = 0
 4341              		@ frame_needed = 0, uses_anonymous_args = 0
 4342              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4343              		.loc 1 4380 0
 4344 0000 044B     		ldr	r3, .L379
 4345 0002 1A68     		ldr	r2, [r3]
 4346 0004 9069     		ldr	r0, [r2, #24]
 4347              	.LVL365:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4348              		.loc 1 4384 0
 4349 0006 1A68     		ldr	r2, [r3]
 4350 0008 1B68     		ldr	r3, [r3]
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 176


 4351 000a DB6A     		ldr	r3, [r3, #44]
 4352 000c C3F10703 		rsb	r3, r3, #7
 4353 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4354              		.loc 1 4387 0
 4355 0012 7047     		bx	lr
 4356              	.L380:
 4357              		.align	2
 4358              	.L379:
 4359 0014 00000000 		.word	.LANCHOR10
 4360              		.cfi_endproc
 4361              	.LFE49:
 4363              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4364              		.align	2
 4365              		.global	pvTaskIncrementMutexHeldCount
 4366              		.thumb
 4367              		.thumb_func
 4369              	pvTaskIncrementMutexHeldCount:
 4370              	.LFB50:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4371              		.loc 1 4393 0
 4372              		.cfi_startproc
 4373              		@ args = 0, pretend = 0, frame = 0
 4374              		@ frame_needed = 0, uses_anonymous_args = 0
 4375              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4376              		.loc 1 4396 0
 4377 0000 054B     		ldr	r3, .L383
 4378 0002 1B68     		ldr	r3, [r3]
 4379 0004 23B1     		cbz	r3, .L382
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4380              		.loc 1 4398 0
 4381 0006 044B     		ldr	r3, .L383
 4382 0008 1A68     		ldr	r2, [r3]
 4383 000a 936C     		ldr	r3, [r2, #72]
 4384 000c 0133     		adds	r3, r3, #1
 4385 000e 9364     		str	r3, [r2, #72]
 4386              	.L382:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4387              		.loc 1 4401 0
 4388 0010 014B     		ldr	r3, .L383
 4389 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4390              		.loc 1 4402 0
 4391 0014 7047     		bx	lr
 4392              	.L384:
 4393 0016 00BF     		.align	2
 4394              	.L383:
 4395 0018 00000000 		.word	.LANCHOR10
 4396              		.cfi_endproc
 4397              	.LFE50:
 4399              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4400              		.align	2
 4401              		.global	ulTaskNotifyTake
 4402              		.thumb
 4403              		.thumb_func
 4405              	ulTaskNotifyTake:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 177


 4406              	.LFB51:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4407              		.loc 1 4410 0
 4408              		.cfi_startproc
 4409              		@ args = 0, pretend = 0, frame = 0
 4410              		@ frame_needed = 0, uses_anonymous_args = 0
 4411              	.LVL366:
 4412 0000 38B5     		push	{r3, r4, r5, lr}
 4413              	.LCFI46:
 4414              		.cfi_def_cfa_offset 16
 4415              		.cfi_offset 3, -16
 4416              		.cfi_offset 4, -12
 4417              		.cfi_offset 5, -8
 4418              		.cfi_offset 14, -4
 4419 0002 0546     		mov	r5, r0
 4420 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4421              		.loc 1 4413 0
 4422 0006 FFF7FEFF 		bl	vPortEnterCritical
 4423              	.LVL367:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4424              		.loc 1 4416 0
 4425 000a 184B     		ldr	r3, .L390
 4426 000c 1B68     		ldr	r3, [r3]
 4427 000e 1B6D     		ldr	r3, [r3, #80]
 4428 0010 8BB9     		cbnz	r3, .L386
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4429              		.loc 1 4419 0
 4430 0012 164B     		ldr	r3, .L390
 4431 0014 1B68     		ldr	r3, [r3]
 4432 0016 0122     		movs	r2, #1
 4433 0018 83F85420 		strb	r2, [r3, #84]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4434              		.loc 1 4421 0
 4435 001c 5CB1     		cbz	r4, .L386
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4436              		.loc 1 4423 0
 4437 001e 1146     		mov	r1, r2
 4438 0020 2046     		mov	r0, r4
 4439 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4440              	.LVL368:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4441              		.loc 1 4430 0
 4442 0026 4FF08052 		mov	r2, #268435456
 4443 002a 114B     		ldr	r3, .L390+4
 4444 002c 1A60     		str	r2, [r3]
 4445              		.syntax unified
 4446              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4447 002e BFF34F8F 		dsb
 4448              	@ 0 "" 2
 4449              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4450 0032 BFF36F8F 		isb
 4451              	@ 0 "" 2
 4452              		.thumb
 4453              		.syntax unified
 4454              	.L386:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 178


 4455              		.loc 1 4442 0
 4456 0036 FFF7FEFF 		bl	vPortExitCritical
 4457              	.LVL369:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4458              		.loc 1 4444 0
 4459 003a FFF7FEFF 		bl	vPortEnterCritical
 4460              	.LVL370:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4461              		.loc 1 4447 0
 4462 003e 0B4B     		ldr	r3, .L390
 4463 0040 1B68     		ldr	r3, [r3]
 4464 0042 1C6D     		ldr	r4, [r3, #80]
 4465              	.LVL371:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4466              		.loc 1 4449 0
 4467 0044 4CB1     		cbz	r4, .L387
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4468              		.loc 1 4451 0
 4469 0046 25B1     		cbz	r5, .L388
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4470              		.loc 1 4453 0
 4471 0048 084B     		ldr	r3, .L390
 4472 004a 1B68     		ldr	r3, [r3]
 4473 004c 0022     		movs	r2, #0
 4474 004e 1A65     		str	r2, [r3, #80]
 4475 0050 03E0     		b	.L387
 4476              	.L388:
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4477              		.loc 1 4457 0
 4478 0052 064B     		ldr	r3, .L390
 4479 0054 1B68     		ldr	r3, [r3]
 4480 0056 621E     		subs	r2, r4, #1
 4481 0058 1A65     		str	r2, [r3, #80]
 4482              	.L387:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4483              		.loc 1 4465 0
 4484 005a 044B     		ldr	r3, .L390
 4485 005c 1B68     		ldr	r3, [r3]
 4486 005e 0022     		movs	r2, #0
 4487 0060 83F85420 		strb	r2, [r3, #84]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4488              		.loc 1 4467 0
 4489 0064 FFF7FEFF 		bl	vPortExitCritical
 4490              	.LVL372:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4491              		.loc 1 4470 0
 4492 0068 2046     		mov	r0, r4
 4493 006a 38BD     		pop	{r3, r4, r5, pc}
 4494              	.LVL373:
 4495              	.L391:
 4496              		.align	2
 4497              	.L390:
 4498 006c 00000000 		.word	.LANCHOR10
 4499 0070 04ED00E0 		.word	-536810236
 4500              		.cfi_endproc
 4501              	.LFE51:
 4503              		.section	.text.xTaskNotifyWait,"ax",%progbits
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 179


 4504              		.align	2
 4505              		.global	xTaskNotifyWait
 4506              		.thumb
 4507              		.thumb_func
 4509              	xTaskNotifyWait:
 4510              	.LFB52:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4511              		.loc 1 4478 0
 4512              		.cfi_startproc
 4513              		@ args = 0, pretend = 0, frame = 0
 4514              		@ frame_needed = 0, uses_anonymous_args = 0
 4515              	.LVL374:
 4516 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4517              	.LCFI47:
 4518              		.cfi_def_cfa_offset 24
 4519              		.cfi_offset 3, -24
 4520              		.cfi_offset 4, -20
 4521              		.cfi_offset 5, -16
 4522              		.cfi_offset 6, -12
 4523              		.cfi_offset 7, -8
 4524              		.cfi_offset 14, -4
 4525 0002 0746     		mov	r7, r0
 4526 0004 0D46     		mov	r5, r1
 4527 0006 1446     		mov	r4, r2
 4528 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4529              		.loc 1 4481 0
 4530 000a FFF7FEFF 		bl	vPortEnterCritical
 4531              	.LVL375:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4532              		.loc 1 4484 0
 4533 000e 204B     		ldr	r3, .L398
 4534 0010 1B68     		ldr	r3, [r3]
 4535 0012 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4536 0016 DBB2     		uxtb	r3, r3
 4537 0018 022B     		cmp	r3, #2
 4538 001a 16D0     		beq	.L393
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4539              		.loc 1 4489 0
 4540 001c 1C4B     		ldr	r3, .L398
 4541 001e 1A68     		ldr	r2, [r3]
 4542 0020 106D     		ldr	r0, [r2, #80]
 4543 0022 20EA0700 		bic	r0, r0, r7
 4544 0026 1065     		str	r0, [r2, #80]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4545              		.loc 1 4492 0
 4546 0028 1B68     		ldr	r3, [r3]
 4547 002a 0122     		movs	r2, #1
 4548 002c 83F85420 		strb	r2, [r3, #84]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4549              		.loc 1 4494 0
 4550 0030 5EB1     		cbz	r6, .L393
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4551              		.loc 1 4496 0
 4552 0032 1146     		mov	r1, r2
 4553 0034 3046     		mov	r0, r6
 4554 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 180


 4555              	.LVL376:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4556              		.loc 1 4503 0
 4557 003a 4FF08052 		mov	r2, #268435456
 4558 003e 154B     		ldr	r3, .L398+4
 4559 0040 1A60     		str	r2, [r3]
 4560              		.syntax unified
 4561              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4562 0042 BFF34F8F 		dsb
 4563              	@ 0 "" 2
 4564              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4565 0046 BFF36F8F 		isb
 4566              	@ 0 "" 2
 4567              		.thumb
 4568              		.syntax unified
 4569              	.L393:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4570              		.loc 1 4515 0
 4571 004a FFF7FEFF 		bl	vPortExitCritical
 4572              	.LVL377:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4573              		.loc 1 4517 0
 4574 004e FFF7FEFF 		bl	vPortEnterCritical
 4575              	.LVL378:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4576              		.loc 1 4521 0
 4577 0052 1CB1     		cbz	r4, .L394
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4578              		.loc 1 4525 0
 4579 0054 0E4B     		ldr	r3, .L398
 4580 0056 1B68     		ldr	r3, [r3]
 4581 0058 1B6D     		ldr	r3, [r3, #80]
 4582 005a 2360     		str	r3, [r4]
 4583              	.L394:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4584              		.loc 1 4532 0
 4585 005c 0C4B     		ldr	r3, .L398
 4586 005e 1B68     		ldr	r3, [r3]
 4587 0060 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 4588 0064 DBB2     		uxtb	r3, r3
 4589 0066 022B     		cmp	r3, #2
 4590 0068 07D1     		bne	.L396
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4591              		.loc 1 4541 0
 4592 006a 094B     		ldr	r3, .L398
 4593 006c 1A68     		ldr	r2, [r3]
 4594 006e 136D     		ldr	r3, [r2, #80]
 4595 0070 23EA0505 		bic	r5, r3, r5
 4596              	.LVL379:
 4597 0074 1565     		str	r5, [r2, #80]
 4598              	.LVL380:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4599              		.loc 1 4542 0
 4600 0076 0124     		movs	r4, #1
 4601              	.LVL381:
 4602 0078 00E0     		b	.L395
 4603              	.LVL382:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 181


 4604              	.L396:
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4605              		.loc 1 4535 0
 4606 007a 0024     		movs	r4, #0
 4607              	.LVL383:
 4608              	.L395:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4609              		.loc 1 4545 0
 4610 007c 044B     		ldr	r3, .L398
 4611 007e 1B68     		ldr	r3, [r3]
 4612 0080 0022     		movs	r2, #0
 4613 0082 83F85420 		strb	r2, [r3, #84]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4614              		.loc 1 4547 0
 4615 0086 FFF7FEFF 		bl	vPortExitCritical
 4616              	.LVL384:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4617              		.loc 1 4550 0
 4618 008a 2046     		mov	r0, r4
 4619 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4620              	.LVL385:
 4621              	.L399:
 4622 008e 00BF     		.align	2
 4623              	.L398:
 4624 0090 00000000 		.word	.LANCHOR10
 4625 0094 04ED00E0 		.word	-536810236
 4626              		.cfi_endproc
 4627              	.LFE52:
 4629              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4630              		.align	2
 4631              		.global	xTaskGenericNotify
 4632              		.thumb
 4633              		.thumb_func
 4635              	xTaskGenericNotify:
 4636              	.LFB53:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4637              		.loc 1 4558 0
 4638              		.cfi_startproc
 4639              		@ args = 0, pretend = 0, frame = 0
 4640              		@ frame_needed = 0, uses_anonymous_args = 0
 4641              	.LVL386:
 4642 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4643              	.LCFI48:
 4644              		.cfi_def_cfa_offset 24
 4645              		.cfi_offset 3, -24
 4646              		.cfi_offset 4, -20
 4647              		.cfi_offset 5, -16
 4648              		.cfi_offset 6, -12
 4649              		.cfi_offset 7, -8
 4650              		.cfi_offset 14, -4
 4651              	.LVL387:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4652              		.loc 1 4563 0
 4653 0002 40B9     		cbnz	r0, .L401
 4654              	.LBB189:
 4655              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 182


 4656              		.loc 2 195 0
 4657              		.syntax unified
 4658              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4659 0004 4FF05003 			mov r3, #80												
 4660 0008 83F31188 		msr basepri, r3											
 4661 000c BFF36F8F 		isb														
 4662 0010 BFF34F8F 		dsb														
 4663              	
 4664              	@ 0 "" 2
 4665              	.LVL388:
 4666              		.thumb
 4667              		.syntax unified
 4668              	.L402:
 4669 0014 FEE7     		b	.L402
 4670              	.LVL389:
 4671              	.L401:
 4672 0016 0446     		mov	r4, r0
 4673 0018 1F46     		mov	r7, r3
 4674 001a 1546     		mov	r5, r2
 4675 001c 0E46     		mov	r6, r1
 4676              	.LVL390:
 4677              	.LBE190:
 4678              	.LBE189:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4679              		.loc 1 4566 0
 4680 001e FFF7FEFF 		bl	vPortEnterCritical
 4681              	.LVL391:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4682              		.loc 1 4568 0
 4683 0022 0FB1     		cbz	r7, .L403
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4684              		.loc 1 4570 0
 4685 0024 236D     		ldr	r3, [r4, #80]
 4686 0026 3B60     		str	r3, [r7]
 4687              	.L403:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4688              		.loc 1 4573 0
 4689 0028 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 4690 002c DBB2     		uxtb	r3, r3
 4691              	.LVL392:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4692              		.loc 1 4575 0
 4693 002e 0222     		movs	r2, #2
 4694 0030 84F85420 		strb	r2, [r4, #84]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4695              		.loc 1 4577 0
 4696 0034 6A1E     		subs	r2, r5, #1
 4697 0036 032A     		cmp	r2, #3
 4698 0038 15D8     		bhi	.L413
 4699 003a DFE802F0 		tbb	[pc, r2]
 4700              	.L406:
 4701 003e 02       		.byte	(.L405-.L406)/2
 4702 003f 07       		.byte	(.L407-.L406)/2
 4703 0040 0C       		.byte	(.L408-.L406)/2
 4704 0041 0F       		.byte	(.L409-.L406)/2
 4705              		.p2align 1
 4706              	.L405:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 183


4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4707              		.loc 1 4580 0
 4708 0042 226D     		ldr	r2, [r4, #80]
 4709 0044 1643     		orrs	r6, r6, r2
 4710              	.LVL393:
 4711 0046 2665     		str	r6, [r4, #80]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4712              		.loc 1 4560 0
 4713 0048 0125     		movs	r5, #1
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4714              		.loc 1 4581 0
 4715 004a 0FE0     		b	.L404
 4716              	.LVL394:
 4717              	.L407:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4718              		.loc 1 4584 0
 4719 004c 226D     		ldr	r2, [r4, #80]
 4720 004e 0132     		adds	r2, r2, #1
 4721 0050 2265     		str	r2, [r4, #80]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4722              		.loc 1 4560 0
 4723 0052 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4724              		.loc 1 4585 0
 4725 0054 0AE0     		b	.L404
 4726              	.L408:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4727              		.loc 1 4588 0
 4728 0056 2665     		str	r6, [r4, #80]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4729              		.loc 1 4560 0
 4730 0058 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4731              		.loc 1 4589 0
 4732 005a 07E0     		b	.L404
 4733              	.L409:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4734              		.loc 1 4592 0
 4735 005c 022B     		cmp	r3, #2
 4736 005e 04D0     		beq	.L414
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4737              		.loc 1 4594 0
 4738 0060 2665     		str	r6, [r4, #80]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4739              		.loc 1 4560 0
 4740 0062 0125     		movs	r5, #1
 4741 0064 02E0     		b	.L404
 4742              	.L413:
 4743 0066 0125     		movs	r5, #1
 4744 0068 00E0     		b	.L404
 4745              	.L414:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4746              		.loc 1 4599 0
 4747 006a 0025     		movs	r5, #0
 4748              	.LVL395:
 4749              	.L404:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 184


 4750              		.loc 1 4613 0
 4751 006c 012B     		cmp	r3, #1
 4752 006e 2CD1     		bne	.L410
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4753              		.loc 1 4615 0
 4754 0070 261D     		adds	r6, r4, #4
 4755 0072 3046     		mov	r0, r6
 4756 0074 FFF7FEFF 		bl	uxListRemove
 4757              	.LVL396:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4758              		.loc 1 4616 0
 4759 0078 E36A     		ldr	r3, [r4, #44]
 4760 007a 0122     		movs	r2, #1
 4761 007c 02FA03F1 		lsl	r1, r2, r3
 4762 0080 1448     		ldr	r0, .L416
 4763 0082 0268     		ldr	r2, [r0]
 4764 0084 0A43     		orrs	r2, r2, r1
 4765 0086 0260     		str	r2, [r0]
 4766 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4767 008c 9A00     		lsls	r2, r3, #2
 4768 008e 3146     		mov	r1, r6
 4769 0090 1148     		ldr	r0, .L416+4
 4770 0092 1044     		add	r0, r0, r2
 4771 0094 FFF7FEFF 		bl	vListInsertEnd
 4772              	.LVL397:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4773              		.loc 1 4619 0
 4774 0098 A36A     		ldr	r3, [r4, #40]
 4775 009a 43B1     		cbz	r3, .L411
 4776              	.LBB191:
 4777              	.LBB192:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4778              		.loc 2 195 0
 4779              		.syntax unified
 4780              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4781 009c 4FF05003 			mov r3, #80												
 4782 00a0 83F31188 		msr basepri, r3											
 4783 00a4 BFF36F8F 		isb														
 4784 00a8 BFF34F8F 		dsb														
 4785              	
 4786              	@ 0 "" 2
 4787              	.LVL398:
 4788              		.thumb
 4789              		.syntax unified
 4790              	.L412:
 4791 00ac FEE7     		b	.L412
 4792              	.L411:
 4793              	.LBE192:
 4794              	.LBE191:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4795              		.loc 1 4637 0
 4796 00ae E26A     		ldr	r2, [r4, #44]
 4797 00b0 0A4B     		ldr	r3, .L416+8
 4798 00b2 1B68     		ldr	r3, [r3]
 4799 00b4 DB6A     		ldr	r3, [r3, #44]
 4800 00b6 9A42     		cmp	r2, r3
 4801 00b8 07D9     		bls	.L410
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 185


4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4802              		.loc 1 4641 0
 4803 00ba 4FF08052 		mov	r2, #268435456
 4804 00be 084B     		ldr	r3, .L416+12
 4805 00c0 1A60     		str	r2, [r3]
 4806              		.syntax unified
 4807              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4808 00c2 BFF34F8F 		dsb
 4809              	@ 0 "" 2
 4810              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4811 00c6 BFF36F8F 		isb
 4812              	@ 0 "" 2
 4813              		.thumb
 4814              		.syntax unified
 4815              	.L410:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4816              		.loc 1 4653 0
 4817 00ca FFF7FEFF 		bl	vPortExitCritical
 4818              	.LVL399:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4819              		.loc 1 4656 0
 4820 00ce 2846     		mov	r0, r5
 4821 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4822              	.LVL400:
 4823              	.L417:
 4824 00d2 00BF     		.align	2
 4825              	.L416:
 4826 00d4 00000000 		.word	.LANCHOR13
 4827 00d8 00000000 		.word	.LANCHOR4
 4828 00dc 00000000 		.word	.LANCHOR10
 4829 00e0 04ED00E0 		.word	-536810236
 4830              		.cfi_endproc
 4831              	.LFE53:
 4833              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4834              		.align	2
 4835              		.global	xTaskGenericNotifyFromISR
 4836              		.thumb
 4837              		.thumb_func
 4839              	xTaskGenericNotifyFromISR:
 4840              	.LFB54:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4841              		.loc 1 4664 0
 4842              		.cfi_startproc
 4843              		@ args = 4, pretend = 0, frame = 0
 4844              		@ frame_needed = 0, uses_anonymous_args = 0
 4845              	.LVL401:
 4846 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4847              	.LCFI49:
 4848              		.cfi_def_cfa_offset 32
 4849              		.cfi_offset 3, -32
 4850              		.cfi_offset 4, -28
 4851              		.cfi_offset 5, -24
 4852              		.cfi_offset 6, -20
 4853              		.cfi_offset 7, -16
 4854              		.cfi_offset 8, -12
 4855              		.cfi_offset 9, -8
 4856              		.cfi_offset 14, -4
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 186


 4857 0004 089E     		ldr	r6, [sp, #32]
 4858              	.LVL402:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4859              		.loc 1 4670 0
 4860 0006 40B9     		cbnz	r0, .L419
 4861              	.LBB193:
 4862              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4863              		.loc 2 195 0
 4864              		.syntax unified
 4865              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4866 0008 4FF05003 			mov r3, #80												
 4867 000c 83F31188 		msr basepri, r3											
 4868 0010 BFF36F8F 		isb														
 4869 0014 BFF34F8F 		dsb														
 4870              	
 4871              	@ 0 "" 2
 4872              	.LVL403:
 4873              		.thumb
 4874              		.syntax unified
 4875              	.L420:
 4876 0018 FEE7     		b	.L420
 4877              	.LVL404:
 4878              	.L419:
 4879 001a 0446     		mov	r4, r0
 4880 001c 9946     		mov	r9, r3
 4881 001e 1546     		mov	r5, r2
 4882 0020 8846     		mov	r8, r1
 4883              	.LBE194:
 4884              	.LBE193:
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4885              		.loc 1 4688 0
 4886 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4887              	.LVL405:
 4888              	.LBB195:
 4889              	.LBB196:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4890              		.loc 2 211 0
 4891              		.syntax unified
 4892              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4893 0026 EFF31187 			mrs r7, basepri											
 4894 002a 4FF05003 		mov r3, #80												
 4895 002e 83F31188 		msr basepri, r3											
 4896 0032 BFF36F8F 		isb														
 4897 0036 BFF34F8F 		dsb														
 4898              	
 4899              	@ 0 "" 2
 4900              		.thumb
 4901              		.syntax unified
 4902              	.LBE196:
 4903              	.LBE195:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4904              		.loc 1 4694 0
 4905 003a B9F1000F 		cmp	r9, #0
 4906 003e 02D0     		beq	.L421
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4907              		.loc 1 4696 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 187


 4908 0040 236D     		ldr	r3, [r4, #80]
 4909 0042 C9F80030 		str	r3, [r9]
 4910              	.L421:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4911              		.loc 1 4699 0
 4912 0046 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 4913 004a DBB2     		uxtb	r3, r3
 4914              	.LVL406:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4915              		.loc 1 4700 0
 4916 004c 0222     		movs	r2, #2
 4917 004e 84F85420 		strb	r2, [r4, #84]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4918              		.loc 1 4702 0
 4919 0052 6A1E     		subs	r2, r5, #1
 4920 0054 032A     		cmp	r2, #3
 4921 0056 18D8     		bhi	.L434
 4922 0058 DFE802F0 		tbb	[pc, r2]
 4923              	.L424:
 4924 005c 02       		.byte	(.L423-.L424)/2
 4925 005d 08       		.byte	(.L425-.L424)/2
 4926 005e 0D       		.byte	(.L426-.L424)/2
 4927 005f 11       		.byte	(.L427-.L424)/2
 4928              		.p2align 1
 4929              	.L423:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4930              		.loc 1 4705 0
 4931 0060 226D     		ldr	r2, [r4, #80]
 4932 0062 42EA0802 		orr	r2, r2, r8
 4933 0066 2265     		str	r2, [r4, #80]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4934              		.loc 1 4667 0
 4935 0068 0125     		movs	r5, #1
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4936              		.loc 1 4706 0
 4937 006a 11E0     		b	.L422
 4938              	.L425:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4939              		.loc 1 4709 0
 4940 006c 226D     		ldr	r2, [r4, #80]
 4941 006e 0132     		adds	r2, r2, #1
 4942 0070 2265     		str	r2, [r4, #80]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4943              		.loc 1 4667 0
 4944 0072 0125     		movs	r5, #1
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4945              		.loc 1 4710 0
 4946 0074 0CE0     		b	.L422
 4947              	.L426:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4948              		.loc 1 4713 0
 4949 0076 C4F85080 		str	r8, [r4, #80]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4950              		.loc 1 4667 0
 4951 007a 0125     		movs	r5, #1
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4952              		.loc 1 4714 0
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 188


 4953 007c 08E0     		b	.L422
 4954              	.L427:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4955              		.loc 1 4717 0
 4956 007e 022B     		cmp	r3, #2
 4957 0080 05D0     		beq	.L435
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4958              		.loc 1 4719 0
 4959 0082 C4F85080 		str	r8, [r4, #80]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4960              		.loc 1 4667 0
 4961 0086 0125     		movs	r5, #1
 4962 0088 02E0     		b	.L422
 4963              	.L434:
 4964 008a 0125     		movs	r5, #1
 4965 008c 00E0     		b	.L422
 4966              	.L435:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4967              		.loc 1 4724 0
 4968 008e 0025     		movs	r5, #0
 4969              	.L422:
 4970              	.LVL407:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4971              		.loc 1 4738 0
 4972 0090 012B     		cmp	r3, #1
 4973 0092 35D1     		bne	.L428
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4974              		.loc 1 4741 0
 4975 0094 A36A     		ldr	r3, [r4, #40]
 4976              	.LVL408:
 4977 0096 43B1     		cbz	r3, .L429
 4978              	.LBB197:
 4979              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4980              		.loc 2 195 0
 4981              		.syntax unified
 4982              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4983 0098 4FF05003 			mov r3, #80												
 4984 009c 83F31188 		msr basepri, r3											
 4985 00a0 BFF36F8F 		isb														
 4986 00a4 BFF34F8F 		dsb														
 4987              	
 4988              	@ 0 "" 2
 4989              	.LVL409:
 4990              		.thumb
 4991              		.syntax unified
 4992              	.L430:
 4993 00a8 FEE7     		b	.L430
 4994              	.L429:
 4995              	.LBE198:
 4996              	.LBE197:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4997              		.loc 1 4743 0
 4998 00aa 184B     		ldr	r3, .L437
 4999 00ac 1B68     		ldr	r3, [r3]
 5000 00ae ABB9     		cbnz	r3, .L431
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 189


 5001              		.loc 1 4745 0
 5002 00b0 04F10408 		add	r8, r4, #4
 5003              	.LVL410:
 5004 00b4 4046     		mov	r0, r8
 5005 00b6 FFF7FEFF 		bl	uxListRemove
 5006              	.LVL411:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5007              		.loc 1 4746 0
 5008 00ba E36A     		ldr	r3, [r4, #44]
 5009 00bc 0122     		movs	r2, #1
 5010 00be 02FA03F1 		lsl	r1, r2, r3
 5011 00c2 1348     		ldr	r0, .L437+4
 5012 00c4 0268     		ldr	r2, [r0]
 5013 00c6 0A43     		orrs	r2, r2, r1
 5014 00c8 0260     		str	r2, [r0]
 5015 00ca 03EB8303 		add	r3, r3, r3, lsl #2
 5016 00ce 9A00     		lsls	r2, r3, #2
 5017 00d0 4146     		mov	r1, r8
 5018 00d2 1048     		ldr	r0, .L437+8
 5019 00d4 1044     		add	r0, r0, r2
 5020 00d6 FFF7FEFF 		bl	vListInsertEnd
 5021              	.LVL412:
 5022 00da 04E0     		b	.L432
 5023              	.LVL413:
 5024              	.L431:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5025              		.loc 1 4752 0
 5026 00dc 04F11801 		add	r1, r4, #24
 5027 00e0 0D48     		ldr	r0, .L437+12
 5028 00e2 FFF7FEFF 		bl	vListInsertEnd
 5029              	.LVL414:
 5030              	.L432:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5031              		.loc 1 4755 0
 5032 00e6 E26A     		ldr	r2, [r4, #44]
 5033 00e8 0C4B     		ldr	r3, .L437+16
 5034 00ea 1B68     		ldr	r3, [r3]
 5035 00ec DB6A     		ldr	r3, [r3, #44]
 5036 00ee 9A42     		cmp	r2, r3
 5037 00f0 06D9     		bls	.L428
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5038              		.loc 1 4759 0
 5039 00f2 16B1     		cbz	r6, .L433
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5040              		.loc 1 4761 0
 5041 00f4 0123     		movs	r3, #1
 5042 00f6 3360     		str	r3, [r6]
 5043 00f8 02E0     		b	.L428
 5044              	.L433:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5045              		.loc 1 4768 0
 5046 00fa 0122     		movs	r2, #1
 5047 00fc 084B     		ldr	r3, .L437+20
 5048 00fe 1A60     		str	r2, [r3]
 5049              	.L428:
 5050              	.LVL415:
 5051              	.LBB199:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 190


 5052              	.LBB200:
 5053              		.loc 2 229 0
 5054              		.syntax unified
 5055              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5056 0100 87F31188 			msr basepri, r7	
 5057              	@ 0 "" 2
 5058              	.LVL416:
 5059              		.thumb
 5060              		.syntax unified
 5061              	.LBE200:
 5062              	.LBE199:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5063              		.loc 1 4780 0
 5064 0104 2846     		mov	r0, r5
 5065 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5066              	.LVL417:
 5067              	.L438:
 5068 010a 00BF     		.align	2
 5069              	.L437:
 5070 010c 00000000 		.word	.LANCHOR16
 5071 0110 00000000 		.word	.LANCHOR13
 5072 0114 00000000 		.word	.LANCHOR4
 5073 0118 00000000 		.word	.LANCHOR1
 5074 011c 00000000 		.word	.LANCHOR10
 5075 0120 00000000 		.word	.LANCHOR19
 5076              		.cfi_endproc
 5077              	.LFE54:
 5079              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5080              		.align	2
 5081              		.global	vTaskNotifyGiveFromISR
 5082              		.thumb
 5083              		.thumb_func
 5085              	vTaskNotifyGiveFromISR:
 5086              	.LFB55:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5087              		.loc 1 4788 0
 5088              		.cfi_startproc
 5089              		@ args = 0, pretend = 0, frame = 0
 5090              		@ frame_needed = 0, uses_anonymous_args = 0
 5091              	.LVL418:
 5092 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5093              	.LCFI50:
 5094              		.cfi_def_cfa_offset 24
 5095              		.cfi_offset 3, -24
 5096              		.cfi_offset 4, -20
 5097              		.cfi_offset 5, -16
 5098              		.cfi_offset 6, -12
 5099              		.cfi_offset 7, -8
 5100              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5101              		.loc 1 4793 0
 5102 0002 40B9     		cbnz	r0, .L440
 5103              	.LBB201:
 5104              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5105              		.loc 2 195 0
 5106              		.syntax unified
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 191


 5107              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5108 0004 4FF05003 			mov r3, #80												
 5109 0008 83F31188 		msr basepri, r3											
 5110 000c BFF36F8F 		isb														
 5111 0010 BFF34F8F 		dsb														
 5112              	
 5113              	@ 0 "" 2
 5114              	.LVL419:
 5115              		.thumb
 5116              		.syntax unified
 5117              	.L441:
 5118 0014 FEE7     		b	.L441
 5119              	.L440:
 5120 0016 0446     		mov	r4, r0
 5121 0018 0D46     		mov	r5, r1
 5122              	.LBE202:
 5123              	.LBE201:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5124              		.loc 1 4811 0
 5125 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5126              	.LVL420:
 5127              	.LBB203:
 5128              	.LBB204:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5129              		.loc 2 211 0
 5130              		.syntax unified
 5131              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5132 001e EFF31187 			mrs r7, basepri											
 5133 0022 4FF05003 		mov r3, #80												
 5134 0026 83F31188 		msr basepri, r3											
 5135 002a BFF36F8F 		isb														
 5136 002e BFF34F8F 		dsb														
 5137              	
 5138              	@ 0 "" 2
 5139              		.thumb
 5140              		.syntax unified
 5141              	.LBE204:
 5142              	.LBE203:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5143              		.loc 1 4817 0
 5144 0032 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5145 0036 DBB2     		uxtb	r3, r3
 5146              	.LVL421:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5147              		.loc 1 4818 0
 5148 0038 0222     		movs	r2, #2
 5149 003a 84F85420 		strb	r2, [r4, #84]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5150              		.loc 1 4822 0
 5151 003e 226D     		ldr	r2, [r4, #80]
 5152 0040 0132     		adds	r2, r2, #1
 5153 0042 2265     		str	r2, [r4, #80]
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5154              		.loc 1 4828 0
 5155 0044 012B     		cmp	r3, #1
 5156 0046 34D1     		bne	.L442
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 192


 5157              		.loc 1 4831 0
 5158 0048 A36A     		ldr	r3, [r4, #40]
 5159              	.LVL422:
 5160 004a 43B1     		cbz	r3, .L443
 5161              	.LBB205:
 5162              	.LBB206:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5163              		.loc 2 195 0
 5164              		.syntax unified
 5165              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5166 004c 4FF05003 			mov r3, #80												
 5167 0050 83F31188 		msr basepri, r3											
 5168 0054 BFF36F8F 		isb														
 5169 0058 BFF34F8F 		dsb														
 5170              	
 5171              	@ 0 "" 2
 5172              	.LVL423:
 5173              		.thumb
 5174              		.syntax unified
 5175              	.L444:
 5176 005c FEE7     		b	.L444
 5177              	.L443:
 5178              	.LBE206:
 5179              	.LBE205:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5180              		.loc 1 4833 0
 5181 005e 164B     		ldr	r3, .L449
 5182 0060 1B68     		ldr	r3, [r3]
 5183 0062 A3B9     		cbnz	r3, .L445
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5184              		.loc 1 4835 0
 5185 0064 261D     		adds	r6, r4, #4
 5186 0066 3046     		mov	r0, r6
 5187 0068 FFF7FEFF 		bl	uxListRemove
 5188              	.LVL424:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5189              		.loc 1 4836 0
 5190 006c E36A     		ldr	r3, [r4, #44]
 5191 006e 0122     		movs	r2, #1
 5192 0070 02FA03F1 		lsl	r1, r2, r3
 5193 0074 1148     		ldr	r0, .L449+4
 5194 0076 0268     		ldr	r2, [r0]
 5195 0078 0A43     		orrs	r2, r2, r1
 5196 007a 0260     		str	r2, [r0]
 5197 007c 03EB8303 		add	r3, r3, r3, lsl #2
 5198 0080 9A00     		lsls	r2, r3, #2
 5199 0082 3146     		mov	r1, r6
 5200 0084 0E48     		ldr	r0, .L449+8
 5201 0086 1044     		add	r0, r0, r2
 5202 0088 FFF7FEFF 		bl	vListInsertEnd
 5203              	.LVL425:
 5204 008c 04E0     		b	.L446
 5205              	.L445:
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5206              		.loc 1 4842 0
 5207 008e 04F11801 		add	r1, r4, #24
 5208 0092 0C48     		ldr	r0, .L449+12
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 193


 5209 0094 FFF7FEFF 		bl	vListInsertEnd
 5210              	.LVL426:
 5211              	.L446:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5212              		.loc 1 4845 0
 5213 0098 E26A     		ldr	r2, [r4, #44]
 5214 009a 0B4B     		ldr	r3, .L449+16
 5215 009c 1B68     		ldr	r3, [r3]
 5216 009e DB6A     		ldr	r3, [r3, #44]
 5217 00a0 9A42     		cmp	r2, r3
 5218 00a2 06D9     		bls	.L442
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5219              		.loc 1 4849 0
 5220 00a4 15B1     		cbz	r5, .L447
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5221              		.loc 1 4851 0
 5222 00a6 0123     		movs	r3, #1
 5223 00a8 2B60     		str	r3, [r5]
 5224 00aa 02E0     		b	.L442
 5225              	.L447:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5226              		.loc 1 4858 0
 5227 00ac 0122     		movs	r2, #1
 5228 00ae 074B     		ldr	r3, .L449+20
 5229 00b0 1A60     		str	r2, [r3]
 5230              	.L442:
 5231              	.LVL427:
 5232              	.LBB207:
 5233              	.LBB208:
 5234              		.loc 2 229 0
 5235              		.syntax unified
 5236              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5237 00b2 87F31188 			msr basepri, r7	
 5238              	@ 0 "" 2
 5239              	.LVL428:
 5240              		.thumb
 5241              		.syntax unified
 5242 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5243              	.LVL429:
 5244              	.L450:
 5245              		.align	2
 5246              	.L449:
 5247 00b8 00000000 		.word	.LANCHOR16
 5248 00bc 00000000 		.word	.LANCHOR13
 5249 00c0 00000000 		.word	.LANCHOR4
 5250 00c4 00000000 		.word	.LANCHOR1
 5251 00c8 00000000 		.word	.LANCHOR10
 5252 00cc 00000000 		.word	.LANCHOR19
 5253              	.LBE208:
 5254              	.LBE207:
 5255              		.cfi_endproc
 5256              	.LFE55:
 5258              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5259              		.align	2
 5260              		.global	xTaskNotifyStateClear
 5261              		.thumb
 5262              		.thumb_func
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 194


 5264              	xTaskNotifyStateClear:
 5265              	.LFB56:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5266              		.loc 1 4877 0
 5267              		.cfi_startproc
 5268              		@ args = 0, pretend = 0, frame = 0
 5269              		@ frame_needed = 0, uses_anonymous_args = 0
 5270              	.LVL430:
 5271 0000 10B5     		push	{r4, lr}
 5272              	.LCFI51:
 5273              		.cfi_def_cfa_offset 8
 5274              		.cfi_offset 4, -8
 5275              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5276              		.loc 1 4883 0
 5277 0002 0446     		mov	r4, r0
 5278 0004 08B9     		cbnz	r0, .L452
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5279              		.loc 1 4883 0 is_stmt 0 discriminator 1
 5280 0006 094B     		ldr	r3, .L456
 5281 0008 1C68     		ldr	r4, [r3]
 5282              	.LVL431:
 5283              	.L452:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5284              		.loc 1 4885 0 is_stmt 1 discriminator 4
 5285 000a FFF7FEFF 		bl	vPortEnterCritical
 5286              	.LVL432:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5287              		.loc 1 4887 0 discriminator 4
 5288 000e 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5289 0012 DBB2     		uxtb	r3, r3
 5290 0014 022B     		cmp	r3, #2
 5291 0016 04D1     		bne	.L454
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5292              		.loc 1 4889 0
 5293 0018 0023     		movs	r3, #0
 5294 001a 84F85430 		strb	r3, [r4, #84]
 5295              	.LVL433:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5296              		.loc 1 4890 0
 5297 001e 0124     		movs	r4, #1
 5298              	.LVL434:
 5299 0020 00E0     		b	.L453
 5300              	.LVL435:
 5301              	.L454:
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5302              		.loc 1 4894 0
 5303 0022 0024     		movs	r4, #0
 5304              	.LVL436:
 5305              	.L453:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5306              		.loc 1 4897 0
 5307 0024 FFF7FEFF 		bl	vPortExitCritical
 5308              	.LVL437:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5309              		.loc 1 4900 0
 5310 0028 2046     		mov	r0, r4
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 195


 5311 002a 10BD     		pop	{r4, pc}
 5312              	.LVL438:
 5313              	.L457:
 5314              		.align	2
 5315              	.L456:
 5316 002c 00000000 		.word	.LANCHOR10
 5317              		.cfi_endproc
 5318              	.LFE56:
 5320              		.global	pxCurrentTCB
 5321              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5322              		.align	2
 5323              		.set	.LANCHOR2,. + 0
 5326              	pxDelayedTaskList:
 5327 0000 00000000 		.space	4
 5328              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5329              		.align	2
 5330              		.set	.LANCHOR11,. + 0
 5333              	xSchedulerRunning:
 5334 0000 00000000 		.space	4
 5335              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5336              		.align	2
 5337              		.set	.LANCHOR7,. + 0
 5340              	xTasksWaitingTermination:
 5341 0000 00000000 		.space	20
 5341      00000000 
 5341      00000000 
 5341      00000000 
 5341      00000000 
 5342              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5343              		.align	2
 5344              		.set	.LANCHOR8,. + 0
 5347              	pxOverflowDelayedTaskList:
 5348 0000 00000000 		.space	4
 5349              		.section	.bss.uxPendedTicks,"aw",%nobits
 5350              		.align	2
 5351              		.set	.LANCHOR18,. + 0
 5354              	uxPendedTicks:
 5355 0000 00000000 		.space	4
 5356              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5357              		.align	2
 5358              		.set	.LANCHOR4,. + 0
 5361              	pxReadyTasksLists:
 5362 0000 00000000 		.space	140
 5362      00000000 
 5362      00000000 
 5362      00000000 
 5362      00000000 
 5363              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5364              		.align	2
 5365              		.set	.LANCHOR16,. + 0
 5368              	uxSchedulerSuspended:
 5369 0000 00000000 		.space	4
 5370              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5371              		.align	2
 5372              		.set	.LANCHOR14,. + 0
 5375              	uxDeletedTasksWaitingCleanUp:
 5376 0000 00000000 		.space	4
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 196


 5377              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5378              		.align	2
 5379              		.set	.LANCHOR9,. + 0
 5382              	uxCurrentNumberOfTasks:
 5383 0000 00000000 		.space	4
 5384              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5385              		.align	2
 5386              		.set	.LANCHOR10,. + 0
 5389              	pxCurrentTCB:
 5390 0000 00000000 		.space	4
 5391              		.section	.bss.xPendingReadyList,"aw",%nobits
 5392              		.align	2
 5393              		.set	.LANCHOR1,. + 0
 5396              	xPendingReadyList:
 5397 0000 00000000 		.space	20
 5397      00000000 
 5397      00000000 
 5397      00000000 
 5397      00000000 
 5398              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5399              		.align	2
 5400              		.set	.LANCHOR17,. + 0
 5403              	xNumOfOverflows:
 5404 0000 00000000 		.space	4
 5405              		.section	.bss.xTickCount,"aw",%nobits
 5406              		.align	2
 5407              		.set	.LANCHOR15,. + 0
 5410              	xTickCount:
 5411 0000 00000000 		.space	4
 5412              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5413              		.align	2
 5414              		.set	.LANCHOR3,. + 0
 5417              	xNextTaskUnblockTime:
 5418 0000 00000000 		.space	4
 5419              		.section	.rodata.str1.4,"aMS",%progbits,1
 5420              		.align	2
 5421              	.LC0:
 5422 0000 49444C45 		.ascii	"IDLE\000"
 5422      00
 5423              		.section	.bss.uxTaskNumber,"aw",%nobits
 5424              		.align	2
 5425              		.set	.LANCHOR12,. + 0
 5428              	uxTaskNumber:
 5429 0000 00000000 		.space	4
 5430              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5431              		.align	2
 5432              		.set	.LANCHOR5,. + 0
 5435              	xDelayedTaskList1:
 5436 0000 00000000 		.space	20
 5436      00000000 
 5436      00000000 
 5436      00000000 
 5436      00000000 
 5437              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5438              		.align	2
 5439              		.set	.LANCHOR6,. + 0
 5442              	xDelayedTaskList2:
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 197


 5443 0000 00000000 		.space	20
 5443      00000000 
 5443      00000000 
 5443      00000000 
 5443      00000000 
 5444              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5445              		.align	2
 5446              		.set	.LANCHOR0,. + 0
 5449              	xSuspendedTaskList:
 5450 0000 00000000 		.space	20
 5450      00000000 
 5450      00000000 
 5450      00000000 
 5450      00000000 
 5451              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5452              		.align	2
 5453              		.set	.LANCHOR13,. + 0
 5456              	uxTopReadyPriority:
 5457 0000 00000000 		.space	4
 5458              		.section	.bss.xYieldPending,"aw",%nobits
 5459              		.align	2
 5460              		.set	.LANCHOR19,. + 0
 5463              	xYieldPending:
 5464 0000 00000000 		.space	4
 5465              		.text
 5466              	.Letext0:
 5467              		.file 3 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.4.1\\include\\s
 5468              		.file 4 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\machine\\_default_
 5469              		.file 5 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\sys\\_stdint.h"
 5470              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5471              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 5472              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5473              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5474              		.file 10 "d:\\tool_chain\\gcc-arm-none-eabi\\5.4 2016q3\\arm-none-eabi\\include\\string.h"
 5475              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 198


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\WINDOWS\TEMP\ccztt78X.s:22     .text.prvTaskIsTaskSuspended:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:26     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\WINDOWS\TEMP\ccztt78X.s:105    .text.prvTaskIsTaskSuspended:00000044 $d
C:\WINDOWS\TEMP\ccztt78X.s:111    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:115    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\WINDOWS\TEMP\ccztt78X.s:155    .text.prvResetNextTaskUnblockTime:0000002c $d
C:\WINDOWS\TEMP\ccztt78X.s:161    .text.prvInitialiseNewTask:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:165    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\WINDOWS\TEMP\ccztt78X.s:287    .text.prvInitialiseTaskLists:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:291    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\WINDOWS\TEMP\ccztt78X.s:357    .text.prvInitialiseTaskLists:00000048 $d
C:\WINDOWS\TEMP\ccztt78X.s:369    .text.prvAddNewTaskToReadyList:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:373    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\WINDOWS\TEMP\ccztt78X.s:478    .text.prvAddNewTaskToReadyList:0000008c $d
C:\WINDOWS\TEMP\ccztt78X.s:489    .text.prvDeleteTCB:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:493    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\WINDOWS\TEMP\ccztt78X.s:557    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:561    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\WINDOWS\TEMP\ccztt78X.s:617    .text.prvCheckTasksWaitingTermination:00000038 $d
C:\WINDOWS\TEMP\ccztt78X.s:624    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:628    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\WINDOWS\TEMP\ccztt78X.s:725    .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\WINDOWS\TEMP\ccztt78X.s:736    .text.prvIdleTask:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:740    .text.prvIdleTask:00000000 prvIdleTask
C:\WINDOWS\TEMP\ccztt78X.s:787    .text.prvIdleTask:00000024 $d
C:\WINDOWS\TEMP\ccztt78X.s:793    .text.xTaskCreateStatic:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:798    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\WINDOWS\TEMP\ccztt78X.s:934    .text.xTaskCreate:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:939    .text.xTaskCreate:00000000 xTaskCreate
C:\WINDOWS\TEMP\ccztt78X.s:1038   .text.vTaskDelete:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1043   .text.vTaskDelete:00000000 vTaskDelete
C:\WINDOWS\TEMP\ccztt78X.s:1186   .text.vTaskDelete:000000b4 $d
C:\WINDOWS\TEMP\ccztt78X.s:1200   .text.uxTaskPriorityGet:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1205   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\WINDOWS\TEMP\ccztt78X.s:1241   .text.uxTaskPriorityGet:00000018 $d
C:\WINDOWS\TEMP\ccztt78X.s:1246   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1251   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\WINDOWS\TEMP\ccztt78X.s:1311   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\WINDOWS\TEMP\ccztt78X.s:1316   .text.vTaskPrioritySet:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1321   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\WINDOWS\TEMP\ccztt78X.s:1514   .text.vTaskPrioritySet:000000e0 $d
C:\WINDOWS\TEMP\ccztt78X.s:1522   .text.vTaskResume:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1527   .text.vTaskResume:00000000 vTaskResume
C:\WINDOWS\TEMP\ccztt78X.s:1629   .text.vTaskResume:00000078 $d
C:\WINDOWS\TEMP\ccztt78X.s:1637   .text.xTaskResumeFromISR:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1642   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\WINDOWS\TEMP\ccztt78X.s:1778   .text.xTaskResumeFromISR:00000094 $d
C:\WINDOWS\TEMP\ccztt78X.s:1787   .text.vTaskStartScheduler:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1792   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\WINDOWS\TEMP\ccztt78X.s:1884   .text.vTaskStartScheduler:00000060 $d
C:\WINDOWS\TEMP\ccztt78X.s:1893   .text.vTaskEndScheduler:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1898   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\WINDOWS\TEMP\ccztt78X.s:1935   .text.vTaskEndScheduler:00000020 $d
C:\WINDOWS\TEMP\ccztt78X.s:1940   .text.vTaskSuspendAll:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1945   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 199


C:\WINDOWS\TEMP\ccztt78X.s:1961   .text.vTaskSuspendAll:0000000c $d
C:\WINDOWS\TEMP\ccztt78X.s:1966   .text.xTaskGetTickCount:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1971   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\WINDOWS\TEMP\ccztt78X.s:1987   .text.xTaskGetTickCount:00000008 $d
C:\WINDOWS\TEMP\ccztt78X.s:1992   .text.xTaskGetTickCountFromISR:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:1997   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\WINDOWS\TEMP\ccztt78X.s:2020   .text.xTaskGetTickCountFromISR:0000000c $d
C:\WINDOWS\TEMP\ccztt78X.s:2025   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2030   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\WINDOWS\TEMP\ccztt78X.s:2045   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\WINDOWS\TEMP\ccztt78X.s:2050   .text.pcTaskGetName:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2055   .text.pcTaskGetName:00000000 pcTaskGetName
C:\WINDOWS\TEMP\ccztt78X.s:2099   .text.pcTaskGetName:00000024 $d
C:\WINDOWS\TEMP\ccztt78X.s:2104   .text.xTaskIncrementTick:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2109   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\WINDOWS\TEMP\ccztt78X.s:2322   .text.xTaskIncrementTick:000000f8 $d
C:\WINDOWS\TEMP\ccztt78X.s:2337   .text.xTaskResumeAll:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2342   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\WINDOWS\TEMP\ccztt78X.s:2527   .text.xTaskResumeAll:000000d4 $d
C:\WINDOWS\TEMP\ccztt78X.s:2540   .text.vTaskDelay:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2545   .text.vTaskDelay:00000000 vTaskDelay
C:\WINDOWS\TEMP\ccztt78X.s:2622   .text.vTaskDelay:00000048 $d
C:\WINDOWS\TEMP\ccztt78X.s:2628   .text.vTaskSetApplicationTaskTag:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2633   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
C:\WINDOWS\TEMP\ccztt78X.s:2669   .text.vTaskSetApplicationTaskTag:00000018 $d
C:\WINDOWS\TEMP\ccztt78X.s:2674   .text.xTaskGetApplicationTaskTag:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2679   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
C:\WINDOWS\TEMP\ccztt78X.s:2715   .text.xTaskGetApplicationTaskTag:00000018 $d
C:\WINDOWS\TEMP\ccztt78X.s:2720   .text.xTaskCallApplicationTaskHook:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2725   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
C:\WINDOWS\TEMP\ccztt78X.s:2764   .text.xTaskCallApplicationTaskHook:00000018 $d
C:\WINDOWS\TEMP\ccztt78X.s:2769   .text.vTaskSwitchContext:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2774   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\WINDOWS\TEMP\ccztt78X.s:2916   .text.vTaskSwitchContext:000000b0 $d
C:\WINDOWS\TEMP\ccztt78X.s:2927   .text.vTaskSuspend:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:2932   .text.vTaskSuspend:00000000 vTaskSuspend
C:\WINDOWS\TEMP\ccztt78X.s:3088   .text.vTaskSuspend:000000c4 $d
C:\WINDOWS\TEMP\ccztt78X.s:3100   .text.vTaskPlaceOnEventList:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3105   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\WINDOWS\TEMP\ccztt78X.s:3157   .text.vTaskPlaceOnEventList:0000002c $d
C:\WINDOWS\TEMP\ccztt78X.s:3162   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3167   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\WINDOWS\TEMP\ccztt78X.s:3254   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\WINDOWS\TEMP\ccztt78X.s:3260   .text.xTaskRemoveFromEventList:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3265   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\WINDOWS\TEMP\ccztt78X.s:3366   .text.xTaskRemoveFromEventList:00000074 $d
C:\WINDOWS\TEMP\ccztt78X.s:3376   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3381   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\WINDOWS\TEMP\ccztt78X.s:3485   .text.vTaskRemoveFromUnorderedEventList:00000078 $d
C:\WINDOWS\TEMP\ccztt78X.s:3494   .text.vTaskSetTimeOutState:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3499   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\WINDOWS\TEMP\ccztt78X.s:3553   .text.vTaskSetTimeOutState:00000030 $d
C:\WINDOWS\TEMP\ccztt78X.s:3559   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3564   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\WINDOWS\TEMP\ccztt78X.s:3584   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\WINDOWS\TEMP\ccztt78X.s:3590   .text.xTaskCheckForTimeOut:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3595   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 200


C:\WINDOWS\TEMP\ccztt78X.s:3729   .text.xTaskCheckForTimeOut:00000078 $d
C:\WINDOWS\TEMP\ccztt78X.s:3735   .text.vTaskMissedYield:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3740   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\WINDOWS\TEMP\ccztt78X.s:3755   .text.vTaskMissedYield:00000008 $d
C:\WINDOWS\TEMP\ccztt78X.s:3760   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3765   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\WINDOWS\TEMP\ccztt78X.s:3781   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\WINDOWS\TEMP\ccztt78X.s:3786   .text.xTaskGetSchedulerState:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3791   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\WINDOWS\TEMP\ccztt78X.s:3822   .text.xTaskGetSchedulerState:00000018 $d
C:\WINDOWS\TEMP\ccztt78X.s:3828   .text.xTaskPriorityInherit:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3833   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\WINDOWS\TEMP\ccztt78X.s:3982   .text.xTaskPriorityInherit:000000b8 $d
C:\WINDOWS\TEMP\ccztt78X.s:3989   .text.xTaskPriorityDisinherit:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:3994   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\WINDOWS\TEMP\ccztt78X.s:4150   .text.xTaskPriorityDisinherit:000000a8 $d
C:\WINDOWS\TEMP\ccztt78X.s:4157   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4162   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\WINDOWS\TEMP\ccztt78X.s:4324   .text.vTaskPriorityDisinheritAfterTimeout:000000c0 $d
C:\WINDOWS\TEMP\ccztt78X.s:4331   .text.uxTaskResetEventItemValue:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4336   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\WINDOWS\TEMP\ccztt78X.s:4359   .text.uxTaskResetEventItemValue:00000014 $d
C:\WINDOWS\TEMP\ccztt78X.s:4364   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4369   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\WINDOWS\TEMP\ccztt78X.s:4395   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\WINDOWS\TEMP\ccztt78X.s:4400   .text.ulTaskNotifyTake:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4405   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\WINDOWS\TEMP\ccztt78X.s:4498   .text.ulTaskNotifyTake:0000006c $d
C:\WINDOWS\TEMP\ccztt78X.s:4504   .text.xTaskNotifyWait:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4509   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\WINDOWS\TEMP\ccztt78X.s:4624   .text.xTaskNotifyWait:00000090 $d
C:\WINDOWS\TEMP\ccztt78X.s:4630   .text.xTaskGenericNotify:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4635   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\WINDOWS\TEMP\ccztt78X.s:4701   .text.xTaskGenericNotify:0000003e $d
C:\WINDOWS\TEMP\ccztt78X.s:4705   .text.xTaskGenericNotify:00000042 $t
C:\WINDOWS\TEMP\ccztt78X.s:4826   .text.xTaskGenericNotify:000000d4 $d
C:\WINDOWS\TEMP\ccztt78X.s:4834   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:4839   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\WINDOWS\TEMP\ccztt78X.s:4924   .text.xTaskGenericNotifyFromISR:0000005c $d
C:\WINDOWS\TEMP\ccztt78X.s:4928   .text.xTaskGenericNotifyFromISR:00000060 $t
C:\WINDOWS\TEMP\ccztt78X.s:5070   .text.xTaskGenericNotifyFromISR:0000010c $d
C:\WINDOWS\TEMP\ccztt78X.s:5080   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:5085   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\WINDOWS\TEMP\ccztt78X.s:5247   .text.vTaskNotifyGiveFromISR:000000b8 $d
C:\WINDOWS\TEMP\ccztt78X.s:5259   .text.xTaskNotifyStateClear:00000000 $t
C:\WINDOWS\TEMP\ccztt78X.s:5264   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\WINDOWS\TEMP\ccztt78X.s:5316   .text.xTaskNotifyStateClear:0000002c $d
C:\WINDOWS\TEMP\ccztt78X.s:5389   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\WINDOWS\TEMP\ccztt78X.s:5322   .bss.pxDelayedTaskList:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5326   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\WINDOWS\TEMP\ccztt78X.s:5329   .bss.xSchedulerRunning:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5333   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\WINDOWS\TEMP\ccztt78X.s:5336   .bss.xTasksWaitingTermination:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5340   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\WINDOWS\TEMP\ccztt78X.s:5343   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5347   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\WINDOWS\TEMP\ccztt78X.s:5350   .bss.uxPendedTicks:00000000 $d
ARM GAS  C:\WINDOWS\TEMP\ccztt78X.s 			page 201


C:\WINDOWS\TEMP\ccztt78X.s:5354   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\WINDOWS\TEMP\ccztt78X.s:5357   .bss.pxReadyTasksLists:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5361   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\WINDOWS\TEMP\ccztt78X.s:5364   .bss.uxSchedulerSuspended:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5368   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\WINDOWS\TEMP\ccztt78X.s:5371   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5375   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\WINDOWS\TEMP\ccztt78X.s:5378   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5382   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\WINDOWS\TEMP\ccztt78X.s:5385   .bss.pxCurrentTCB:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5392   .bss.xPendingReadyList:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5396   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\WINDOWS\TEMP\ccztt78X.s:5399   .bss.xNumOfOverflows:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5403   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\WINDOWS\TEMP\ccztt78X.s:5406   .bss.xTickCount:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5410   .bss.xTickCount:00000000 xTickCount
C:\WINDOWS\TEMP\ccztt78X.s:5413   .bss.xNextTaskUnblockTime:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5417   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\WINDOWS\TEMP\ccztt78X.s:5420   .rodata.str1.4:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5424   .bss.uxTaskNumber:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5428   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\WINDOWS\TEMP\ccztt78X.s:5431   .bss.xDelayedTaskList1:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5435   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\WINDOWS\TEMP\ccztt78X.s:5438   .bss.xDelayedTaskList2:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5442   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\WINDOWS\TEMP\ccztt78X.s:5445   .bss.xSuspendedTaskList:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5449   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\WINDOWS\TEMP\ccztt78X.s:5452   .bss.uxTopReadyPriority:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5456   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\WINDOWS\TEMP\ccztt78X.s:5459   .bss.xYieldPending:00000000 $d
C:\WINDOWS\TEMP\ccztt78X.s:5463   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
vApplicationIdleHook
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
vApplicationStackOverflowHook
